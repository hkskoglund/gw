##!/bin/bash
# example /gw -h 10.42.0.180  -s 3 
# scan for 3 seconds 
# example ./gw -h 10.42.0.180 -c mac
# read mac
# Info  from https://www.xmodulo.com/tcp-udp-socket-bash-shell.html
# Writing CMD_BROADCAST 0x12 to HOST port 46000
# https://brendanzagaeski.appspot.com/0006.html - hexdump examples
#Protocol documentation : https://osswww.ecowitt.net/uploads/20210716/WN1900%20GW1000,1100%20WH2680,2650%20telenet%20v1.6.0%20.pdf (https://www.ecowitt.com/shop/forum/forumDetails/255)

#HOST=10.42.0.180

FD_UDP=3
DEBUG=0

CMD_READ_PATH=0x51
CMD_WRITE_PATH=0x52

CMD_READ_VERSION=0x50
CMD_REBOOT=0x40
CMD_READ_MAC=0x26
CMD_READ_WUNDERGROUND=0x20
CMD_READ_ECOWITT=0x1e

CMD_READ_CUSTOMIZED=0x2a
CMD_WRITE_CUSTOMIZED=0x2b

function connect 
{
  local UDP_SERVER_PORT=46000
  local TCP_SERVER_PORT=45000
  echo "Connecting host $HOST:$UDP_SERVER_PORT (UDP)"
  exec 3<>/dev/udp/$1/$UDP_SERVER_PORT
  echo "Connecting host $HOST:$TCP_SERVER_PORT (TCP)"
  exec 4<>/dev/tcp/$1/$TCP_SERVER_PORT
  

  #echo Current shell PID $$
  if [[ $DEBUG -eq 1 ]] 
  then
    netstat -tunp | grep "$$"
  fi
}

function disconnect
{
  #Close sockets
  exec 3>&- 
  exec 4>&-
}


function result
{
STATUS=${PACKET[4]}
      if [ $STATUS == "00" ]
      then
         echo $COMMAND OK
      else
        echo $COMMAND FAILED
      fi
}

function hexToString 
{
  #not possible to return string i bash
  HEXTOSTRING=""
  NEXT_LENGTH=$(( $1 + 1 + $(( 16#${PACKET[$1]} )) ))

  for ((n=$(( $1 + 1 )); n < $NEXT_LENGTH; n++)); do 
     HEXTOSTRING+=$( echo -en "\u${PACKET[$n]}" )
   done
}

function printCustomized
{
   echo Customized id: $CUSTOMIZED_ID
   echo Customized password : $CUSTOMIZED_PASSWORD
   echo Customized server: $CUSTOMIZED_SERVER
   echo Customized port: $CUSTOMIZED_PORT
   echo Customized interval: $CUSTOMIZED_INTERVAL
    if (( $CUSTOMIZED_TYPE == 1 )) 
    then
      echo Customized type: Wunderground "(1)"
    else
      echo Customized type: Ecowitt "(0)"
    fi
    if (( $CUSTOMIZED_ENABLED == 1 )) 
    then
      echo Customized enabled: 'ON (1)'
    else
      echo Customized enabled: 'OFF (0)'
    fi
}


#including checksum byte
function command
{
  local FD_TCP=4
  local HEADER='\xff\xff'
  local response_filename='response'
  local echo_cmd
  for (( n=0; n < ${#PACKET_OUT[@]}; n++ )); do
    echo_cmd+=${PACKET_OUT[$n]}
  done;
  echo_cmd=${echo_cmd//0x/'\x'}

#  echo COMMAND !!!!!!!!!!!!!!!!! $echo_cmd
#echo -ne "$echo_cmd" | hexdump -C
#echo -ne "$HEADER$1" | hexdump -C

  #echo -ne "$HEADER$1" >&$FD_TCP
  echo -ne "$echo_cmd" >&$FD_TCP
  dd bs=1024 count=1 status=none<&$FD_TCP >$response_filename

  #Copy response to byte array in hex ff ff .. .. .. 
  mapfile -d ' ' -t  PACKET <<< $(hexdump -v -e ''"$(stat -c%s response)"'/1 "%02x "' $response_filename) 

  if [[ $DEBUG -eq 1 ]] 
  then
     hexdump -C $response_filename
  fi
  
  case $COMMAND in
    mac)
       printf "MAC %02X:%02X:%02X:%02X:%02X:%02X\n" 0x${PACKET[5]} 0x${PACKET[6]} 0x${PACKET[7]} 0x${PACKET[8]} 0x${PACKET[9]} 0x${PACKET[10]}
       ;;
    version)
      hexToString 4
      VERSION=$HEXTOSTRING
      echo Version : $VERSION
        ;;
    ecowitt)
      ECOWITT_INTERVAL=$(( 16#${PACKET[4]} )) 
      echo Ecowitt upload interval: $ECOWITT_INTERVAL minutes
      ;;
    wunderground)
          hexToString 4
          WUNDERGROUND_STATION_ID=$HEXTOSTRING
          echo  Wunderground station ID: $WUNDERGROUND_STATION_ID

          hexToString $NEXT_LENGTH
          WUNDERGROUND_PASSWORD=$HEXTOSTRING
          echo  Wunderground password : $WUNDERGROUND_PASSWORD 
      ;;
    customized)
     
        hexToString 4
        CUSTOMIZED_ID=$HEXTOSTRING
       
        hexToString $NEXT_LENGTH
        CUSTOMIZED_PASSWORD=$HEXTOSTRING

        hexToString $NEXT_LENGTH
        CUSTOMIZED_SERVER=$HEXTOSTRING

        CUSTOMIZED_PORT=$(( 0x${PACKET[-7]} << 8 | 0x${PACKET[-6]} )) 
        CUSTOMIZED_INTERVAL=$(( 0x${PACKET[-5]} << 8 | 0x${PACKET[-4]} )) 
        CUSTOMIZED_TYPE=$(( 0x${PACKET[-3]} ))
        CUSTOMIZED_ENABLED=$(( 0x${PACKET[-2]} ))
     
        printCustomized

      ;;
    path)
     hexToString 4
     PATH_ECOWITT=$HEXTOSTRING
     hexToString $NEXT_LENGTH
     PATH_WUNDERGROUND=$HEXTOSTRING
     echo Path ecowitt: $PATH_ECOWITT
     echo Path wunderground: $PATH_WUNDERGROUND
     ;;

  esac

}

function scan
{
  local GW_BROADCAST_PORT=59387
  socat UDP-RECV:$GW_BROADCAST_PORT STDPACKET_OUT | hexdump -C &
  SOCATPID=$(pgrep socat)
  sleep $SCAN && kill $SOCATPID
}

function checksum
{
  CHECKSUM=0;
 for (( n=2; n< ${#PACKET_OUT[@]}; n++ )); do
   CHECKSUM=$(( $CHECKSUM + ${PACKET_OUT[$n]} ));
  done
  [ $DEBUG -eq 1 ] && echo CHECKSUM $CHECKSUM
  CHECKSUM=$(printf "0x%x" $(( $CHECKSUM & 0xff )))
}

function packet
{
  PACKET_OUT=(0xff 0xff)
  PACKET_OUT+=($1)
  PACKET_OUT+=(0x03)
  checksum
  PACKET_OUT+=($CHECKSUM)
}

function writeString
{
  PACKET_OUT+=(   $(printf "0x%02x"  ${#1}) )
  for (( n=0; n < ${#1}; n++ )); do
     PACKET_OUT+=( $(printf "0x%02x" "'${1:$n:1}") )
  done
}

function writeUInt16BE
{
    local MSB=$(printf "0x%02x" $(( ($1 & 0xff00 ) >> 8 )) )
    local LSB=$(printf "0x%02x" $(( $1 & 0x00ff )) )
    PACKET_OUT+=( $MSB $LSB )
}

function customizedPacket
{
  #cat response | hexdump -C
  PACKET_OUT=(0xff 0xff)
  PACKET_OUT+=($CMD_WRITE_CUSTOMIZED)
  PACKET_OUT+=( $(printf "0x%02x" $(( ${#CUSTOMIZED_ID} + ${#CUSTOMIZED_PASSWORD} + ${#CUSTOMIZED_SERVER} + 3 + 2 + 2 + 1 + 1 + 3 )) ) ) # includes checksum BYTE
  writeString $CUSTOMIZED_ID
  writeString $CUSTOMIZED_PASSWORD
  writeString $CUSTOMIZED_SERVER
  writeUInt16BE $CUSTOMIZED_PORT
  writeUInt16BE $CUSTOMIZED_INTERVAL 
  PACKET_OUT+=( $(printf "0x%02x" $CUSTOMIZED_TYPE) )
  PACKET_OUT+=( $(printf "0x%02x" $CUSTOMIZED_ENABLED ) )
  checksum
  PACKET_OUT+=( $CHECKSUM )
  [ $DEBUG -eq 1 ] && echo CUSTOMIZEDPACKET  PACKET_OUT ${PACKET_OUT[@]}
}

function updateCustomized
{
  local needUpdate

   packet $CMD_READ_CUSTOMIZED
    COMMAND=customized # Allow parsing in command function
    command
    case $1 in
        CUSTOMIZED_ID)
          [ $CUSTOMIZED_ID != $2 ] && CUSTOMIZED_ID=$2 && needUpdate=1
          ;;
        CUSTOMIZED_PASSWORD)
          [ $CUSTOMIZED_PASSWORD != $2 ] && CUSTOMIZED_PASSWORD=$2 && needUpdate=1
          ;;
        CUSTOMIZED_SERVER)
          [ $CUSTOMIZED_SERVER != $2 ] && CUSTOMIZED_SERVER=$2 && needUpdate=1
          ;;
        CUSTOMIZED_PORT)
          [ $CUSTOMIZED_PORT != $2 ] && CUSTOMIZED_PORT=$2 && needUpdate=1
          ;;
        CUSTOMIZED_TYPE)
          [ $CUSTOMIZED_TYPE != $2 ] && CUSTOMIZED_TYPE=$2 && needUpdate=1
          ;;
        CUSTOMIZED_ENABLED)
          [ $CUSTOMIZED_ENABLED != $2 ] && CUSTOMIZED_ENABLED=$2 && needUpdate=1
          ;;
        CUSTOMIZED_INTERVAL)
          [ $CUSTOMIZED_INTERVAL != $2 ] && CUSTOMIZED_INTERVAL=$2 && needUpdate=1
          ;;
    esac

#https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash
    if (( needUpdate == 1 )); then  
    customizedPacket
    COMMAND=CMD_WRITE_CUSTOMIZED
    command
    result
    printCustomized
  else
    echo No update needed for $1
  fi
}

function pathPacket
{
  PACKET_OUT=(0xff 0xff)
  PACKET_OUT+=($CMD_WRITE_PATH)
  PACKET_OUT+=( $(printf "0x%02x" $(( ${#1} + ${#2} + 2 + 3 )) ) )
  writeString $1
  writeString $2
  checksum
  PACKET_OUT+=($CHECKSUM)
  
  [ $DEBUG -eq 1 ] && echo PATHPACKET  PACKET_OUT ${PACKET_OUT[@]}
  
}

#https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  OPTION=""

  case $key in
    -h|--host)
       HOST="$2"
       #open file descriptors to UDP/TCP port on HOST
       connect $2
       shift # past argument
      shift # past value
      ;;
    -c|--command)
      COMMAND="$2"
      shift # past argument
      shift # past value
      ;;
    -s|--scan)
       SCAN="$2"
       scan
       shift # past argumentS
      shift # past value
      ;;
    -w|--write)
     COMMAND=$key
      OPTION="$2"
      shift
      shift
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac

  case $COMMAND in
    reboot)
      packet $CMD_REBOOT
      command
      result
      #command "\x$CMD_REBOOT\x03\x43" 
      ;;
    mac)
      packet $CMD_READ_MAC
      command
      #command "\x$CMD_MAC\x03\x29" 
      ;;
    version)
      packet $CMD_READ_VERSION
      command
      #command "\x$CMD_VERSION\x03\x53"
      ;;
    ecowitt)
       packet $CMD_READ_ECOWITT
       command 
      #command '\x1e\x03\x21'
      ;;
    wunderground)
      packet $CMD_READ_WUNDERGROUND
      command 
      #command '\x20\x03\x23'
      ;;
    customized)
      packet $CMD_READ_CUSTOMIZED
      command
      #command '\x2a\x03\x2d'
      ;;
    path)
       packet $CMD_READ_PATH
       command
       #echo PACKET_OUT IS ${PACKET_OUT[@]}
       #command  "\x$CMD_READ_PATH\x03\x54"
      ;;
      
  esac

  case $OPTION in
    path)
      pathPacket $1 $2
      COMMAND=CMD_WRITE_PATH
      command
      result
      shift # remove ecowitt path
      shift # remove wu path
      ;;
    cport)
       
        updateCustomized CUSTOMIZED_PORT $1
        shift # remove port
        ;; 
    cserver)
       updateCustomized CUSTOMIZED_SERVER $1
       shift
       ;;
    cid)
       updateCustomized CUSTOMIZED_ID $1
       shift
      ;;
    cpassword)
      updateCustomized CUSTOMIZED_PASSWORD $1
      shift
      ;;
    cinterval)
      updateCustomized CUSTOMIZED_INTERVAL $1
      shift
      ;;
    ctype)
      updateCustomized CUSTOMIZED_TYPE $1
      shift
      ;;
    cenabled)
      updateCustomized CUSTOMIZED_ENABLED $1
      shift
      ;;
  esac


  done

  set -- "${POSITIONAL[@]}" # restore positional parameters

  disconnect


##echo CMD_BROADCAST
#command '\x12\x00\x04\x15' $FD_UDP
