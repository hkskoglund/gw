#!/bin/bash
# Utility for administration of GW-1000 configuration
# example ./gw -s
# scan for devices
# example ./gw -h 10.42.0.180 -c mac
# read mac

#Protocol documentation : https://osswww.ecowitt.net/uploads/20210716/WN1900%20GW1000,1100%20WH2680,2650%20telenet%20v1.6.0%20.pdf (https://www.ecowitt.com/shop/forum/forumDetails/255)
#https://devhints.io/bash

#for debugging
#echo PID "$$"
#read -r -p "DEBUG - press key to continue"

SHELLIFS=$IFS

#https://stackoverflow.com/questions/29968096/get-android-os-version-of-device-connected-via-adb
#testing purpose
if which getprop 2>/dev/null ; then
   ANDROID_BUILD_VERSION=$(getprop ro.build.version.release)
   printenv
fi

typeset -i DEBUG
DEBUG=0

typeset -A DEBUG_OPTIONS
DEBUG_OPTIONS[dd]='status=none'

PORT_tcp_command_server=45000
PORT_udp_discovery_server=59387
PORT_udp_discovery_client=46000

typeset -a CMD_NAME

typeset -i CMD_read_version=0x50; 
typeset -i CMD_reboot=0x40; 
typeset -i CMD_read_mac=0x26; 
typeset -i CMD_write_ssid=0x11; 
typeset -i CMD_broadcast=0x12; 
typeset -i CMD_write_reset=0x41; 

#weather services
typeset -i CMD_read_ecowitt_interval=0x1e; 
typeset -i CMD_write_ecowitt_interval=0x1f; 

typeset -i CMD_read_wunderground=0x20; 
typeset -i CMD_write_wunderground=0x21; 

typeset -i CMD_read_wow=0x22; 
typeset -i CMD_write_wow=0x23; 

typeset -i CMD_read_weathercloud=0x24; 
typeset -i CMD_write_weathercloud=0x25; 

#customized server for ecowitt/wunderground http requests
typeset -i CMD_read_customized=0x2a; 
typeset -i CMD_write_customized=0x2b; 
typeset -i CMD_read_path=0x51; 
typeset -i CMD_write_path=0x52; 

typeset -i CMD_read_raindata=0x34; 
typeset -i CMD_write_raindata=0x35; 

typeset -i CMD_livedata=0x27; 

#sensors
typeset -i CMD_read_sensor_id=0x3a; 
typeset -i CMD_write_sensor_id=0x3b; 
typeset -i CMD_read_sensor_id_new=0x3c;  # for new sensors

typeset -i CMD_read_system=0x30; 
typeset -i CMD_write_system=0x31; 

#mapping to name
CMD_NAME[$CMD_read_version]="read version"
CMD_NAME[$CMD_reboot]="reboot"
CMD_NAME[$CMD_read_mac]="read mac"
CMD_NAME[$CMD_write_ssid]="write ssid"
CMD_NAME[$CMD_broadcast]="broadcast"
CMD_NAME[$CMD_write_reset]="reset"

CMD_NAME[$CMD_read_ecowitt_interval]="read ecowitt intervall"
CMD_NAME[$CMD_write_ecowitt_interval]="write ecowitt intreval"
CMD_NAME[$CMD_read_wunderground]="read wunderground"
CMD_NAME[$CMD_write_wunderground]="write wunderground"
CMD_NAME[$CMD_read_wow]="read wow"
CMD_NAME[$CMD_write_wow]="write wow"
CMD_NAME[$CMD_read_weathercloud]="read weathercloud"
CMD_NAME[$CMD_write_weathercloud]="write weathercloud"

CMD_NAME[$CMD_read_customized]="read customized"
CMD_NAME[$CMD_write_customized]="write customized"
CMD_NAME[$CMD_read_path]="read path"
CMD_NAME[$CMD_write_path]="write path"

CMD_NAME[$CMD_read_raindata]="read raindata"
CMD_NAME[$CMD_write_raindata]="write raindata"

CMD_NAME[$CMD_livedata]="livedata"

CMD_NAME[$CMD_read_sensor_id]="read sensor id"
CMD_NAME[$CMD_write_sensor_id]="write sensor id"
CMD_NAME[$CMD_read_sensor_id_new]="read sensor id new"

CMD_NAME[$CMD_read_system]="read system"
CMD_NAME[$CMD_write_system]="write system"

typeset -i SYSTEM_FREQUENCY_RFM433M=0 # 433MHz
typeset -i SYSTEM_FREQUENCY_RFM868M=1 # 868Mhz
typeset -i SYSTEM_FREQUENCY_RFM915M=2 # 915MHz
typeset -i SYSTEM_FREQUENCY_RFM920M=4 # 920Mhz

typeset -i SYSTEM_SENSOR_TYPE_WH24=0
typeset -i SYSTEM_SENSOR_TYPE_WH65=1

typeset -a SYSTEM_TIMEZONE #initTimezones

typeset -a LIVEDATA

typeset -a LDFIELD
LDFIELD[0x01]="INTEMP:indoor temperature:℃:2:1"
LDFIELD[0x02]="OUTTEMP:outdoor temperature:℃:2:1"
LDFIELD[0x06]="INHUMI:indoor humidity:%:1:0"
LDFIELD[0x07]="OUTHUMI:outdoor humidity:%:1:0"
LDFIELD[0x08]="ABSBARO:absolute pressure:hpa:2:1"
LDFIELD[0x09]="RELBARO:relative pressure:hpa:2:1"
LDFIELD[0x0A]="WINDDIRECTION:wind direction:°:2:0"
LDFIELD[0x0B]="WINDSPEED:wind speed:m/s:2:1"
LDFIELD[0x19]="WINDGUSTDAILYMAX:wind gust daily max:m/s:2:1"
LDFIELD[0x0C]="WINDGUST:wind gust:m/s:2:1"
LDFIELD[0x0D]="RAINEVENT:rain event:mm:2:1"
LDFIELD[0x0E]="RAINRATE:rain rate:mm/h:2:1"
LDFIELD[0x0F]="RAINHOUR:rain hour:mm:2:1"
LDFIELD[0x10]="RAINDAILY:rain daily:mm:2:1"
LDFIELD[0x11]="RAINWEEK:rain week:mm:2:1"
LDFIELD[0x12]="RAINMONTH:rain month:mm:4:1"
LDFIELD[0x13]="RAINYEAR:rain year:mm:4:1"
LDFIELD[0x15]="LIGHT:light:lx:4:1" # lux=lumen/m2]
LDFIELD[0x16]="UV:UV radiation:µW/m2:2:1"
LDFIELD[0x17]="UVI:UV index (0-15)::1:0"
for ((LDFT=0x2A, LDFT2=0x4D, CH=1;CH<=4; CH++, LDFT++,LDFT2++ )); do
  if (( CH == 2 )); then LDFT=$((0x51)); fi
   LDFIELD[$LDFT]="PM25_CH$CH:PM2.5 air quality CH$CH:μg/m3:2:1"
   LDFIELD[$LDFT2]="PM25_24HAVG_CH$CH:PM2.5 24h average CH$CH:μg/m3:2:1"
done
for ((LDFT=0x2B, CH=1;CH<=16; CH++, LDFT=LDFT+2 )); do
   LDFIELD[$LDFT]="SOILTEMP_CH$CH:soil temperature CH$CH:℃:2:1"
   LDFIELD[(( LDFT + 1 ))]="SOILHUMI_CH$CH:soil humidity CH$CH:%:1:0"
done
for ((LDFT=0x1A, LDFT2=0x22, CH=1;CH<=8; CH++, LDFT++,LDFT2++ )); do
   LDFIELD[$LDFT]="TEMP_CH$CH:temperature CH$CH:℃:2:1"
   LDFIELD[$LDFT2]="HUMI_CH$CH:humidity CH$CH:%:1:0"
done
for ((LDFT=0x58, CH=1;CH<=4; CH++, LDFT++ )); do
   LDFIELD[$LDFT]="LEAK_CH$CH:leak CH$CH::1:0"
done

CONFIGURATION_SENSORFIELD="sensortype_"

#sensors
#typedef enum
#{
# //eWH24_SENSOR = 0x00,
# eWH65_SENSOR = 0x00,
# //eWH69_SENSOR,
# eWH68_SENSOR,
# eWH80_SENSOR, //80H（
# eWH40_SENSOR,
# eWH25_SENSOR,
# eWH26_SENSOR,
# eWH31_SENSORCH1, // 6
# eWH31_SENSORCH2,
# eWH31_SENSORCH3,
# eWH31_SENSORCH4,
# eWH31_SENSORCH5,
# eWH31_SENSORCH6,
# eWH31_SENSORCH7,
# eWH31_SENSORCH8,
# eWH51_SENSORCH1, // 14 - 0x0e
# eWH51_SENSORCH2,
# eWH51_SENSORCH3,
# eWH51_SENSORCH4,
# eWH51_SENSORCH5,
# eWH51_SENSORCH6,
# eWH51_SENSORCH7, 
# eWH51_SENSORCH8, // 22
# eWH41_SENSORCH1, // 23 - 0x17
#eWH41_SENSORCH2,
# eWH41_SENSORCH3,
# eWH41_SENSORCH4,
# //-------------
# eWH57_SENSOR,    // 26? - 0x1a - lightning detector
# eWH55_SENSORCH1, // 27  - 0x1b - water leak ch1
# eWH55_SENSORCH2,
# eWH55_SENSORCH3,
#eWH55_SENSORCH4,
# eWH34_SENSORCH1 = 31,
# eWH34_SENSORCH2 = 32,
# eWH34_SENSORCH3 = 33,
# eWH34_SENSORCH4 = 34,
# eWH34_SENSORCH5 = 35,
# eWH34_SENSORCH6 = 36,
# eWH34_SENSORCH7 = 37,
#eWH34_SENSORCH8 = 38,
#eWH45_SENSOR = 39,
#// GW1000 Firmware V1.5.6 之后加入的
#eWH35_SENSORCH1 = 40,
#eWH35_SENSORCH2 = 41,
#eWH35_SENSORCH3 = 42,
#eWH35_SENSORCH4 = 43,
#eWH35_SENSORCH5 = 44,
#eWH35_SENSORCH6 = 45,
#eWH35_SENSORCH7 = 46,
#eWH35_SENSORCH8 = 47,
# // the SENSOR_TYPE sequence can not be altered!!
#//-------------
# eMAX_SENSOR
#}SENSOR_IDT
#https://www.wxforum.net/index.php?topic=40730.0
SENSOR_SEARCH=0xffffffff
SENSOR_DISABLE=0xfffffffe

typeset -i WH24_type=0x00
typeset -i WH65_type=0x00
typeset -i WH68_type=0x01
typeset -i WH80_type=0x02
typeset -i WH40_type=0x03

typeset -i WH31_type=0x06
typeset -i WH31_max_ch=8

typeset -i WH51_type=0x0e
typeset -i WH51_max_ch=8

#Probably: cmd sensor_id up to 0x1e sensors type, and sensor_id_new from 0x1f (31)
typeset -i WH55_type=0x1b
typeset -i WH55_max_ch=4

typeset -i WH43_type=0x16
typeset -i WH43_max_ch=4

typeset -a SENSOR_TYPE
#type:description:reportinginterval(s):max reportinterval:detection interval
SENSOR_TYPE[WH65_type]="WH65:Outdoor Solar Powered 7-in-1 Weather Sensor:16.0:"
SENSOR_TYPE[WH68_type]="WH68:Solar Powered Anemometer with Light and UV Sensor:16.5:"
SENSOR_TYPE[WH80_type]="WH80:Wind Speed/Direction, Solar Radiation/Light, Temp/Humidity:4.75:"
SENSOR_TYPE[WH40_type]="WH40:Self-Emptying Rain Collector Rainfall Sensor:49"
#sensors with max 8 channels
for (( CH=1; CH <= WH31_max_ch ; CH++)); do 
   SENSOR_TYPE[WH31_type + $CH - 1]="WH31:Temperature and humidity CH$CH:61.0:"
   SENSOR_TYPE[WH51_type + $CH - 1]="WH51:Soil Moisture CH$CH:70.0:"
   if ((CH <= WH55_max_ch )); then
      SENSOR_TYPE[WH43_type + $CH - 1]="WH43:PM2.5 Air Quality Indoor CH$CH:60.0:600.0"
      SENSOR_TYPE[WH55_type + $CH - 1]="WH55:Water Leak CH$CH:60.0::3"
   fi
done

#SENSOR_TYPE[0x??]="WH41:PM2.5 Air Quality Sensor Monitor Outdoor:60:600"
#SENSOR_TYPE[0x??]="WH57:Lightning Detection Sensor:79:"
#SENSOR_TYPE[0x??]="WH34S:Soil Temperature Sensor:77"
#SENSOR_TYPE[0x??]="WH35:Leaf Wetness Sensor for Garden and Farm:79.5"

#mapping from livedata field type/decimal to name
typeset -A LIVEDATA_NAME

#CONNECT ERRORS
ERROR_CONNECTION=1
ERROR_RAINDATA_NOTSPECIFIED=2
ERROR_NO_NMCLI=3
ERROR_NO_SOCAT=4
#ERROR_READ_RESPONSE=3

typeset -a CONFIGURATION

#CONF_$CONFIGURATION_SENSORFIELD$STYPE]
typeset -i CONF_broadcast_ip=0
typeset -i CONF_broadcast_mac=1
typeset -i CONF_broadcast_port=3
typeset -i CONF_broadcast_ssid=4
typeset -i CONF_broadcast_version=5
typeset -i CONF_customized_ecowitt_path=6
typeset -i CONF_customized_enabled=7
typeset -i CONF_customized_id=8
typeset -i CONF_customized_interval=9
typeset -i CONF_customized_password=10
typeset -i CONF_customized_port=11
typeset -i CONF_customized_server=12
typeset -i CONF_customized_type=13
typeset -i CONF_customized_wunderground_path=14
typeset -i CONF_ecowitt_interval=15
typeset -i CONF_host=16
typeset -i CONF_mac=17
typeset -i CONF_rainday=18
typeset -i CONF_rainmonth=19
typeset -i CONF_rainrate=20
typeset -i CONF_rainrate=21
typeset -i CONF_rainweek=22
typeset -i CONF_rainyear=23
typeset -i CONF_system_dst_status=24
typeset -i CONF_system_dst_status_bit=25
typeset -i CONF_system_dst_status_state=26
typeset -i CONF_system_frequency=27
typeset -i CONF_system_frequency_state=28
typeset -i CONF_system_sensor_type=29
typeset -i CONF_system_sensor_type_state=30
typeset -i CONF_system_timezone_auto_bit=31
typeset -i CONF_system_timezone_auto_state=32
typeset -i CONF_system_timezone_index=33
typeset -i CONF_system_timezone_index_state=34
typeset -i CONF_system_utc=35
typeset -i CONF_system_utc_state=36
typeset -i CONF_version=37
typeset -i CONF_weathercloud_id=38
typeset -i CONF_weathercloud_password=39
typeset -i CONF_wow_id=40
typeset -i CONF_wow_password=41
typeset -i CONF_wunderground_id=42
typeset -i CONF_wunderground_password=43

typeset -i CONF_sensortype_startindex=256 # start index of sensortype configuration (search/disable/id)
typeset -i CONF_sensortype_endindex=$(( CONF_sensortype_startindex + 256 ))


typeset -a CONF_DESCRIPTION 
CONF_DESCRIPTION[$CONF_broadcast_ip]="broadcast_ip"


typeset -a LDFNAMEDESC
typeset -a LDFACTIVE # found fields in livedata from host

typeset -A FILENAME # typeset -A (if decl. inside function -> local only)

function newLivedataFieldNameDesc
{
  IFS=':'
  #echo Keys "${!LDFIELD[@]}"
  for k in "${!LDFIELD[@]}"; do
    read -r FNAME FDESC FREST <<< "${LDFIELD[$k]}"
     LDFNAMEDESC[$k]="$FNAME $FDESC"
  done
}

function listLivedataFieldsAndDescription
# $1 - if non-zero list only active fields found during parsing of livedata, else list all known fields
{
  local fn
  local fd
  local fk
  
  IFS=' '

  fk="${!LDFIELD[*]}" # !  all keys
  [ -n "$1" ] && fk="${LDFACTIVE[*]}"
  
  for k in $fk; do
    read -r fn fd <<< "${LDFNAMEDESC[$k]}"  
    printf "%3d %-16s %s\n" "$k" "$fn" "$fd"
  done
}

function connect {
  # Info  from https://www.xmodulo.com/tcp-udp-socket-bash-shell.html
  local host="$1"

  if [ -v FD_TCP ] || [ -v FD_UDP ]; then # True if the shell variable varname is set (has been assigned a value). - man bash
    ((DEBUG)) && echo >&2 "$HOST_PREV closing connection"
    disconnect
  fi

  #https://www.gnu.org/software/bash/manual/bash.html - 3.6 Redirections
  if exec {FD_UDP}<>/dev/udp/"$host"/"$PORT_udp_discovery_client"; then
    ((DEBUG)) && echo >&2 "$host:$PORT_udp_discovery_client Connected (UDP FD $FD_UDP)"
  else
    return $ERROR_CONNECTION
  fi

  if exec {FD_TCP}<>/dev/tcp/"$host"/"$PORT_tcp_command_server"; then
    ((DEBUG)) && echo >&2 "$host:$PORT_tcp_command_server Connected (TCP FD $FD_TCP)"
  else
    return $ERROR_CONNECTION
  fi

  #Current shell PID $$

  if ((DEBUG)); then
    netstat -tunp | grep "$$"
  fi

  [ -v FD_TCP ] && [ -v FD_UDP ]

}

function disconnect {
  #https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
  #close sockets
  if [ -v FD_UDP ]; then

    if ! exec {FD_UDP}>&-; then echo >&2 Failed to close $FD_UDP; fi
    ((DEBUG)) && echo >&2 "Closing FD $FD_UDP (UDP)"

    unset FD_UDP
  fi

  if [ -v FD_TCP ]; then

    if ! exec {FD_TCP}>&-; then echo >&2 Failed to close $FD_TCP; fi
    ((DEBUG)) && echo >&2 "Closing FD $FD_TCP (TCP)"

    unset FD_TCP
  fi
}

function parseResultPacket {
  local cmd="0x${PACKET_RX[2]}"

  STATUS=0x${PACKET_RX[4]}
  echo -n "${CMD_NAME["$cmd"]}" "$STATUS" >&2
  if ((STATUS == 0)); then
    echo >&2 " OK"
  elif ((STATUS == 1)); then
    echo >&2 " FAIL"
  else
    echo >&2 -e '\n'
  fi
}

function printStack {
  echo "${FUNCNAME[@]}"
}

function printCustomized {

  echo "customized_id ${CONFIGURATION[$CONF_customized_id]}"
  echo "customized_password ${CONFIGURATION[$CONF_customized_password]}"
  echo "customized_server ${CONFIGURATION[$CONF_customized_server]}"
  echo "customized_port ${CONFIGURATION[$CONF_customized_port]}"
  echo "customized_interval ${CONFIGURATION[$CONF_customized_interval]}"

  if ((CONFIGURATION[CONF_customized_type] == 1)); then
    echo "customized_type 1 wunderground"
  elif ((CONFIGURATION[CONF_customized_type] == 0)); then
    echo "customized_type 0 ecowitt "
  else
    echo "customized_type ${CONFIGURATION[$CONF_customized_type]}" "UNKNOWN"
  fi

  if ((CONFIGURATION[CONF_customized_enabled] == 1)); then
    echo "customized_enabled 1 ON"
  elif ((CONFIGURATION[CONF_customized_enabled] == 0)); then
    echo "customized_enabled 0 OFF"
  else
    echo "customized_enabled ${CONFIGURATION[$CONF_customized_enabled]} UNKNOWN"
  fi

  echo "customized_ecowitt_path ${CONFIGURATION[$CONF_customized_ecowitt_path]}"
  echo "customized_wunderground path ${CONFIGURATION[$CONF_customized_wunderground_path]}"
}

function printConfiguration {
  #echo "${!CONFIGURATION[$CONF_@]}"
  #https://www.artificialworlds.net/blog/2012/10/17/bash-associative-array-examples/
  for K in "${!CONFIGURATION[@]}"; do printf "%-30s %s\n" "$K" "${CONFIGURATION[$K]}"; done
}

function readUInt8 {
  VALUE_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):2}"
  printf -v VALUE_UINT8 "%u" "$VALUE_HEX"
  ((RX_POS = RX_POS + 1))
}

function readUInt16BE {
  VALUE_UINT16BE_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):4}"
  printf -v VALUE_UINT16BE "%u" "$VALUE_UINT16BE_HEX"
  ((RX_POS = RX_POS + 2))
}

function readUInt32BE {
  VALUE_UINT32BE_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):8}"
  printf -v VALUE_UINT32BE "%u" "$VALUE_UINT32BE_HEX"
  ((RX_POS = RX_POS + 4))
}

function readString {
  local len=0x${PACKET_RX[$RX_POS]}
  VALUE_STRING="${PACKET_RX_OD[1]:(($RX_POS + 1)):len}"
  ((RX_POS = RX_POS + "$len" + 1))
}

function printRain {
  local rr
  local rd
  local rw
  local rm
  local ry
  convertScale10ToFloat "${CONFIGURATION[$CONF_rainrate]}"
  rr=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[$CONF_rainday]}"
  rd=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[$CONF_rainweek]}"
  rw=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[$CONF_rainmonth]}"
  rm=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[$CONF_rainyear]}"
  ry=$VALUE_SCALE10_FLOAT
  #echo rainrate "${CONFIGURATION[$CONF_rainrate]} "
  #echo rainday "${CONFIGURATION[$CONF_rainday]} "
  #echo rainweek "${CONFIGURATION[$CONF_rainweek]} "
  #echo rainmonth "${CONFIGURATION[$CONF_rainmonth]} "
  #echo  rainyear "${CONFIGURATION[$CONF_rainyear]}"
  #echo "rainrate $rr rainday $rd rainweek $rw rainmonth $rm rainyear $ry"
  printf "%9s %9s %9s %9s %9s\n" rainrate rainday rainweek rainmonth rainyear
  printf "%9s %9s %9s %9s %9s\n" "$rr" "$rd" "$rw" "$rm" "$ry"
}

function convertWindDirectionToCompassDirection
#$1 - direction in degrees
#http://snowfence.umn.edu/Components/winddirectionanddegrees.htm
{
  VALUE_COMPASS_DIRECTION_NAME=""
  if   (( $1 <= 11 ||  $1 > 349)); then
    VALUE_COMPASS_DIRECTION_NAME="N"
  elif (( $1 > 11 && $1 < 34)); then
    VALUE_COMPASS_DIRECTION_NAME="NNE"
  elif (( $1 >=34 && $1 <= 56 )); then
    VALUE_COMPASS_DIRECTION_NAME="NE";
  elif (( $1 > 56 && $1 <= 79 )); then
    VALUE_COMPASS_DIRECTION_NAME="ENE";
  elif (( $1 > 79 && $1 <= 101 )); then
    VALUE_COMPASS_DIRECTION_NAME="E"
  elif (( $1 > 101 && $1 <= 124 )); then
    VALUE_COMPASS_DIRECTION_NAME="ESE"
  elif (( $1 > 124 && $1 <= 146 )); then
    VALUE_COMPASS_DIRECTION_NAME="SE"
  elif (( $1 > 146 && $1 <= 169 )); then
    VALUE_COMPASS_DIRECTION_NAME="SSE"
  elif (( $1 > 169 && $1 <= 191 )); then
    VALUE_COMPASS_DIRECTION_NAME="S"
  elif (( $1 > 191 && $1 <= 214 )); then
    VALUE_COMPASS_DIRECTION_NAME="SSW"
  elif (( $1 > 214 && $1 <= 236 )); then
    VALUE_COMPASS_DIRECTION_NAME="SW"
  elif (( $1 > 236 && $1 <= 259 )); then
     VALUE_COMPASS_DIRECTION_NAME="WSW"
  elif (( $1 > 259 && $1 <= 281 )); then
     VALUE_COMPASS_DIRECTION_NAME="W"
  elif (( $1 > 281 && $1 <= 304 )); then
     VALUE_COMPASS_DIRECTION_NAME="WNW"
  elif (( $1 > 304 && $1 <= 326 )); then
     VALUE_COMPASS_DIRECTION_NAME="NW"
  elif (( $1 > 326 && $1 <= 349 )); then
     VALUE_COMPASS_DIRECTION_NAME="NNW"
  fi
}

function getBatteryLevelState
# $1 - battery level 0-6, 6 = dc, <=1 low
{
  unset SBATTERY_STATE
    #set -- 0     #debug  set $1 to 0 
    if (( $1 == 6 )); then
      SBATTERY_STATE="dc"; # for example PM 2.5 indoor
    else
      SBATTERY_STATE=""
      local l
      for (( l=1; l <= $1; l++)); do
          SBATTERY_STATE+="+";
      done
      if (( $1 <= 1)); then
        SBATTERY_STATE+=" low"
      fi
    fi
}

function getBatteryState
{
  unset SBATTERY_STATE
  if (( $1 == 0 )); then
      SBATTERY_STATE="normal" #ok
  elif ((  $1 == 1 )); then
    SBATTERY_STATE="low"
  fi
}
function parseLivedata
# $1 -pattern to match
{
  local fieldTypeHex
  local fieldTypeHexSub
  local match

  #if [ "$1" == "*" ]; then
  #  SPATTERN='.*'
  #fi
  #SPATTERN=${SPATTERN,,} # to lowercase

 ((DEBUG )) && >&2 echo parseLivedata "SPATTERN" "$SPATTERN"

  IFS=':'
  LDFACTIVE=()

  while (( "$RX_POS" < (${#PACKET_RX[@]} - 1) )); do

    (( DEBUG ))&& >&2 echo PACKET_RX_HEX "${PACKET_RX_HEX:(( $RX_POS * 2 ))}" RX_POS "$RX_POS" PACKET_RX_LENGTH "${#PACKET_RX[@]}"

    readUInt8
    fieldTypeHex=$VALUE_HEX

    fieldTypeHexSub=${fieldTypeHex:2}
    fieldTypeHexSub=0x${fieldTypeHexSub^^} #^^ all characters to uppercase ( 0x0a -> 0x0A )
    fieldTypeHexSubDec=$(( fieldTypeHexSub ))

    LDFACTIVE+=( "$fieldTypeHexSub" ) # keep track of discovered fields

    read -r LDFNAME LDFDESC LDFUNIT LDFBYTES LDFSCALE <<< "${LDFIELD[$fieldTypeHexSub]}"
    
    unset LDFDESC_RENAME
    if [ -n "${LIVEDATA_NAME[$fieldTypeHexSubDec]}" ]; then #rename sensor description
       LDFDESC_RENAME=${LIVEDATA_NAME[$fieldTypeHexSubDec]}
    fi
   
    case "$LDFBYTES" in 

       1) readUInt8
          LIVEDATA[$fieldTypeHexSub]=$VALUE_UINT8
          ;;

       2) readUInt16BE
          LIVEDATA[$fieldTypeHexSub]=$VALUE_UINT16BE
          ;;
           
       4) readUInt32BE
          LIVEDATA[$fieldTypeHexSub]=$VALUE_UINT32BE
          ;;
     
     esac

     if (( LDFSCALE )); then
        convertScale10ToFloat "${LIVEDATA[$fieldTypeHexSub]}"
        LIVEDATA[$fieldTypeHexSub]=$VALUE_SCALE10_FLOAT
     fi

     if [[ ${LDFNAME,,} =~ ^${SPATTERN} || ${LDFDESC,,} =~ ${SPATTERN} || ${LDFDESC_RENAME,,} =~ ${SPATTERN} ]] ; then  # ^ line starts with, ,,=to lowercase
      match=1

        if [ -n "${LDFDESC_RENAME}" ]; then
           LDFDESC=$LDFDESC_RENAME
        fi

        if [[ "$LDFUNIT" == *"℃"*  ]]; then #multibyte character/unicode requires 1 larger width and a space padding for description
            printf "%8s %6s %s\n" "${LIVEDATA[$fieldTypeHexSub]}" "$LDFUNIT" " $LDFDESC"
        elif [[ "$LDFUNIT" == *"°"* ]]; then
               printf "%8s %6s %s\n" "${LIVEDATA[$fieldTypeHexSub]}" "$LDFUNIT" "$LDFDESC"
        else
            printf "%8s %5s %s\n" "${LIVEDATA[$fieldTypeHexSub]}" "$LDFUNIT" "$LDFDESC"
        fi
           
        case $LDFNAME in
           WINDDIRECTION)
                convertWindDirectionToCompassDirection "${LIVEDATA[$fieldTypeHexSub]}"
                #LIVEDATA_EXTRA[$fieldTypeHexSub]=$VALUE_COMPASS_DIRECTION_NAME
                if [ -n "${LIVEDATA_NAME[compass_direction]}" ]; then
                    LDFDESC=${LIVEDATA_NAME[compass_direction]}
                else
                  LDFDESC="wind compass direction"
                fi
                 printf "%8s %5s %s\n" "$VALUE_COMPASS_DIRECTION_NAME" "" "$LDFDESC"
                ;;
        esac

      fi

  done

  (( DEBUG )) && >&2 echo active fields "${LDFACTIVE[@]}"

  if (( match == 0)); then
  >&2 echo "Error Failed to match '$SPATTERN' in current livedata fields"
     listLivedataFieldsAndDescription 1
    
  fi
}

function parseSensor
 # echo "$PACKET_RX_HEX"
   # for s in "${!SENSOR_TYPE[@]}"; do # ! - keys in SENSOR_TYPE
   #   echo "$s" "${SENSOR_TYPE[$s]}"
   # done

#   29) Read Sensors ID parameter:
#typedef enum
# {
# //eWH24_SENSOR = 0x00,
# eWH65_SENSOR = 0x00,// 1: BATT low, 0: normal
# //eWH69_SENSOR,
# eWH68_SENSOR,// voltage=val*0.02V if <=1.2V BAT is low
# eWH80_SENSOR,// 0.02V * val(received val) = wh80;
# eWH40_SENSOR,// 1: BATT low, 0: normal
# eWH25_SENSOR,// 1: BATT low, 0: normal
# eWH26_SENSOR,// 1: BATT low, 0: normal
# eWH31_SENSORCH1,// 1: BATT low, 0: normal
# eWH31_SENSORCH2,// 1: BATT low, 0: normal
# eWH31_SENSORCH3,// 1: BATT low, 0: normal
# eWH31_SENSORCH4,// 1: BATT low, 0: normal
# eWH31_SENSORCH5,// 1: BATT low, 0: normal
# eWH31_SENSORCH6,// 1: BATT low, 0: normal
# eWH31_SENSORCH7,// 1: BATT low, 0: normal
# eWH31_SENSORCH8,// 1: BATT low, 0: normal
# eWH51_SENSORCH1,// 1: BATT low, 0: normal
# eWH51_SENSORCH2,// 1: BATT low, 0: normal
# eWH51_SENSORCH3,// 1: BATT low, 0: normal
# eWH51_SENSORCH4,// 1: BATT low, 0: normal
# eWH51_SENSORCH5,// 1: BATT low, 0: normal
## eWH51_SENSORCH6,// 1: BATT low, 0: normal
#eWH51_SENSORCH7,// 1: BATT low, 0: normal
#eWH51_SENSORCH8,// 1: BATT low, 0: normal
#eWH41_SENSORCH1,// level0~5，<=1 for BATT low
#eWH41_SENSORCH2,// level0~5，<=1 for BATT low
#eWH41_SENSORCH3,// level0~5，<=1 for BATT low
#eWH41_SENSORCH4,// level0~5，<=1 for BATT low
# //-------------
# eWH57_SENSOR, // level0~5，<=1 for BATT low
# eWH55_SENSORCH1,// level0~5，<=1 for BATT low
# eWH55_SENSORCH2,// level0~5，<=1 for BATT low
# eWH55_SENSORCH3,// level0~5，<=1 for BATT low
# eWH55_SENSORCH4,// level0~5，<=1 for BATT low
# eWH34_SENSORCH1 = 31,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH2 = 32,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH3 = 33,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH4 = 34,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH5 = 35,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH6 = 36,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH7 = 37,// v=val*0.02V if v<=1.2V BATT low
# eWH34_SENSORCH8 = 38,// v=val*0.02V if v<=1.2V BATT low
# eWH45_SENSOR = 39,// 0~5
# eWH35_SENSORCH1 = 40,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH2 = 41,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH3 = 42,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH4 = 43,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH5 = 44,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH6 = 45,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH7 = 46,//电压=val*0.02V 当<=1.2V 时显示低电压
# eWH35_SENSORCH8 = 47,//电压=val*0.02V 当<=1.2V 时显示低电压
  
{
  (( DEBUG )) && >&2 echo parse SENSOR_TYPE new "SPATTERN" "$SPATTERN"

     IFS=':'
     unset SENSOR
     SENSOR=()

       while (( "$RX_POS" < (${#PACKET_RX[@]} - 1) )); do
            
            local RX_START_POS=$RX_POS # for listing entire record as hex
          (( "$RX_START_POS" == 5 )) && printf "%5s %5s %8s %10s %7s %13s %6s %12s %s\n" type name id id_state battery battery_state signal interval_min description

              readUInt8
                STYPE="$VALUE_UINT8"

              read -r SNAME SDESC SINTERVAL_MIN SREST <<< "${SENSOR_TYPE["$STYPE"]}"
              [ -z "$SNAME" ] && (( DEBUG )) && echo >&2 "Unknown SENSOR_TYPE $STYPE"

              readUInt32BE
                SID="$VALUE_UINT32BE"
                SID_HEX="$VALUE_UINT32BE_HEX"

                SENSOR[$STYPE]=$SID
                CONFIGURATION[$CONF_sensortype_startindex + $STYPE]=$SID_HEX #update configuration

                case $SID_HEX in
                  
                  "$SENSOR_SEARCH")
                    SID_STATE="searching"
                    ;;

                    "$SENSOR_DISABLE")
                      SID_STATE="disabled"
                      ;;
                    
                    *)
                      SID_STATE='enabled'
                      ;;
                esac

              readUInt8
              
                SBATTERY="$VALUE_UINT8"
                
                unset SBATTERY_STATE
                
                SENABLED=$(( SID != SENSOR_SEARCH && SID != SENSOR_DISABLE ))

                if (( SENABLED )); then # intepret battery levels

                    if (( (STYPE >= WH43_type && STYPE < WH43_type + WH43_max_ch) ||
                          (STYPE >= WH55_type && STYPE < WH55_type + WH55_max_ch) )); then  #WH43 - PM2.5 indoor, WH41? same ID?
                    #WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/CurdataGwFragment.java l 4575
                      getBatteryLevelState "$SBATTERY"
                    fi

                    #Voltage value seems to be scaled * 10 for soil moisture/rainfall sensor
                    if (( (STYPE >= WH51_type && STYPE < WH51_type + WH51_max_ch) || STYPE == WH40_type)); then 
                       convertScale10ToFloat "$SBATTERY"
                       SBATTERY_STATE=$VALUE_SCALE10_FLOAT"V"
                       if (( "$SBATTERY" <= 12 )); then
                         SBATTERY_STATE+=" low"
                       fi
                    fi

                    if (( STYPE == WH65_type || ( STYPE >= WH31_type && STYPE < WH31_type+WH31_max_ch ) )); then # WH65, WH31 CH1-8 
                      getBatteryState "$SBATTERY"
                    fi
                fi

              readUInt8
              
                SSIGNAL="$VALUE_UINT8"
              
              (( DEBUG )) && >&2 echo "${PACKET_RX_HEX:(($RX_START_POS * 2)):14}"

              if [[ ${SNAME,,} =~ ^${SPATTERN} || ${SDESC,,} =~ ${SPATTERN} || ${SID_STATE,,} =~  ${SPATTERN} || ${SID_HEX,,} =~  ${SPATTERN} ]] ; then  # ^ line starts with, ,,=to lowercase
                      
                      printf -v "STYPE_FMT"          "%2d"  "$STYPE"
                      printf -v "SNAME_FMT"          "%5s"   "$SNAME"
                      printf -v "SID_FMT"            "%8x"  "$SID"
                      printf -v "SID_STATE_FMT"      "%10s" "$SID_STATE"
                      printf -v "SBATTERY_FMT"       "%3d"   "$SBATTERY"
                      printf -v "SBATTERY_STATE_FMT" "%13s"  "$SBATTERY_STATE"
                      printf -v "SSIGNAL_FMT"        "%6s"   "$SSIGNAL"
                      printf -v "SINTERVAL_MIN_FMT"  "%12s"  "$SINTERVAL_MIN"
                      
                      printf "%5s %5s %8s %10s %7s %13s %6s %12s %s\n" "$STYPE_FMT" "$SNAME_FMT" "$SID_FMT" "$SID_STATE_FMT" "$SBATTERY_FMT" "$SBATTERY_STATE_FMT" "$SSIGNAL_FMT" "$SINTERVAL_MIN_FMT" "$SDESC"
                      #signal %3d interval %6s desc. %s
                      #"$SBATTERY_STATE" "$SSIGNAL" "$SINTERVAL" "$SDESC" 
              fi

       done
}

function initTimezones
{
  #echo "(UTC-12:00)International Date Line West", "(UTC-11:00)Samoa", "(UTC-11:00)Coordinated Universal Time-11", "(UTC-10:00)Aleutian Islands", "(UTC-10:00)Hawaii", "(UTC-09:30)Marquesas Islands", "(UTC-09:00)Alaska", "(UTC-09:00)Coordinated Universal Time-9", "(UTC-08:00)Pacific Time (US & Canada)", "(UTC-08:00)Baja California", "(UTC-08:00)Coordinated Universal Time-8", "(UTC-07:00)Chihuahua,La Paz,Mazatlan", "(UTC-07:00)Mountain Time (US & Canada)", "(UTC-07:00)Arizona", "(UTC-06:00)Guadalajara,Mexico City,Monterrey", "(UTC-06:00)Saskatchewan", "(UTC-06:00)Central Time (US & Canada)", "(UTC-06:00)Central America", "(UTC-05:00)Bogota,Lima,Quito", "(UTC-05:00)Eastern Time (US & Canada)", "(UTC-05:00)Havana", "(UTC-05:00)Hayti", "(UTC-05:00)Chetumal", "(UTC-05:00)Indiana (East)", "(UTC-04:30)Caracas", "(UTC-04:00)Atlantic Time (Canada)", "(UTC-04:00)Cuiaba", "(UTC-04:00)Georgetown,La Paz,Manaus,San Juan", "(UTC-04:00)Santiago", "(UTC-04:00)Asuncion", "(UTC-03:30)Newfoundland", "(UTC-03:00)Brasilia", "(UTC-03:00)Buenos Aires", "(UTC-03:00)Greenland", "(UTC-03:00)Cayenne,Fortaleza", "(UTC-03:00)Montevideo", "(UTC-02:00)Coordinated Universal Time-02", "(UTC-01:00)Cape Verde Is.", "(UTC-01:00)Azores", "(UTC)Dublin,Edinburgh,Lisbon,London", "(UTC)Casablanca", "(UTC)Monrovia,Reykjavik", "(UTC)Coordinated Universal Time", "(UTC+01:00)Amsterdam,Berlin,Bern,Rome,Stockholm,Vienna", "(UTC+01:00)Belgrade,Bratislava,Budapest,Ljubljana,Prague", "(UTC+01:00)Brussels,Copenhagen,Madrid,Paris", "(UTC+01:00)Sarajevo,Skopje,Warsaw,Zagreb", "(UTC+01:00)Windhoek", "(UTC+01:00)West Central Africa", "(UTC+02:00)Amman", "(UTC+02:00)Beirut", "(UTC+02:00)Damascus", "(UTC+02:00)Harare,Pretoria", "(UTC+02:00)Helsinki,Kyiv,Riga,Sofia,Talinn,Vilnius", "(UTC+02:00)Cairo", "(UTC+02:00)Athens,Bucharest,Istanbul", "(UTC+02:00)Jerusalem", "(UTC+03:00)Baghdad", "(UTC+03:00)Kuwait,Riyadh", "(UTC+03:00)Minsk", "(UTC+03:00)Moscow,St.Petersburg,Volgograd", "(UTC+03:00)Nairobi", "(UTC+03:30)Tehran", "(UTC+04:00)Abu Dhabi,Muscat", "(UTC+04:00)Yerevan", "(UTC+04:00)Baku", "(UTC+04:00)Tbilisi", "(UTC+04:00)Port Louis", "(UTC+04:30)Kabul", "(UTC+05:00)Tashkent", "(UTC+05:00)Ekaterinburg", "(UTC+05:00)Islamabad,Karachi", "(UTC+05:30)Chennai,Kolkata,Mumbai,New Delhi", "(UTC+05:30)Sri Jayawardenepura", "(UTC+05:45)Kathmandu", "(UTC+06:00)Astana", "(UTC+06:00)Dhaka", "(UTC+06:00)Novosibirsk", "(UTC+06:30)Yangon (Rangoon)", "(UTC+07:00)Kobdo", "(UTC+07:00)Krasnoyarsk", "(UTC+07:00)Bangkok,Hanoi,Jakarta", "(UTC+08:00)Beijing,Chongqing,Hong Kong,Urumqi", "(UTC+08:00)Kuala Lumpur,Singapore", "(UTC+08:00)Perth", "(UTC+08:00)Taipei", "(UTC+08:00)Ulaanbaatar", "(UTC+08:00)Irkutsk", "(UTC+09:00)Pyongyang", "(UTC+09:00)Osaka,Sapporo,Tokyo", "(UTC+09:00)Seoul", "(UTC+09:00)Yakutsk", "(UTC+09:30)Adelaide", "(UTC+09:30)Darwin", "(UTC+10:00)Brisbane", "(UTC+10:00)Vladivostok", "(UTC+10:00)Guam,Port Moresby", "(UTC+10:00)Hobart", "(UTC+10:00)Canberra,Melbourne,Sydney", "(UTC+10:30)Lord Howe Island", "(UTC+11:00)Magadan", "(UTC+11:00)Solomon Is.,New Caledonia", "(UTC+12:00)Auckland,Wellington", "(UTC+12:00)Fiji", "(UTC+12:00)Coordinated Universal Time+12", "(UTC+12:45)Chatham Islands", "(UTC+13:00)Nuku'alofa", "(UTC+14:00)Christmas Island" | cut -d ',' -f 1- --output-delimiter=$'\n'
#Based on decompiled /WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/SystemFragment.java
readarray -t SYSTEM_TIMEZONE <<EOF
(UTC-12:00) International Date Line West
(UTC-11:00) Samoa
(UTC-11:00) Coordinated Universal Time-11
(UTC-10:00) Aleutian Islands
(UTC-10:00) Hawaii
(UTC-09:30) Marquesas Islands
(UTC-09:00) Alaska
(UTC-09:00) Coordinated Universal Time-9
(UTC-08:00) Pacific Time (US & Canada)
(UTC-08:00) Baja California
(UTC-08:00) Coordinated Universal Time-8
(UTC-07:00) Chihuahua, La Paz, Mazatlan
(UTC-07:00) Mountain Time (US & Canada)
(UTC-07:00) Arizona
(UTC-06:00) Guadalajara, Mexico City,Monterrey
(UTC-06:00) Saskatchewan
(UTC-06:00) Central Time (US & Canada)
(UTC-06:00) Central America
(UTC-05:00) Bogota, Lima, Quito
(UTC-05:00) Eastern Time (US & Canada)
(UTC-05:00) Havana
(UTC-05:00) Hayti
(UTC-05:00) Chetumal
(UTC-05:00) Indiana (East)
(UTC-04:30) Caracas
(UTC-04:00) Atlantic Time (Canada)
(UTC-04:00) Cuiaba
(UTC-04:00) Georgetown, La Paz, Manaus, San Juan
(UTC-04:00) Santiago
(UTC-04:00) Asuncion
(UTC-03:30) Newfoundland
(UTC-03:00) Brasilia
(UTC-03:00) Buenos Aires
(UTC-03:00) Greenland
(UTC-03:00) Cayenne, Fortaleza
(UTC-03:00) Montevideo
(UTC-02:00) Coordinated Universal Time-02
(UTC-01:00) Cape Verde Is.
(UTC-01:00) Azores
(UTC) Dublin, Edinburgh, Lisbon, London
(UTC) Casablanca
(UTC) Monrovia, Reykjavik
(UTC) Coordinated Universal Time
(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
(UTC+01:00) Brussels, Copenhagen, Madrid, Paris
(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb
(UTC+01:00) Windhoek
(UTC+01:00) West Central Africa
(UTC+02:00) Amman
(UTC+02:00) Beirut
(UTC+02:00) Damascus
(UTC+02:00) Harare, Pretoria
(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Talinn, Vilnius
(UTC+02:00) Cairo
(UTC+02:00) Athens, Bucharest, Istanbul
(UTC+02:00) Jerusalem
(UTC+03:00) Baghdad
(UTC+03:00) Kuwait, Riyadh
(UTC+03:00) Minsk
(UTC+03:00) Moscow, St.Petersburg, Volgograd
(UTC+03:00) Nairobi
(UTC+03:30) Tehran
(UTC+04:00) Abu Dhabi, Muscat
(UTC+04:00) Yerevan
(UTC+04:00) Baku
(UTC+04:00) Tbilisi
(UTC+04:00) Port Louis
(UTC+04:30) Kabul
(UTC+05:00) Tashkent
(UTC+05:00) Ekaterinburg
(UTC+05:00) Islamabad, Karachi
(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi
(UTC+05:30) Sri Jayawardenepura
(UTC+05:45) Kathmandu
(UTC+06:00) Astana
(UTC+06:00) Dhaka
(UTC+06:00) Novosibirsk
(UTC+06:30) Yangon (Rangoon)
(UTC+07:00) Kobdo
(UTC+07:00) Krasnoyarsk
(UTC+07:00) Bangkok, Hanoi, Jakarta
(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi
(UTC+08:00) Kuala Lumpur, Singapore
(UTC+08:00) Perth
(UTC+08:00) Taipei
(UTC+08:00) Ulaanbaatar
(UTC+08:00) Irkutsk
(UTC+09:00) Pyongyang
(UTC+09:00) Osaka, Sapporo, Tokyo
(UTC+09:00) Seoul
(UTC+09:00) Yakutsk
(UTC+09:30) Adelaide
(UTC+09:30) Darwin
(UTC+10:00) Brisbane
(UTC+10:00) Vladivostok
(UTC+10:00) GuamPort Moresby
(UTC+10:00) Hobart
(UTC+10:00) Canberra, Melbourne, Sydney
(UTC+10:30) Lord Howe Island
(UTC+11:00) Magadan
(UTC+11:00) Solomon Is., New Caledonia
(UTC+12:00) Auckland, Wellington
(UTC+12:00) Fiji
(UTC+12:00) Coordinated Universal Time+12
(UTC+12:45) Chatham Islands
(UTC+13:00) Nuku'alofa
(UTC+14:00) Christmas Island
EOF
}

function printTimezones
{
  local n
  n=0
  printf "%3s %s\n" "tzi" "timezone" #tzi timezone index
  for tz in "${SYSTEM_TIMEZONE[@]}"; do
    printf "%3d %s\n" $n "$tz"
    (( n++ ))
  done
}

function parsePacket {
  local cmd
  RX_POS=4 # current read position/after packet length byte for indexing PACKET_RX_OD[1] - ASCII string from od utility

  cmd=0x${PACKET_RX[2]}

  #Packet length
  if (( cmd == CMD_broadcast || cmd == CMD_livedata || cmd == CMD_read_sensor_id_new )); then

      RX_POS=5    
      printf -v PACKET_RX_LENGTH "%u" "0x${PACKET_RX[3]}${PACKET_RX[4]}"
   else  
       PACKET_RX_LENGTH=0x${PACKET_RX[3]}
  fi

  ((DEBUG)) && echo >&2 "Parse packet ${PACKET_RX[*]} length $PACKET_RX_LENGTH"

  if (( cmd == CMD_write_reset || cmd == CMD_write_customized || cmd == CMD_write_path || cmd == CMD_reboot || cmd == CMD_write_ssid || cmd == CMD_write_raindata  || cmd == CMD_write_ecowitt_interval || cmd == CMD_write_wunderground || cmd == CMD_write_wow  || cmd == CMD_write_weathercloud || cmd == CMD_write_sensor_id || cmd == CMD_write_system )); then 
    parseResultPacket

  elif (( cmd == CMD_read_mac )); then

    CONFIGURATION[$CONF_mac]=$(printf "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[4]}" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}")
    echo "${CONFIGURATION[$CONF_mac]}"

  elif (( cmd == CMD_read_version )); then

    readString
    CONFIGURATION[$CONF_version]=$VALUE_STRING
    echo "${CONFIGURATION[$CONF_version]}"

  elif (( cmd == CMD_read_system )); then
  
     readUInt8
     CONFIGURATION[$CONF_system_frequency]=$VALUE_UINT8
     if ((  CONFIGURATION[CONF_system_frequency]  == SYSTEM_FREQUENCY_RFM433M )); then
       CONFIGURATION[$CONF_system_frequency_state]="433MHz"
     elif ((  CONFIGURATION[CONF_system_frequency]  == SYSTEM_FREQUENCY_RFM868M )); then
       CONFIGURATION[$CONF_system_frequency_state]="868MHz"
     elif ((  CONFIGURATION[CONF_system_frequency]  == SYSTEM_FREQUENCY_RFM915M )); then
       CONFIGURATION[$CONF_system_frequency_state]="915MHz"
     elif ((  CONFIGURATION[CONF_system_frequency]  == SYSTEM_FREQUENCY_RFM920M )); then
       CONFIGURATION[$CONF_system_frequency_state]="920MHz"
     fi
     echo System Frequency "${CONFIGURATION[$CONF_system_frequency]}" "${CONFIGURATION[$CONF_system_frequency_state]}"

     readUInt8
     CONFIGURATION[$CONF_system_sensor_type]=$VALUE_UINT8 # 0=WH24, 1=WH65

     if (( CONFIGURATION[CONF_system_sensor_type] == SYSTEM_SENSOR_TYPE_WH24 )); then
       CONFIGURATION[$CONF_system_sensor_type_state]="WH24"
     elif (( CONFIGURATION[CONF_system_sensor_type] == SYSTEM_SENSOR_TYPE_WH65 )); then
       CONFIGURATION[$CONF_system_sensor_type_state]="WH65"
      
     fi
     echo System type "${CONFIGURATION[$CONF_system_sensor_type]}" "${CONFIGURATION[$CONF_system_sensor_type_state]}"

     readUInt32BE
     CONFIGURATION[$CONF_system_utc]=$VALUE_UINT32BE # UTC time (seconds)
     CONFIGURATION[$CONF_system_utc_state]=$(date -u -d @"$VALUE_UINT32BE" +'%F %T')
     echo "${CONFIGURATION[$CONF_system_utc_state]}" System utc "$VALUE_UINT32BE" 
     #while true; do time ./gw  -h 192.168.3.80 -c system | grep utc; date -u; sleep 0.6; done #see time difference between machine time and device time

     readUInt8
     CONFIGURATION[$CONF_system_timezone_index]=$VALUE_UINT8 # 39 = UTC
     initTimezones
     CONFIGURATION[$CONF_system_timezone_index_state]=${SYSTEM_TIMEZONE[CONFIGURATION[$CONF_system_timezone_index]]}
     printTimezones
     echo System timezone index "${CONFIGURATION[$CONF_system_timezone_index]}" "${CONFIGURATION[$CONF_system_timezone_index_state]}" 

     
     readUInt8
     CONFIGURATION[$CONF_system_dst_status]=$VALUE_UINT8
      CONFIGURATION[$CONF_system_dst_status_bit]=$(( "${CONFIGURATION[$CONF_system_dst_status]}" & 0x1 ))
     if (( CONFIGURATION[CONF_system_dst_status_bit] == 1 )); then
        CONFIGURATION[$CONF_system_dst_status_state]="on";
      elif (( CONFIGURATION[CONF_system_dst_status_bit] == 0 )); then
        CONFIGURATION[$CONF_system_dst_status_state]="off"
     fi  
     CONFIGURATION[$CONF_system_timezone_auto_bit]=$(( ( "${CONFIGURATION[$CONF_system_dst_status]}" & 0x2 ) >> 1 )) # bit 2 1= off, 0=on ?
     if (( CONFIGURATION[CONF_system_timezone_auto_bit] == 0 )); then
        CONFIGURATION[$CONF_system_timezone_auto_state]="on";
      elif (( CONFIGURATION[CONF_system_timezone_auto_bit] == 1 )); then
        CONFIGURATION[$CONF_system_timezone_auto_state]="off"
     fi
     echo System DST status "$VALUE_UINT8" dst "${CONFIGURATION[$CONF_system_dst_status_state]}" auto timezone "${CONFIGURATION[$CONF_system_timezone_auto_state]}"

  elif (( cmd == CMD_read_ecowitt_interval )); then

    readUInt8
    CONFIGURATION[$CONF_ecowitt_interval]=$VALUE_UINT8
    echo "ecowitt_interval ${CONFIGURATION[$CONF_ecowitt_interval]} minutes"

  elif (( cmd == CMD_read_wunderground )); then

    readString
    CONFIGURATION[$CONF_wunderground_id]=$VALUE_STRING
    
    readString
    CONFIGURATION[$CONF_wunderground_password]=$VALUE_STRING

    echo "wunderground_id ${CONFIGURATION[$CONF_wunderground_id]}"
    echo "wunderground_password ${CONFIGURATION[$CONF_wunderground_password]}"
  
  elif (( cmd == CMD_read_wow )); then

    readString
    CONFIGURATION[$CONF_wow_id]=$VALUE_STRING

    readString
    CONFIGURATION[$CONF_wow_password]=$VALUE_STRING

    echo "wow_id ${CONFIGURATION[$CONF_wow_id]}"
    echo "wow_password ${CONFIGURATION[$CONF_wow_password]}"


  elif (( cmd == CMD_read_weathercloud )); then

    readString
    CONFIGURATION[$CONF_weathercloud_id]=$VALUE_STRING
    
    readString
    CONFIGURATION[$CONF_weathercloud_password]=$VALUE_STRING

    echo "weathercloud_id ${CONFIGURATION[$CONF_weathercloud_id]}"
    echo "weathercloud_password ${CONFIGURATION[$CONF_weathercloud_password]}"
  
  elif (( cmd == CMD_read_customized )); then

    readString
    CONFIGURATION[$CONF_customized_id]=$VALUE_STRING

    readString
    CONFIGURATION[$CONF_customized_password]=$VALUE_STRING

    readString
    CONFIGURATION[$CONF_customized_server]=$VALUE_STRING

    readUInt16BE
    CONFIGURATION[$CONF_customized_port]=$VALUE_UINT16BE

    readUInt16BE
    CONFIGURATION[$CONF_customized_interval]=$VALUE_UINT16BE

    readUInt8
    CONFIGURATION[$CONF_customized_type]=$VALUE_UINT8
    
    readUInt8
    CONFIGURATION[$CONF_customized_enabled]=$VALUE_UINT8

    printCustomized

  elif (( cmd == CMD_read_path )); then

    readString
    CONFIGURATION[$CONF_customized_ecowitt_path]=$VALUE_STRING
    readString
    CONFIGURATION[$CONF_customized_wunderground_path]=$VALUE_STRING
  
  elif (( cmd == CMD_broadcast )); then

    #this is the station MAC/ip on local network, when device is reset its annoncing hotspot accesspoint/AP with first byte of MAC changed
    # shellcheck disable=SC2102
    echo PACKET RX "${PACKET_RX[@]}" "${!PACKET_RX[@]}"
    printf -v CONFIGURATION[$CONF_broadcast_mac] "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}" 0x"${PACKET_RX[10]}"
    # shellcheck disable=SC2102
    printf -v CONFIGURATION[$CONF_broadcast_ip] "%u.%u.%u.%u" 0x"${PACKET_RX[11]}" 0x"${PACKET_RX[12]}" 0x"${PACKET_RX[13]}" 0x"${PACKET_RX[14]}"
    RX_POS=17
    local ssid
    local version
    #        IFS=' '; read -r ssid version <<< "${PACKET_RX_OD[1]:(( $pos + 1)):0x${PACKET_RX[$pos]}}" # ssid appends space+version
    readString
    IFS=' '
    read -r ssid version <<<"$VALUE_STRING" # ssid appends space+version

    CONFIGURATION[$CONF_broadcast_ssid]=$ssid
    CONFIGURATION[$CONF_broadcast_version]=$version
    # shellcheck disable=SC2102
    printf -v CONFIGURATION[$CONF_broadcast_port] "%u" 0x"${PACKET_RX[15]}""${PACKET_RX[16]}"
    echo "${CONFIGURATION[$CONF_broadcast_mac]} ${CONFIGURATION[$CONF_broadcast_ip]}:${CONFIGURATION[$CONF_broadcast_port]} ${CONFIGURATION[$CONF_broadcast_ssid]} ${CONFIGURATION[$CONF_broadcast_version]}"

  elif (( cmd == CMD_read_raindata )); then

    # echo "${PACKET_RX_HEX}" "$RX_POS_HEX"
    readUInt32BE
    CONFIGURATION[$CONF_rainrate]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[$CONF_rainday]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[$CONF_rainweek]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[$CONF_rainmonth]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[$CONF_rainyear]=$VALUE_UINT32BE

    printRain

  elif (( cmd == CMD_livedata )); then

    parseLivedata "$SPATTERN"

  elif (( cmd == CMD_read_sensor_id_new || cmd == CMD_read_sensor_id )); then

    parseSensor 1
     
  else

    echo >&2 "Warning unable to parse response for command $cmd $PACKET_RX_HEX"
  fi
}

function newPacketBody {
  # PACKET BODY STARTING AT BYTE 2 (from 0 index, first 0xff 0xff)

  if [ -z "$1" ]; then
      >&2 echo Error no command given to newPacketBody
      return 1
  fi
  
  PACKET_BODY=()
  decToHex "$1"
  PACKET_BODY+=("$VALUE_HEX" "0x00")
  (( DEBUG )) && >&2 echo "${PACKET_BODY[@]}"
  
  case "$1" in

  "$CMD_broadcast" | "$CMD_write_ssid") # WSVIEW sends 2 byte field for size
  
    PACKET_BODY+=("0x00")
    ((DEBUG)) && echo >&2 2-byte packet length
    ;;
  esac

  # [ -n "$1" ] &&  PACKET_BODY+=("0x00")  # Append for two byte packet length
}
function createPacketTX {
  local packetLengthLSB
  local packetLengthMSB
  local n

  #Update packet length, either 1 or 2 bytes
  case ${PACKET_BODY[0]} in
  
        "$CMD_write_ssid" | "$CMD_broadcast")

          packetLengthLSB=$(((${#PACKET_BODY[@]} + 1) & 0xff))
          packetLengthMSB=$((((${#PACKET_BODY[@]} + 1) & 0xff00) >> 8))
          decToHex $packetLengthMSB
          PACKET_BODY[1]=$VALUE_HEX
          decToHex $packetLengthLSB
          PACKET_BODY[2]=$VALUE_HEX
          ;;
        
        *)
        
          decToHex $((${#PACKET_BODY[@]} + 1))
          PACKET_BODY[1]=$VALUE_HEX # set packet length including checksum byte
          ;;
  esac

  checksum

  PACKET_TX=(0xff 0xff "${PACKET_BODY[@]}" "$CHECKSUM")
  PACKET_TX_COMMAND=${PACKET_TX[2]}

  ((DEBUG)) && echo >&2 PACKET_TX "${PACKET_TX[@]//0x/''}"

  PACKET_TX_ECHO=''
  
  for n in "${!PACKET_TX[@]}"; do
    PACKET_TX_ECHO+=${PACKET_TX[$n]}
  done
  
  PACKET_TX_ECHO=${PACKET_TX_ECHO//0x/'\x'}

  ((DEBUG)) && echo >&2 PACKET_TX_ECHO "$PACKET_TX_ECHO"

}

function readResponseCat {
  local timeoutCat=0.025 # Wireshark [Time delta from previous captured frame: 0.013166760 seconds]
  #   (( DEBUG )) && timeoutOptions='-v'
  # cat inside while (true) { continue read }
  #https://github.com/coreutils/coreutils/blob/bbb19b18687d5572dcbe7bbb1a48c8ee0f21786b/src/cat.c#L168
  # Actually response is read in the first call to read, then a second read is started on stdin/redirected FD, so cat has to be killed...
  # timeout "$timeoutOptions"--preserve-status $timeoutCat cat <&"$FD" >$FILENAME_RESPONSE
  cat <&"$FD" >"${FILENAME[rx]}" &
  sleep $timeoutCat
  kill %1
}

function readResponseDD {
  local dd_result
  ((DEBUG)) && unset "DEBUG_OPTIONS[dd]"
  # shellcheck disable=SC2086
  timeout 0.5 dd bs=1024 count=1 ${DEBUG_OPTIONS[dd]} <&"$FD" >${FILENAME[rx]} # timeout request, for example EasyWeather doesnt respond to rain command
  dd_result=$?
  if [ $dd_result -ne 0 ]; then
    echo >&2 Error DD failed to read response from FD "$FD", status "$dd_result"
  fi
  ((DEBUG)) && echo >&2 dd_result $dd_result
  return $dd_result

}

function readHexASCII {
  unset PACKET_RX -   # array of hex from hex string ff ff 12 -> (ff ff 12)
  unset PACKET_RX_OD  # two string array [0] = hex, [1] = ASCII
  unset PACKET_RX_HEX # compact hex string without spaces ffff
  IFS='>'
  read -r -a PACKET_RX_OD < <(od -A n -t x1z -v -w"$(stat -c %s "$1")" "$1")
  ((DEBUG)) && echo >&2 OD HEX "${PACKET_RX_OD[0]}"
  ((DEBUG)) && echo >&2 OD ASCII "${PACKET_RX_OD[1]}"
  IFS=' '
  read -r -a PACKET_RX <<< "${PACKET_RX_OD[0]:1:-2}"
  #readarray -d ' ' -t PACKET_RX < <(echo -n "${PACKET_RX_OD[0]:1:-2}") # :1 substring, removes space at the beginning, -2: removes two trailing spaces
  PACKET_RX_HEX=${PACKET_RX_OD[0]// /}                                 # strip off all spaces, just hex

}

function sendPacket
{
  sendPacketnc "$@"
  #sendPacketdd "$@"
}

function sendPacketnc
{
  local ncUDPOpt
  local ncIdle
  local port
  local ncStatus

  port=$PORT_tcp_command_server

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -ge 1 ]; then
    newPacketBody "$1"
  fi

  createPacketTX

  case "$PACKET_TX_COMMAND" in

      "$CMD_broadcast")
            ncUDPOpt='-u'
            port=$PORT_udp_discovery_client
            ;;

      "$CMD_write_reset" | "$CMD_write_ssid") # some commands needs idle timeout
         (( DEBUG )) && >&2 echo "$(getCommandName "$PACKET_TX_COMMAND")" Setting device idle timeout for nc
         ncIdle='-i 100ms'
         ;;
    esac

  #  ncIdle='-i 25ms'

  echo -ne "$PACKET_TX_ECHO" >"${FILENAME[tx]}"
  rm "${FILENAME[rx]}"

  # shellcheck disable=SC2086
 { cat "${FILENAME[tx]}"; sleep 0.1; } |  nc  $ncUDPOpt $ncIdle -w 500ms -x "${FILENAME[nc_hex]}" -4 "$HOST" "$port"  >"${FILENAME[rx]}" # wait 0.1s to disable READ KILL of nc on stdin
  ncStatus=$?
  
  if [ -s "${FILENAME[rx]}" ] ; then # -s file exists and not empty
        IFS='>'

        if read -r -a PACKET_RX_OD < <(od -A n -t x1z -v -w"$(stat -c %s "${FILENAME[rx]}")"  "${FILENAME[rx]}" ); then #-z after -t x1 adds "printable characters" to line after >
           (( DEBUG )) && {
            cat "${FILENAME[nc_hex]}"
            echo >&2 OD HEX "${PACKET_RX_OD[0]}" length "${#PACKET_RX_OD[0]}"
            echo >&2 OD ASCII "${PACKET_RX_OD[1]}" length "${#PACKET_RX_OD[1]}"
           }
           IFS=' '
           read -r -a PACKET_RX <<< "${PACKET_RX_OD[0]:1:-2}"
          #  readarray -d ' ' -t PACKET_RX < <(echo -n "${PACKET_RX_OD[0]:1:-2}") # :1 substring, removes space at the beginning, -2: removes two trailing spaces
            PACKET_RX_HEX=${PACKET_RX_OD[0]// /}                                 # strip off all spaces, just hex
            if ((${#PACKET_RX[@]} == 0)); then
                echo >&2 "$HOST Warning no response received from host"
            else
                (( DEBUG  )) && echo >&2 PACKET_RX_HEX "$PACKET_RX_HEX" length "${#PACKET_RX_HEX}"
                echo PACKET RX "${PACKET_RX[@]}"
                parsePacket
            fi
        else
          echo >&2 Error failed to create od hex/ASCII decoding for packet, error code $?
        fi

  else
   >&2 echo  "$(date)" Error failed to receive response for packet "${CMD_NAME["$PACKET_TX_COMMAND"]}", error code $ncStatus
  fi
  
}

#including checksum byte
function sendPacketdd {
  #takes two arguments $1 - command, $2 is udp broadcast request
  local FD=$FD_TCP # default TCP command port

  [ -n "$2" ] && FD="$2" #may also use UDP for broadcast (ssid etc.)
  if [ ! -v FD ]; then
    echo >&2 Error connection to host not available, missing -h to host?
    exit $ERROR_CONNECTION
  fi

  ((DEBUG)) && echo >&2 "Using FD $FD for sending packet"

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -ge 1 ]; then
    newPacketBody "$1"
  fi

  # write command/read response

  createPacketTX
  echo -ne "$PACKET_TX_ECHO" >"${FILENAME[tx]}"
  #printf "%b" "$PACKET_TX_ECHO" >&"$FD" # echo -ne/printf "%b" splits packet at 0x0a if written directly to FD
  ((DEBUG)) && unset "DEBUG_OPTIONS[dd]"
  
  if dd if="${FILENAME[tx]}" ${DEBUG_OPTIONS[dd]} >&"$FD"; then 

      if readResponseDD; then #readResponseCat

        PACKET_TIMESTAMP=$(date)
        readHexASCII "${FILENAME[rx]}"

        if ((${#PACKET_RX[@]} == 0)); then
          echo >&2 "$HOST Warning no response received from host"
        else
          parsePacket
        fi
      fi
  else
     echo >&2 Error DD failed to send packet to FD "$FD", dd status $?
  fi

}

function discovery {
  local TIMEOUT_SCAN=2 #seconds
  local rxscan
  local rxscan_sorted
  local socat_discovery_server_pid
  local n
  local hex_escape

  ((!DEBUG)) && unset "DEBUG_OPTIONS[socat]"

  ((DEBUG)) && echo >&2 "UDP discovery on GW port $PORT_udp_discovery_client"
  ((DEBUG)) && echo >&2 "UDP discovery on local port $PORT_udp_discovery_server"
  # shellcheck disable=SC2086
  socat $SOCAT_DEBUG_OPTIONS -u UDP-RECV:"$PORT_udp_discovery_server" CREATE:${FILENAME[udp_server]} & # move in background
  socat_discovery_server_pid=$!
  ((DEBUG)) && echo >&2 Socat discovery server PID = $socat_discovery_server_pid

  newPacketBody $CMD_broadcast
  createPacketTX
  #-R socat appends to file
  # shellcheck disable=SC2086
  {
    echo -ne "$PACKET_TX_ECHO"
    sleep $TIMEOUT_SCAN
  } | socat $SOCAT_DEBUG_OPTIONS -R "${FILENAME[udp_client]}" - udp-datagram:255.255.255.255:$PORT_udp_discovery_client,broadcast >/dev/null #disable stdout echo of rx data, sleep timeout EOF on STDIN
  #(echo -ne "\xff\xff\x12\x00\x04\x16"; sleep 3) | socat -d -d -x -R rxsocat  - udp-datagram:255.255.255.255:46000,broadcast
  kill $socat_discovery_server_pid

  cat "${FILENAME[udp_client]}" "${FILENAME[udp_server]}" >"${FILENAME[discovery]}" # Merge results from udp/tcp discovery
  #ff ff 12 00 27 48 3f da 54 14 ec c0 a8 03 50 af c8 17 47 57 31 30 30 30 41 2d 57 49 46 49 31 34 45 43 20 56 31 2e 36 2e 38 91
  # .  .  .  .  '  H  ?  .  T  .  .  .  .  .  P  .  .  .  G  W  1  0  0  0  A  -  W  I  F  I  1  4  E  C     V  1  .  6  .  8

  rxscan=$(od -A n -t x1 -v -w"$(stat -c %s "${FILENAME[discovery]}")" "${FILENAME[discovery]}")
  ((DEBUG)) && echo Keeping files in "$PWD" "${FILENAME[discovery]}" "${FILENAME[udp_client]}" "${FILENAME[udp_server]}"
  ((!DEBUG)) && rm "${FILENAME[discovery]}" "${FILENAME[discovery_sorted]}" "${FILENAME[udp_client]}" "${FILENAME[udp_server]}"

  rxscan_sorted=$(echo -en "${rxscan//" ff ff 12"/"\nff ff 12"}" | sort -u | tail -n +3) # Skips first few lines which is a newline followed by broadcast (0x12) command

  echo -n "$rxscan_sorted" >"${FILENAME[discovery_sorted]}"

  while read -r line; do # loop through all received broadcasts and parse them
    if [[ "$line" =~ ^"ff ff 12" ]]; then
      hex_escape=""
      for ((n = 0; n < ${#line}; n = n + 3)); do
        hex_escape="$hex_escape\x${line:$n:2}" # create \x escape codes for echo
      done
      echo -ne "$hex_escape" >"${FILENAME[rx]}"
      readHexASCII "${FILENAME[rx]}"
      parsePacket
    fi
  done <<<"$rxscan_sorted"

}

function checksum {
  local n
  #caller 0

  CHECKSUM=0
  ((DEBUG)) && echo >&2 CHECKSUM PACKET_BODY "${PACKET_BODY[@]}"
  #http://mywiki.wooledge.org/BashGuide/Arrays
  #for ((n = 0; n < ${#PACKET_BODY[@]}; n++)); do
  for n in "${!PACKET_BODY[@]}"; do
    CHECKSUM=$(((CHECKSUM + ${PACKET_BODY[$n]}) & 0xff))
  done
  decToHex $CHECKSUM
  CHECKSUM=$VALUE_HEX
  ((DEBUG)) && echo >&2 CHECKSUM "$CHECKSUM"
}

function writeString {
  local n

  ((DEBUG)) && echo >&2 "${FUNCNAME[0]} $1 len ${#1}"
  decToHex ${#1}
  PACKET_BODY+=("$VALUE_HEX")
  for ((n = 0; n < ${#1}; n++)); do
    decToHex "'${1:$n:1}"
    PACKET_BODY+=("$VALUE_HEX")
  done
}

function writeUInt32BE {
  writeUInt 32 "$1"
}
function writeUInt16BE {
  writeUInt 16 "$1"
}

function writeUInt8 {
  writeUInt 8 "$1"
}

function writeUInt {
  local hex

  case $1 in
      
       8)  printf -v hex "%02x" "$2"
           VALUE_HEX=$hex
            ;;
      
      16) printf -v hex "%04x" "$2"
          VALUE_UINT16BE_HEX=$hex
           ;;
      
      32) printf -v hex "%08x" "$2"
          VALUE_UINT32BE_HEX=$hex
          ;;
  esac

  for ((n = 0; n < ${#hex}; n = n + 2)); do # Convert to byte array
    PACKET_BODY+=(0x"${hex:$n:2}")
  done
}

function decToHex {
  ((DEBUG)) && echo >&2 $BASHPID "$1"
  printf -v VALUE_HEX "0x%02x" "$1"
}

function newCustomizedPacket {
  newPacketBody $CMD_write_customized
  writeString "${CONFIGURATION[$CONF_customized_id]}"
  writeString "${CONFIGURATION[$CONF_customized_password]}"
  writeString "${CONFIGURATION[$CONF_customized_server]}"
  writeUInt16BE "${CONFIGURATION[$CONF_customized_port]}"
  writeUInt16BE "${CONFIGURATION[$CONF_customized_interval]}"
  writeUInt8 "${CONFIGURATION[$CONF_customized_type]}"
  writeUInt8 "${CONFIGURATION[$CONF_customized_enabled]}"
}

function newPathPacket {
  newPacketBody $CMD_write_path
  writeString "${CONFIGURATION[$CONF_customized_wunderground_path]}"
  writeString "${CONFIGURATION[$CONF_customized_ecowitt_path]}"
}

function sendRaindata {
  if ! [[ "$1" =~ ^[0-9]+$ ]] || ! [[ "$2" =~ ^[0-9]+$ ]] || ! [[ "$3" =~ ^[0-9]+$ ]] || ! [[ "$4" =~ ^[0-9]+$ ]]; then
    echo Raindata has "element(s)" which is not a number
    return
  fi 

  (( DEBUG )) && >&2 echo  rainday "$2" rainweek "$3" rainmonth "$4" rainyear "$5"
  
  newPacketBody $CMD_write_raindata
  writeUInt32BE "$1" #rainday
  writeUInt32BE "$2" #rainweek
  writeUInt32BE "$3" #rainmonth
  writeUInt32BE "$4" #rainyear
  ((DEBUG)) && echo >&2 "Sending raindata rd $1 rw $2 rm $3 ry $4"
  sendPacket
}

function sendEcowittInterval {
# observation: GW1000 red-wifi led blinks slowly if not sending data to ecowitt when 0=off
  case "$1" in
    0|1|2|3|4|5)
      newPacketBody $CMD_write_ecowitt_interval
      writeUInt8 "$1" #interval
      ((DEBUG)) && echo >&2 Sending ecowitt interval "$1"
      sendPacket
      ;;
    *) >&2 echo Error Not a valid ecowitt interval, range 0-5 minutes
      ;;
   esac
}

function sendWeatherservice {

  newPacketBody "$1"
  writeString "$2"
  writeString "$3"
  
  case "$1" in
      "$CMD_write_wow")
        writeUInt8 0 # stationnum size - unused
        writeUInt8 1
        ;;
        
      "$CMD_write_weathercloud")
        writeUInt8 1
        ;;
  esac
  ((DEBUG)) && echo >&2 "Sending weather service $1 id $2 password $3"
  sendPacket
}

function sendCustomized {
  newCustomizedPacket
  sendPacket

  newPathPacket
  sendPacket

  if ((DEBUG)); then
    echo >&2 "Sending customized settings"
    printCustomized >&2
  fi
}

function sendSensor
{
  local stypeField
  local stype
  local stypeIndex
  
  newPacketBody $CMD_write_sensor_id
  
  IFS=' '

  for (( stypeIndex= CONF_sensortype_startindex; stypeIndex < CONF_sensortype_endindex; stypeIndex++ )); do
    if [ -n  "${CONFIGURATION[stypeIndex]}" ]; then
    stype=$((stypeIndex - CONF_sensortype_startindex  )) 
    (( DEBUG )) && >&2 echo SensorType "$stype" "${CONFIGURATION[stypeIndex]}"
     writeUInt8 "$stype"
     writeUInt32BE "${CONFIGURATION[stypeIndex]}" 
    fi
  done

 # for stypeField in "${!CONFIGURATION[$CONF_@]}"; do

 #   if [[ "$stypeField" =~ ^"$CONFIGURATION_SENSORFIELD" ]]; then
 #     STYPE=${stypeField:${#CONFIGURATION_SENSORFIELD}}
 #     writeUInt8     "$STYPE"
 #     writeUInt32BE "${CONFIGURATION[$CONF_$stypeField]}"
 #     (( DEBUG )) && >&2 printf "%s %3d %8x\n" sendSensor "$STYPE" "${CONFIGURATION[$CONF_$stypeField]}"
 #   fi
  
 # done

  sendPacket
}

function updateCustomized {
  local needUpdate
  local key_value
  local value
  local key
  local n

  newPacketBody $CMD_read_path
  sendPacket

  newPacketBody $CMD_read_customized # read previous configuration
  sendPacket

  #format enabled=1,port=8000,server=test.no
  IFS=","
  read -r -a OPTION_CUSTOMIZED <<< "$1"
  #readarray -d ',' -t OPTION_CUSTOMIZED < <(echo -n "$1") # <<< HERE string appends 0x0a -> using process substitution

  ((DEBUG)) && echo >&2 "${FUNCNAME[0]} OPTION_CUSTOMIZED" "${OPTION_CUSTOMIZED[@]}" "${#OPTION_CUSTOMIZED[@]}"

  for n in "${!OPTION_CUSTOMIZED[@]}"; do

    ((DEBUG)) && echo >&2 "${FUNCNAME[0]} OPTION_CUSTOMIZED LOOP " "${OPTION_CUSTOMIZED[$n]} n=$n"

    IFS='='
    read -r -a key_value <<< "${OPTION_CUSTOMIZED[$n]}"
    #readarray -d '=' -t key_value < <(echo -n "${OPTION_CUSTOMIZED[$n]}")

    key=${key_value[0]}
    value=${key_value[1]}

    ((DEBUG)) && echo >&2 "${FUNCNAME[0]} KEY $key len ${#key} VALUE $value len ${#value}"

    case "$key" in

    id)
      if [ "${CONFIGURATION[$CONF_customized_id]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_id from "${CONFIGURATION[$CONF_customized_id]} to $value"
        CONFIGURATION[$CONF_customized_id]=$value
        needUpdate=1
      fi
      ;;
    password)
      if [ "${CONFIGURATION[$CONF_customized_password]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_password from "${CONFIGURATION[$CONF_customized_password]} to $value"
        CONFIGURATION[$CONF_customized_password]=$value
        needUpdate=1
      fi
      ;;

    server)
      if [ "${CONFIGURATION[$CONF_customized_server]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_server from "${CONFIGURATION[$CONF_customized_server]} to $value"
        CONFIGURATION[$CONF_customized_server]=$value
        needUpdate=1
      fi
      ;;

    port)

      if [ "${CONFIGURATION[$CONF_customized_port]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_type from "${CONFIGURATION[$CONF_customized_port]} to $value"
        CONFIGURATION[$CONF_customized_port]=$value
        needUpdate=1
      fi
      ;;

    type)
      if [ "${CONFIGURATION[$CONF_customized_type]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_type from "${CONFIGURATION[$CONF_customized_type]} to $value"
        CONFIGURATION[$CONF_customized_type]=$value
        needUpdate=1
      fi
      ;;

    enabled)
      if [ "${CONFIGURATION[$CONF_customized_enabled]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_enabled from "${CONFIGURATION[$CONF_customized_enabled]} to $value"
        CONFIGURATION[$CONF_customized_enabled]=$value
        needUpdate=1
      fi
      ;;

    interval)
      if [ "${CONFIGURATION[$CONF_customized_interval]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_interval from "${CONFIGURATION[$CONF_customized_interval]} to $value"
        CONFIGURATION[$CONF_customized_interval]=$value
        needUpdate=1
      fi
      ;;
    wunderground_path)
      if [ "${CONFIGURATION[$CONF_customized_wunderground_path]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_wunderground_path from "${CONFIGURATION[$CONF_customized_wunderground_path]} to $value"
        CONFIGURATION[$CONF_customized_wunderground_path]=$value
        needUpdate=1
      fi
      ;;
    ecowitt_path)
      if [ "${CONFIGURATION[$CONF_customized_ecowitt_path]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_ecowitt_path from "${CONFIGURATION[$CONF_customized_ecowitt_path]} to $value"
        CONFIGURATION[$CONF_customized_ecowitt_path]=$value
        needUpdate=1
      fi
      ;;

    *)
      echo updateCustomized: unknown key "$key" value: "$value"
      ;;
    esac

  done

  #https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash
  if ((needUpdate == 1)); then
    newCustomizedPacket
    sendPacket

    newPathPacket
    sendPacket

    printCustomized

  else
    echo >&2 Warning: no update needed for customized "$1"
  fi

}

function convertScale10ToFloat {
  local int
  local frac

  if (($1 < 10)); then
    printf -v VALUE_SCALE10_FLOAT "%s" "0.$1"
  else
    int=$(($1 / 10))
    frac=$(($1 - int * 10))
    printf -v VALUE_SCALE10_FLOAT "%u.%u" $int $frac
  fi
}

function initConfigDir {

  DIR=$HOME'/.config/gw'
  ((DEBUG)) && echo >&2 Configuration directory "$DIR"
  [ ! -d "$DIR" ] && mkdir -v "$DIR" 1>&2

  FILENAME[tx]=$DIR'/txpacket'
  FILENAME[rx]=$DIR'/rxpacket'
  FILENAME[discovery]=$DIR'/rxsocat'
  FILENAME[discovery_sorted]=$DIR/'rxsocat_sorted'
  FILENAME[udp_server]="${FILENAME[discovery]}"_UDP_"$PORT_udp_discovery_server"
  FILENAME[udp_client]="${FILENAME[discovery]}"_UDP_"$PORT_udp_discovery_client"
  FILENAME[nc_hex]=$DIR/'nc_hex.txt'
  FILENAME[livedata_description]=$DIR/'livedata-description.txt'

  ((DEBUG)) && echo >&2 Filename "${FILENAME[@]}"

}

function initLivedataNames
{
  if [ ! -s "${FILENAME[livedata_description]}" ]; then
     >&2 echo Warning File is empty or does not exists "${FILENAME[livedata_description]}"
     return 1
  fi

  #mapping from livedata field in decimal to names
  #26=bedroom,  #27=livingroom
  
  IFS='='
  while read -r LDFTYPE LDNAME; do
    if [[ $LDFTYPE =~ ^"#" || -z $LDFTYPE ]]; then #skip comments
      continue;
    fi
     LIVEDATA_NAME[$LDFTYPE]=$LDNAME
     (( DEBUG )) && >&2 echo Livedata field type to name "$LDFTYPE=$LDNAME"
  done < "${FILENAME[livedata_description]}"

}


function showRainInfoMessage {
  which notify-send >/dev/null && notify-send -t 3000 -i dialog-warning "gw script" "$1" &
  #https://www.shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash/
  echo -e "$(date)" "$1" # may add bell \a
  if [ -n "$2" ]; then
    which espeak >/dev/null && espeak -p10 "$2" &
  fi
}

function runRainNotification { 
  # $1 - number of seconds between each rain probe
  # $2 - show start/stop messages only (1 on, 0 off)
  local rr
  local rd
  local rainInterval # raining continously for "$1" seconds
  local rainDuration # minutes raining
  local simulation
  local showStartStopEventOnly=$2
  local rainTimeout=$1
  rainTimeout=$1
  showStartStopEventOnly=$2

  simulation=0 # 1 = on for testing
  (( DEBUG )) && >&2 echo Rain simulation $simulation
  ((simulation)) && {
    rainTimeout=5
    showStartStopEventOnly=1
    CONFIGURATION[$CONF_rainrate]=0
    CONFIGURATION[$CONF_rainday]=10
  } # { list ; } run in current shell

  ((DEBUG)) && echo >&2 "Rain event interval $rainTimeout s. Show start/stop events only $showStartStopEventOnly"

  rainInterval=0
  while true; do
    ((simulation == 0)) && sendPacket $CMD_read_raindata >/dev/null
    ((simulation)) && ((CONFIGURATION[CONF_rainrate] = CONFIGURATION[CONF_rainrate] + 10)) && ((CONFIGURATION[CONF_rainrate] == 50)) && CONFIGURATION[CONF_rainrate]=0
    convertScale10ToFloat "${CONFIGURATION[$CONF_rainrate]}"
    rr=$VALUE_SCALE10_FLOAT
    convertScale10ToFloat "${CONFIGURATION[$CONF_rainday]}"
    rd=$VALUE_SCALE10_FLOAT
    if ((CONFIGURATION[CONF_rainrate] != 0)); then
      ((rainInterval++))
      if ((rainInterval == 1)); then
        showRainInfoMessage "☂ Raining $rr mm/h.Today $rd mm" "Its raining! $rr millimeter per hour. Today $rd millimeter"
      else
        if [ "$showStartStopEventOnly" != "1" ]; then
          showRainInfoMessage "☂ Raining $rr mm/h. Today $rd mm"
        fi
      fi
    fi
    if ((rainInterval && CONFIGURATION[CONF_rainrate] == 0)); then
      rainDuration=$((rainInterval * rainTimeout / 60)) # integer only in bash
      showRainInfoMessage "Raining stopped! Today $rd mm. Rained for $rainDuration minutes." "Raining stopped! Today $rd millimeter. It rained for $rainDuration minutes."
      rainInterval=0
    fi
    sleep "$rainTimeout"
  done
}

function updateSensorId
{
  local type
  #debug : WSVIEW sensor overview is updated periodically to reflect current state

  newPacketBody $CMD_write_sensor_id

  for type in "${!SENSOR[@]}"; do
  
     writeUInt8 "$type"                  # 1 byte packet length? (255-3)/5 bytes pr field = 50 sensor types max
     writeUInt32BE "${SENSOR[$type]}"

     (( DEBUG )) && >&2 printf "Update sensor type %3d id %8x\n" "$type" "${SENSOR[$type]}"
  done

  sendPacket

}

function connnectAP {
  local lan_mac
  local lan_mac_lc #lowercase
  local ap_mac
  local ap_all_scan
  local ap_scan
  local ap_scan_result
  local connect_result
  local connect_str
  local connect_attempt
  local connect_attempt_MAX
  local connected
  local timeout
  local bssid_pattern

  timeout=5
  connected=1
  connect_attempt=0
  connect_attempt_MAX=15

  #useful for debugging: sudo nmcli device monitor and  sudo iw event -r

  if ! which nmcli >/dev/null; then
    return "$ERROR_NO_NMCLI"
  fi
  sudo nmcli radio wifi on
  echo >&2 Attempting to reconnect to device, waiting $timeout s for device to bootup after reset
  sleep $timeout # wait for reset/bootup

  # Station mode/LAN: MAC 48:3F:DA:54:14:EC, ssid/version GW1000A-WIFI14EC, AP-mode: MAC 4A:3F:DA:54:14:EC, GW1000-WIFI4EC
  # 48:3F:DA - EspressIf Inc. https://www.wireshark.org/tools/oui-lookup.html
  #  nmcli dev wifi list : 4A:3F:DA:54:14:EC  GW1000-WIFI14EC  Infra  1     54 Mbit/s   77      ▂▄▆_  --
  # observation/seldom : 4A:3F:DA:54:14:EC SSID  ESP_5414EC -> hotsport started before ssid rename in firmware v.1.6.8?
  lan_mac=${CONFIGURATION[$CONF_broadcast_mac]//:/}
  lan_mac_lc=${CONFIGURATION[$CONF_broadcast_mac],,}
  bssid_pattern=${lan_mac:9}

  while ((connected == 1 && connect_attempt < "$connect_attempt_MAX")); do
    ((connect_attempt++))

    ((DEBUG)) && echo >&2 Connect attempt "$connect_attempt"
    if [ "$connect_attempt" == "1" ]; then
      ap_all_scan=$(sudo nmcli -t -e no -f BSSID,SSID,IN-USE dev wifi list --rescan yes) #use terse mode for fixed format string
    else
      ap_all_scan=$(sudo nmcli -t -e no -f BSSID,SSID,IN-USE dev wifi list --rescan auto)
    fi
    ap_scan=$(grep -F "$bssid_pattern" <<<"$ap_all_scan")
    ap_scan_result=$?

    if ((ap_scan_result == 0)) && [ -n "$ap_scan" ]; then
      ((DEBUG)) && echo >&2 AP scan "$ap_scan"
      readarray -d':' nmcli_result < <(echo -n "$ap_scan")
      in_use=${nmcli_result[7]}
      ap_mac=${nmcli_result[0]}${nmcli_result[1]}${nmcli_result[2]}${nmcli_result[3]}${nmcli_result[4]}${nmcli_result[5]}
      ap_mac=${ap_mac:0:-1}

      if [ "$in_use" != "*" ]; then
        ((DEBUG)) && echo >&2 Connecting to bssid "$ap_mac"
        connect_str=$(sudo nmcli -w 5 dev wifi connect "$ap_mac") #nmcli has a default timeout of 45 seconds, try just waiting 5 s
        connect_result=$?
        echo >&2 "$connect_str"
      fi

      if ((connect_result == 0)) && [[ $connect_str != Error* ]] || [ "$in_use" == "*" ]; then
        ((DEBUG)) && arp -n | grep -F "${lan_mac_lc:9}" >&2
        connected=0
        #ip -4 -o address
      fi

    fi

    ((connected == 1)) && sleep 5
  done

  ip address

}

function initSearchPatternForCommand
{
     SPATTERN=$1
     if [[ -z "$SPATTERN" || "$SPATTERN" == "*" ]]; then
        SPATTERN='.*' #add default search for any pattern
     fi
     SPATTERN=${SPATTERN,,} # to lowercase
}

function processCommand {
#$1 - field pattern for livedata/sensor id

  case $COMMAND in

        reset)
          
          sendPacket $CMD_broadcast $FD_UDP >/dev/null
          
          read -r -p "Reset ${CONFIGURATION[$CONF_broadcast_mac]} ${CONFIGURATION[$CONF_broadcast_ssid]} (Y/N)? "
          
          case $REPLY in
          Y)
            sendPacket $CMD_write_reset # 3 blink in red LED
            connnectAP                     # assume user wants to reconnect for setting up new WIFI
            ;;
          esac
          
          ;;

        reboot)
          
          sendPacket "$CMD_reboot"
          ;;

        mac)
          
          sendPacket "$CMD_read_mac"
          ;;

        version)
          
          sendPacket $CMD_read_version
          ;;

        system)

          sendPacket $CMD_read_system
          ;;

        ecowitt)
 
          if [[ -z "$1" || "$1" =~ ^"-" ]]; then
            sendPacket $CMD_read_ecowitt_interval
          else
           sendEcowittInterval "$1"
          fi
          ;;

        wunderground)

            if [[ -z "$1" || "$1" =~ ^"-" ]]; then
              sendPacket $CMD_read_wunderground;
            else
              if (( $# < 2 )); then
                 echo >&2 "Error {id} {password} must be specified"
              else
                  sendWeatherservice "$CMD_write_wunderground" "$1" "$2"
              fi
            fi 

          ;;

        wow)
          
          if [[ -z "$1" || "$1" =~ ^"-" ]]; then
            sendPacket $CMD_read_wow
          else
            if (( $# < 2 )); then
                 echo >&2 "Error {id} {password} must be specified"
              else
                  sendWeatherservice "$CMD_write_wow" "$1" "$2"
              fi
          fi
          ;;

        weathercloud)

          if [[ -z "$1" || "$1" =~ ^"-" ]]; then
            sendPacket $CMD_read_weathercloud
          else
                if (( $# < 2 )); then
                  echo >&2 "Error {id} {key} must be specified"
                else
                    sendWeatherservice "$CMD_write_weathercloud" "$1" "$2"
                fi
          fi
          ;;

        customized)
          
          sendPacket $CMD_read_path
          sendPacket $CMD_read_customized
          ;;

        broadcast)
          
          sendPacket $CMD_broadcast $FD_UDP
          ;;

        rain)

          if [[ -z "$1" || "$1" =~ ^"-" ]]; then
            sendPacket $CMD_read_raindata
          else

            if (( $# < 4 )); then # validate rain input
              echo >&2 "Error: {rainday} {week} {month} {year} parameters not specified"
            else
               sendRaindata "$1" "$2" "$3" "$4"
            fi
          
          fi
            
          ;;

        livedata)
          
          initSearchPatternForCommand "$1"
          sendPacket $CMD_livedata
                ;;

        sensor_id)
          
          initSearchPatternForCommand "$1"
          sendPacket $CMD_read_sensor_id
          ;;

        sensor_id_new) # for new SENSOR_TYPE types
        
        if [[ "$1" =~ ^"-" ]]; then # probably new option - or --
          initSearchPatternForCommand
        else
          initSearchPatternForCommand "$1"
        fi
        
          sendPacket $CMD_read_sensor_id_new
          ;;

        *)
          
          echo >&2 Error Unkown command "$COMMAND"
          return 1
          ;;
  esac

  return 0
}

read -r -u 0 -t 0.5 STDIN

if [ -n "$STDIN" ]; then
#  echo STDIN "$STDIN"
   :
  #maybe parse packet if gw used as filter echo hex dump | gw

fi


initConfigDir
initLivedataNames
newLivedataFieldNameDesc

#https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in

  -b | --backup)
    sendPacket $CMD_read_mac >/dev/null
    sendPacket $CMD_read_version >/dev/null
    sendPacket $CMD_broadcast $FD_UDP >/dev/null
    sendPacket $CMD_read_ecowitt_interval >/dev/null
    sendPacket $CMD_read_wunderground >/dev/null
    sendPacket $CMD_read_wow >/dev/null
    sendPacket $CMD_read_weathercloud >/dev/null
    sendPacket $CMD_read_customized >/dev/null
    sendPacket $CMD_read_path >/dev/null
    sendPacket $CMD_read_raindata >/dev/null
    sendPacket $CMD_read_sensor_id_new >/dev/null
    # some data probably saved to device EEPROM
    # calibration data?
    printConfiguration
    shift
    ;;
  
  -c | --command)
    COMMAND="${2,,}"
    shift 2 # remove -c {commmand}
    
    if processCommand "$@"; then # $3 pass field pattern to livedata/sensor_id_new

     for param in "$@"; do #remove param which is not an option 
       if [[ "${param:0:1}" != "-" ]]; then
         (( DEBUG)) && >&2 echo Shift param "$@" "$param"
         shift
        else
          break
       fi

     done
 #     echo AFTER "$@"
        #if [[ ($COMMAND == "livedata" || $COMMAND == "sensor_id_new"  || $COMMAND == "sensor_id" ) && -n "$3" && ! "$3" =~ ^"-" ]]; then # ^"-" don't shift 3 for following new options
        #    shift 3
        #  else
        #    shift 2
        #fi
    #else
    #  shift 1
    fi

    unset COMMAND
    ;;

  -d | --debug)
    DEBUG=1
    DEBUG_OPTIONS[socat]='-d -d -x'
    DEBUG_OPTIONS[nc]="-v -v -v"
    echo >&2 "${FILENAME[@]}"
    shift
    ;;

  -f | --firmware)
    HTTP_UA_NAME="gw script BASH ${BASH_VERSION} $(uname -srv)"
    HTTP_FIRMWARE="http://download.ecowitt.net/down/filewave?v=FirwaveReadme.txt"
    ((DEBUG)) && printf >&2 "%s\n%s" "$HTTP_UA_NAME" "$HTTP_FIRMWARE"
    curl --silent --show-error --user-agent "$HTTP_UA_NAME" "$HTTP_FIRMWARE"
    shift 2
    ;;

  -h | --host)
    HOST_PREV=$HOST
    HOST="$2" # this arg must come first to open socketsopen file descriptors to UDP/TCP port on HOST

    #if ! connect "$2"; then
    #  echo >&2 "$HOST" "Error Failed to connect host $2, exiting"
    #  disconnect
    #  exit $ERROR_CONNECTION
    #fi
    CONFIGURATION[$CONF_host]=$HOST

    #sendPacket "$CMD_read_mac" >/dev/null
    sendPacket "$CMD_read_version" >/dev/null

    sendPacket "$CMD_read_system" &>/dev/null # find sensor type WH65/WH24 - &> redirect stderr+stdout - read_system not available on EasyWeather
    
    if (( CONFIGURATION[CONF_system_sensor_type] == SYSTEM_SENSOR_TYPE_WH24 )); then
      SENSOR_TYPE[WH24_type]="WH24:Outdoor Weather Sensor:16.0:"
    fi

    >&2  printf "%s %s\n\n" "${CONFIGURATION[$CONF_version]}" "${CONFIGURATION[$CONF_system_utc_state]}" 

    shift 2
    ;;
 
  -l | --listen)
    echo >&2 Listening for http request on port "$2"
    mapfile HTTP_REQUEST < <(nc -l "$2")
    for ((n = 0; n < ${#HTTP_REQUEST[@]}; n++)); do
      echo "${HTTP_REQUEST[$n]}"
    done
    shift 2
    ;;
    # Wunderground
    #GET /wundergroundID=testid&PASSWORD=testpassword&tempf=63.0&humidity=82&dewptf=57.4&windchillf=63.0&winddir=355&windspeedmph=3.36&windgustmph=4.47&rainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&solarradiation=206.87&UV=2&indoortempf=74.3&indoorhumidity=61&baromin=29.760&soilmoisture=16&lowbatt=0&dateutc=now&softwaretype=GW1000A_V1.6.8&action=updateraw&realtime=1&rtfreq=5 HTTP/1.0
    #Accept: */*
    #Host: 192.168.3.174
    #Connection: Close

    # Ecowitt
    #POST /ecowitt HTTP/1.1
    #HOST: 192.168.3.174
    #Connection: Close
    #Content-Type: application/x-www-form-urlencoded
    #Content-Length:591
    #
    #PASSKEY=976D09F15C41FD8DC6E9A9E8C4F39707&stationtype=GW1000A_V1.6.8&dateutc=2021-08-10+12:08:12&tempinf=74.1&humidityin=61&baromrelin=29.754&baromabsin=29.754&tempf=63.0&humidity=82&winddir=15&windspeedmph=3.80&windgustmph=4.47&maxdailygust=5.82&solarradiation=206.01&uv=2&rainratein=0.000&eventrainin=0.051&hourlyrainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&totalrainin=4.811&temp1f=68.72&humidity1=67&temp2f=72.14&humidity2=63&temp3f=80.24&humidity3=48&soilmoisture1=16&wh65batt=0&batt1=0&batt2=0&batt3=0&soilbatt1=1.4&freq=868M&model=GW1000_Pro
    #
    #A = 868 Mhz GW1000A, B= , C= 433
  -r | --restore)

    unset CONFIGURATION
    typeset -a CONFIGURATION

    if [ -s "$2" ]; then 
      IFS=' '
      while read -r K V; do
        CONFIGURATION["$K"]="$V"
      done <"$2"

      printConfiguration

      sendEcowittInterval "${CONFIGURATION[$CONF_ecowitt_interval]}"
      sendWeatherservice "$CMD_write_wunderground" "${CONFIGURATION[$CONF_wunderground_id]}" "${CONFIGURATION[$CONF_wunderground_password]}"
      sendWeatherservice "$CMD_write_wow"          "${CONFIGURATION[$CONF_wow_id]}"          "${CONFIGURATION[$CONF_wow_password]}"
      sendWeatherservice "$CMD_write_weathercloud" "${CONFIGURATION[$CONF_weathercloud_id]}" "${CONFIGURATION[$CONF_weathercloud_password]}"
      sendCustomized
      sendRaindata "${CONFIGURATION[$CONF_rainday]}" "${CONFIGURATION[$CONF_rainweek]}" "${CONFIGURATION[$CONF_rainmonth]}" "${CONFIGURATION[$CONF_rainyear]}"
      sendSensor
    else
      >&2 echo Error File "$2 does not exists or is not empty";
    fi

    shift 2

    ;;

  -m | --sensor)

    if [ -n "$2" ]; then

          sendPacket "$CMD_read_sensor_id_new" >/dev/null
          #sensortype=search|disable,...
          IFS=","
          read -r -a SENSOR_MANAGEMENT  <<< "$2"
          
          s_disable="disable"
          s_search="search"
          
          for ((n=0;n < ${#SENSOR_MANAGEMENT[@]}; n++)) ; do

                  IFS='='
                  read -r STYPE SID <<< "${SENSOR_MANAGEMENT[$n]}"
                  
                  IFS='-'
                  read -r STYPE_MIN STYPE_MAX <<< "$STYPE" # allow specifying range, for example 1-10=search
                  
                  #https://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash/806923
                  ! [[ $STYPE_MIN =~ ^[0-9]+$ ]] && >&2 echo "$STYPE_MIN is not a sensor type/number"  && continue;
                  [[ -n $STYPE_MAX ]] && ! [[ $STYPE_MAX =~ ^[0-9]+$ ]] && >&2 echo "$STYPE_MAX is not a sensor type/number"  && continue;
                  
                  [[ -z $STYPE_MAX ]] && STYPE_MAX=$STYPE_MIN
                  if [[ "${SID,,}" =~ ^${s_disable:0:${#SID}} ]]; then # 0:length of SID, matched substring, for example d for disable, s for search
                    for (( r=STYPE_MIN; r<= STYPE_MAX; r++ )); do 
                        >&2 echo "Setting sensor type $r to disable $SENSOR_DISABLE" 
                          SENSOR[$r]=$SENSOR_DISABLE
                    done
                  elif [[ "${SID,,}" =~ ^${s_search:0:${#SID}} ]] ; then
                    for (( r=STYPE_MIN; r<= STYPE_MAX; r++ )); do 
                        >&2 echo "Setting sensor type $r to search $SENSOR_SEARCH" 
                          SENSOR[$r]=$SENSOR_SEARCH
                    done
                  else
                    >&2 echo "Error unkown sensor id $SID, use disable or search"
              
                  fi

            done

            updateSensorId

          shift 2
     else
         sendPacket $CMD_read_sensor_id_new
     #     echo >&2 Error no sensor id or range idn-idn+1=disable/search specified
          shift
     fi

     ;;

  -n | --notifyrain)
    runRainNotification "$2" "$3" #tested on GNOME
    shift 3
    ;;

  -s | --scan)
    if which socat >/dev/null; then
      discovery
    else
      Echo >&2 Error socat not found, cannot scan for devices
      return "$ERROR_NO_SOCAT"
    fi
    shift
    ;;

  -z | --customized)

    updateCustomized "$2"
    shift 2
    ;;

  -w | --wifi)
    
    newPacketBody $CMD_write_ssid
    #ssid packet has two byte length
    # TEST wsview android app, wireshark: ffff | 11 |001b| 08536b6f676c756e640d6c756775626572313934322d2e | a9
    #WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/ConfigrouterFragment.java - SaveData
    writeString "$2" # ssid
    writeString "$3" # password
    sendPacket

    shift 3
    ;;

  *)                   # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac

done

((${#POSITIONAL[@]})) && echo >&2 Failed to recognize options "${POSITIONAL[@]}"

set -- "${POSITIONAL[@]}" # restore positional parameters

disconnect

##echo CMD_BROADCAST
#command '\x12\x00\x04\x15' $FD_UDP
#https://unix.stackexchange.com/questions/612193/socat-send-a-udp-broadcast-from-stdin-but-handling-responses-with-system
#echo -ne "\xff\xff\x12\x00\x04\x16" | socat -d -d -x -t 1 - udp-datagram:255.255.255.255:46000,broadcast
