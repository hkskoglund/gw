##!/bin/bash
# example /gw -h 10.42.0.180  -s 3 
# scan for 3 seconds 
# example ./gw -h 10.42.0.180 -c mac
# read mac
# Info  from https://www.xmodulo.com/tcp-udp-socket-bash-shell.html
# Writing CMD_BROADCAST 0x12 to HOST port 46000
# https://brendanzagaeski.appspot.com/0006.html - hexdump examples
#Protocol documentation : https://osswww.ecowitt.net/uploads/20210716/WN1900%20GW1000,1100%20WH2680,2650%20telenet%20v1.6.0%20.pdf (https://www.ecowitt.com/shop/forum/forumDetails/255)

#for debugging
#echo PID "$$"
#read -p "PAUSING"

HTTP_UA_NAME="gw ShellScript"
HTTP_FIRMWARE="http://download.ecowitt.net/down/filewave?v=FirwaveReadme.txt"

DEBUG=1

#COMMANDS AT BYTE 2 ff ff |COMMAND| ...

CMD_READ_PATH=0x51
CMD_WRITE_PATH=0x52

CMD_READ_VERSION=0x50
CMD_REBOOT=0x40
CMD_READ_MAC=0x26
CMD_READ_WUNDERGROUND=0x20
CMD_READ_ECOWITT=0x1e

CMD_READ_CUSTOMIZED=0x2a
CMD_WRITE_CUSTOMIZED=0x2b

CMD_WRITE_SSID=0x11
CMD_BROADCAST=0x12

# PACKET BODY STARTING AT BYTE 2
PACKET_BODY=()

#CONNECT ERRORS
ERROR_TCP_CONNECTION=1
ERROR_UDP_CONNECTION=2
ERROR_READ_RESPOINSE=3

#FILENAME_RXSCAN= 'rxscan'
FILENAME_RXSCAN_SORTED='rxscan_sorted'
FILENAME_COMMAND='txpacket'
FILENAME_RESPONSE='rxpacket'

function connect 
{
  local UDP_SERVER_PORT=46000
  local TCP_SERVER_PORT=45000
  #https://www.gnu.org/software/bash/manual/bash.html - 3.6 Redirections
  exec {FD_UDP}<>/dev/udp/$1/$UDP_SERVER_PORT && echo "Connected $1:$UDP_SERVER_PORT (UDP FD $FD_UDP)"
  [ $? -ne 0 ] && return $ERROR_UDP_CONNECTION

  exec {FD_TCP}<>/dev/tcp/$1/$TCP_SERVER_PORT && echo Connected "$1:$TCP_SERVER_PORT" "(TCP FD $FD_TCP)" 
 
  if [ $? -ne 0 ]; then return $ERROR_TCP_CONNECTION; fi

  #echo Current shell PID $$

  if [ $DEBUG -eq 1 ]; then  netstat -tunp | grep "$$"; fi
  
}

function disconnect
{
  #https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
 #close sockets
  if [ ! -z ${FD_UDP+x} ]; then 
    exec {FD_UDP}>&-
    if [ $? -ne 0 ]; then echo Failed to close $FD_UDP; fi ;
 fi

 if [ ! -z ${FD_TCP+x} ]; then 
  exec {FD_TCP}>&-
  if [ $? -ne 0 ]; then echo Failed to close $FD_TCP; fi 
 fi
}

function result
{
STATUS=${PACKET[4]}
      if [ $STATUS == "00" ]
      then
         echo $1 OK
      else
        echo $1 FAILED
      fi
}

function hexToString 
{
  #not possible to return string in bash,using global HEXTOSTRING
  HEXTOSTRING=""
  NEXT_LENGTH=$(( $1 + 1 + $(( 16#${PACKET[$1]} )) ))

  for ((n=$(( $1 + 1 )); n < $NEXT_LENGTH; n++)); do 
     HEXTOSTRING+=$( echo -en "\x${PACKET[$n]}" )
   done
}

function printCustomizedType
{
  if (( $CUSTOMIZED_TYPE == 1 )) 
    then
      echo Customized type: Wunderground "(1)"
    else
      echo Customized type: Ecowitt "(0)"
    fi
   
}

function printCustomizedEnabled
{
   if (( $CUSTOMIZED_ENABLED == 1 )) 
    then
      echo Customized enabled: 'ON (1)'
    else
      echo Customized enabled: 'OFF (0)'
    fi
}

function printCustomizedId
{
  echo Customized id: $CUSTOMIZED_ID
}

function printCustomizedPassword
{
  echo Customized password : $CUSTOMIZED_PASSWORD
}

function printCustomizedServer
{
  echo Customized server: $CUSTOMIZED_SERVER
}

function printCustomizedInterval
{
   echo Customized interval: $CUSTOMIZED_INTERVAL
}

function printCustomizedPort
{
   echo Customized port: $CUSTOMIZED_PORT
}

function printCustomized
{
  case $1 in
    CUSTOMIZED_ID)
     printCustomizedId 
     ;;
    CUSTOMIZED_PASSWORD)
      printCustomizedPassword
      ;;
    CUSTOMIZED_SERVER)
       printCustomizedServer
       ;;
    CUSTOMIZED_PORT)
       printCustomizedPort
       ;;
    CUSTOMIZED_INTERVAL)
      printCustomizedInterval
      ;;
    CUSTOMIZED_TYPE)
      printCustomizedType
      ;;
    CUSTOMIZED_ENABLED)
      printCustomizedEnabled
      ;;
    *)
     printCustomizedId
     printCustomizedPassword
     printCustomizedServer
     printCustomizedPort
     printCustomizedInterval
     printCustomizedType
     printCustomizedEnabled
     ;;
  esac
  
}

function checkEmptyString
{
  [ -z "$1" ] && echo Warning: "$2" empty 
}

function parsePacket
{
  local response_cmd
response_cmd=0x${PACKET[2]}
  case $response_cmd in
    $CMD_REBOOT)
      result "Reboot"
      ;;
    $CMD_READ_MAC)
        echo RX PACKET ${PACKET[@]}
        printf "MAC %02X:%02X:%02X:%02X:%02X:%02X\n" 0x${PACKET[4]} 0x${PACKET[5]} 0x${PACKET[6]} 0x${PACKET[7]} 0x${PACKET[8]} 0x${PACKET[9]}
     ;;
    $CMD_READ_VERSION)
      hexToString 4
      VERSION=$HEXTOSTRING
      echo Version : $VERSION
        ;;
    $CMD_READ_ECOWITT)
       ECOWITT_INTERVAL=$(( 16#${PACKET[4]} )) 
      echo Ecowitt upload interval: $ECOWITT_INTERVAL minutes
      ;;
    $CMD_READ_WUNDERGROUND)
        hexToString 4
        WUNDERGROUND_STATION_ID=$HEXTOSTRING
        checkEmptyString "$WUNDERGROUND_STATION_ID" "Wunderground station id"
        echo  Wunderground station ID: $WUNDERGROUND_STATION_ID

        hexToString $NEXT_LENGTH
        WUNDERGROUND_PASSWORD=$HEXTOSTRING
        checkEmptyString "$WUNDERGROUND_PASSWORD" "Wunderground password"
        echo  Wunderground password : $WUNDERGROUND_PASSWORD 
        ;;
    $CMD_READ_CUSTOMIZED)
     hexToString 4
        CUSTOMIZED_ID=$HEXTOSTRING
        checkEmptyString "$CUSTOMIZED_ID" "Customized station id"
       
        hexToString $NEXT_LENGTH
        CUSTOMIZED_PASSWORD=$HEXTOSTRING
        checkEmptyString "$CUSTOMIZED_PASSWORD" "Customized password"


        hexToString $NEXT_LENGTH
        CUSTOMIZED_SERVER=$HEXTOSTRING
        checkEmptyString "$CUSTOMIZED_SERVER" "Customized server"
#http://mywiki.wooledge.org/ArithmeticExpression

        CUSTOMIZED_PORT=$(( ( 0x${PACKET[-7]} << 8) | 0x${PACKET[-6]} )) 
        CUSTOMIZED_INTERVAL=$(( ( 0x${PACKET[-5]} << 8) | 0x${PACKET[-4]} )) 
        CUSTOMIZED_TYPE=$(( 0x${PACKET[-3]} ))
        CUSTOMIZED_ENABLED=$(( 0x${PACKET[-2]} ))
     
        printCustomized

      ;;
    $CMD_READ_PATH)
        hexToString 4
        PATH_ECOWITT=$HEXTOSTRING
        checkEmptyString "$PATH_ECOWITT" "Path ecowitt"
        hexToString $NEXT_LENGTH
        PATH_WUNDERGROUND=$HEXTOSTRING
        checkEmptyString "$PATH_WUNDERGROUND" "Path wunderground"
        echo Path ecowitt: $PATH_ECOWITT
        echo Path wunderground: $PATH_WUNDERGROUND
        ;;
     $CMD_WRITE_PATH)
        result "Update path"
        ;;
      $CMD_WRITE_SSID)
        result "Update SSID"
        ;;
      $CMD_BROADCAST)
       
         MAC=$(printf "%02X:%02X:%02X:%02X:%02X:%02X\n" 0x${PACKET[5]} 0x${PACKET[6]} 0x${PACKET[7]} 0x${PACKET[8]} 0x${PACKET[9]} 0x${PACKET[10]})
         IP=$(printf "%d.%d.%d.%d" 0x${PACKET[11]} 0x${PACKET[12]} 0x${PACKET[13]} 0x${PACKET[14]})
         hexToString 17
         SSID=$HEXTOSTRING
         PORT=$(printf "%d" 0x${PACKET[15]}${PACKET[16]})
         echo $MAC $IP:$PORT $SSID
      ;;
     *)
     echo Warning: unable to parse command $response_cmd
     ;;
        
  esac
}

#including checksum byte
function command
{
  local echo_cmd
  local packetLengthLSB
  local packetLengthMSB
  local response_hexdump

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -eq 1 ]
  then
     initPacketCommand $1
  fi

  # Take care of 2 or 1 byte packet length
  case ${PACKET_BODY[0]} in
  $CMD_WRITE_SSID)
     packetLengthLSB=$(( (${#PACKET_BODY[@]} + 1) & 0xff ))
     packetLengthMSB=$(( ( (${#PACKET_BODY[@]} + 1) & 0xff00 ) >> 8 )) 
     PACKET_BODY[1]=$(printf "0x%02x" $packetLengthMSB)
     PACKET_BODY[2]=$(printf "0x%02x" $packetLengthLSB)
     ;;
  *)
      PACKET_BODY[1]=$(printf "0x%02x"  $(( ${#PACKET_BODY[@]} + 1 ))  ) # set packet length including checksum byte
      ;;
  esac

  checksum
  PACKET_TX=(0xff 0xff "${PACKET_BODY[@]}" $CHECKSUM )

  [ $DEBUG -eq 1 ] && echo PACKET_TX ${PACKET_TX[@]//0x/''}

  for (( n=0; n < ${#PACKET_TX[@]}; n++ )); do
    echo_cmd+=${PACKET_TX[$n]}
  done;
  echo_cmd=${echo_cmd//0x/'\x'}

  # write command/read response
  #echo -ne "$echo_cmd" >&$FD_TCP
  echo -ne "$echo_cmd" >$FILENAME_COMMAND
    
  dd if=$FILENAME_COMMAND status=none>&$FD_TCP
  #cat $filename_command >&$FD_TCP
  [ $DEBUG -eq 1 ] && ( echo PACKET TX WRITE STATUS to FD $FD_TCP $?; hexdump -C $FILENAME_COMMAND; echo Compiled command: echo "-ne" "'$echo_cmd'")
  
  dd bs=1024 count=1 status=none <&$FD_TCP >$FILENAME_RESPONSE
  if (( $? != 0 )); then echo Error: Failed to read response; return $ERROR_READ_RESPONSE; fi
  [ $DEBUG -eq 1 ] && ( echo PACKET RX READ STATUS from FD $FD_TCP $?; echo -ne $response_hexdump | hexdump -C)
  
  #Copy response to byte array in hex ff ff .. .. .. 
  response_hexdump=$(hexdump -v -e '/1 "%02x "' $FILENAME_RESPONSE)
  response_hexdump=${response_hexdump::-1} # Remove trailing space https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash
   
   mapfile -d ' ' -t  PACKET <<< $response_hexdump
  
   [ $DEBUG -eq 1 ] && hexdump -C $FILENAME_RESPONSE

   parsePacket

}

function scan
{
  local GW_BROADCAST_PORT=59387
  local rxscan
  local rxscan_sorted
  local packet
  local response_hexdump
  #PACKET_SCAN=()
  #socat UDP-RECV:$GW_BROADCAST_PORT STDOUT | hexdump -v -e '/1 "%02x "'
  echo Listening for broadcast on UDP port $GW_BROADCAST_PORT for weather stations in $SCAN_TIMEOUT seconds...
  #https://stackoverflow.com/questions/687948/timeout-a-command-in-bash-without-unnecessary-delay
  rxscan=$( (timeout $SCAN_TIMEOUT socat UDP-RECV:$GW_BROADCAST_PORT STDOUT ) | hexdump -v -e '/1 "%02x"' )
  #result_sorted=$(echo -en ${result//"ff ff"/"\nff ff"} | sort -u)
  rxscan_sorted=$(echo -en ${rxscan//"ffff"/"\nffff"} | sort -u )
  echo -n "$rxscan_sorted" >$FILENAME_RXSCAN_SORTED

  while read -r line; do
    if [[ "{$line:0:4}" =~ ffff.* ]]; then
     #PACKET=
     response_hexdump=
      for ((n=0;n<${#line};n=n+2)); do 
         response_hexdump+="${line:$n:2} " # insert space between each byte
      done
      #[ $DEBUG -eq 1 ] && echo "$response_hexdump"
      mapfile -d ' ' -t  PACKET <<< $response_hexdump
      #PACKET_SCAN+=( "$response_hexdump" )
      parsePacket
    fi
  done <<< "$rxscan_sorted"
  #echo "${PACKET_SCAN[@]}"
}

function initPacketCommand 
#also add premliminary length, which is updated in command when sending
{
  PACKET_BODY=()
  PACKET_BODY+=("$1" "0x00")
  
   [ ! -z "$1" ] && PACKET_BODY+=("0x00") # Append for two byte packet length
}

function checksum
{
  CHECKSUM=0;
 for (( n=0; n< ${#PACKET_BODY[@]}; n++ )); do
   CHECKSUM=$(( $CHECKSUM + ${PACKET_BODY[$n]} ));
  done
  CHECKSUM=$(printf "0x%x" $(( $CHECKSUM & 0xff )))
  [ $DEBUG -eq 1 ] && echo CHECKSUM $CHECKSUM
}


function writeString
{
  PACKET_BODY+=(   $(printf "0x%02x"  ${#1}) )
  for (( n=0; n < ${#1}; n++ )); do
     PACKET_BODY+=( $(printf "0x%02x" "'${1:$n:1}") )
  done
}

function writeUInt16BE
{
    local MSB=$(printf "0x%02x" $(( ($1 & 0xff00 ) >> 8 )) )
    local LSB=$(printf "0x%02x" $(( $1 & 0x00ff )) )
    PACKET_BODY+=( $MSB $LSB )
}

function writeUInt8
{
  PACKET_BODY+=( $(printf "0x%02x" $1) )
}

function customizedPacket
{
  initPacketCommand $CMD_WRITE_CUSTOMIZED
  writeString $CUSTOMIZED_ID
  writeString $CUSTOMIZED_PASSWORD
  writeString $CUSTOMIZED_SERVER
  writeUInt16BE $CUSTOMIZED_PORT
  writeUInt16BE $CUSTOMIZED_INTERVAL 
  writeUInt8 $CUSTOMIZED_TYPE
  writeUInt8 $CUSTOMIZED_ENABLED
}

function updateCustomized
{
  local needUpdate

   initPacketCommand $CMD_READ_CUSTOMIZED
    COMMAND=customized # Allow parsing in command function
    command
    case $1 in
        CUSTOMIZED_ID)
          [ $CUSTOMIZED_ID != $2 ] && CUSTOMIZED_ID=$2 && needUpdate=1
          ;;
        CUSTOMIZED_PASSWORD)
          [ $CUSTOMIZED_PASSWORD != $2 ] && CUSTOMIZED_PASSWORD=$2 && needUpdate=1
          ;;
        CUSTOMIZED_SERVER)
          [ $CUSTOMIZED_SERVER != $2 ] && CUSTOMIZED_SERVER=$2 && needUpdate=1
          ;;
        CUSTOMIZED_PORT)
          [ $CUSTOMIZED_PORT != $2 ] && CUSTOMIZED_PORT=$2 && needUpdate=1
          ;;
        CUSTOMIZED_TYPE)
          [ $CUSTOMIZED_TYPE != $2 ] && CUSTOMIZED_TYPE=$2 && needUpdate=1
          ;;
        CUSTOMIZED_ENABLED)
          [ $CUSTOMIZED_ENABLED != $2 ] && CUSTOMIZED_ENABLED=$2 && needUpdate=1
          ;;
        CUSTOMIZED_INTERVAL)
          [ $CUSTOMIZED_INTERVAL != $2 ] && CUSTOMIZED_INTERVAL=$2 && needUpdate=1
          ;;
    esac

#https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash
    if (( needUpdate == 1 )); then  
    customizedPacket
    COMMAND=CMD_WRITE_CUSTOMIZED
    command
    result
    printCustomized $1
  else
    echo No update needed for $1
  fi
}

#https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  COMMAND=""
  OPTION=""

  case $key in
    -h|--host)
       HOST="$2" # this arg must come first to open sockets
       #open file descriptors to UDP/TCP port on HOST
       connect $2
       CONNECT_STATUS=$?
       echo CONNECT STATUS $CONNECT_STATUS [ $CONNECT_STATUS -eq 0 ]
       [ "$CONNECT_STATUS" -ne 0 ] && (echo "Failed to connect host $HOST, exiting" ; disconnect; exit $CONNECT_STATUS) 
       shift # past argument
      shift # past value
      ;;
    -c|--command|-r|--read)
      COMMAND="$2"
      shift # past argument
      shift # past value
      ;;
    -s|--scan)
       
       SCAN_TIMEOUT="$2"
       scan
       shift # past argumentS
      shift # past value
      ;;
    -u|--update)
     COMMAND=$key
      OPTION="$2"
      shift
      shift
      ;;
    -f|--firmware)
       curl --silent --show-error --user-agent "$HTTP_UA_NAME" $HTTP_FIRMWARE
       shift
       shift
       ;;
    -l|--listen)
      echo Listening on port $2
      mapfile HTTP_RESPONSE <<< $(nc -l $2)
      for ((n=0; n < ${#HTTP_RESPONSE[@]}; n++ )); do
        echo ${HTTP_RESPONSE[$n]}
      done
      shift
      shift
      ;;
    --wifi-scan)
      sudo nmcli dev wifi rescan; sudo nmcli dev wifi list
      shift
      ;;
      #Connect device, for example GW1000-WIFI????
    --connect)
      sudo nmcli dev wifi connect "$2"
      shift
      ;;
    -a|--address)
      sudo ip address
      shift
      ;;
# Wunderground 
#GET /wundergroundID=testid&PASSWORD=testpassword&tempf=63.0&humidity=82&dewptf=57.4&windchillf=63.0&winddir=355&windspeedmph=3.36&windgustmph=4.47&rainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&solarradiation=206.87&UV=2&indoortempf=74.3&indoorhumidity=61&baromin=29.760&soilmoisture=16&lowbatt=0&dateutc=now&softwaretype=GW1000A_V1.6.8&action=updateraw&realtime=1&rtfreq=5 HTTP/1.0
#Accept: */*
#Host: 192.168.3.174
#Connection: Close


# Ecowitt
#POST /ecowitt HTTP/1.1
#HOST: 192.168.3.174
#Connection: Close
#Content-Type: application/x-www-form-urlencoded
#Content-Length:591 
#
#PASSKEY=976D09F15C41FD8DC6E9A9E8C4F39707&stationtype=GW1000A_V1.6.8&dateutc=2021-08-10+12:08:12&tempinf=74.1&humidityin=61&baromrelin=29.754&baromabsin=29.754&tempf=63.0&humidity=82&winddir=15&windspeedmph=3.80&windgustmph=4.47&maxdailygust=5.82&solarradiation=206.01&uv=2&rainratein=0.000&eventrainin=0.051&hourlyrainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&totalrainin=4.811&temp1f=68.72&humidity1=67&temp2f=72.14&humidity2=63&temp3f=80.24&humidity3=48&soilmoisture1=16&wh65batt=0&batt1=0&batt2=0&batt3=0&soilbatt1=1.4&freq=868M&model=GW1000_Pro
#      
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac

  case $COMMAND in
    reboot)
      command $CMD_REBOOT
      ;;
    mac)
      command $CMD_READ_MAC
      ;;
    version)
      command $CMD_READ_VERSION
      ;;
    ecowitt)
       command $CMD_READ_ECOWITT
      ;;
    wunderground)
      command $CMD_READ_WUNDERGROUND
      ;;
    customized)
      command $CMD_READ_CUSTOMIZED
      ;;
    path)
       command $CMD_READ_PATH
      ;;
      
  esac

  case $OPTION in
   ssid)
     initPacketCommand $CMD_WRITE_SSID
     #ssid packet has two byte length
     # TEST wsview android app, wireshark: ffff | 11 |001b| 08536b6f676c756e640d6c756775626572313934322d2e | a9
     #WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/ConfigrouterFragment.java - SaveData
     writeString $1
     writeString $2
     command
     shift
     shift
     ;;
    path)
      initPacketCommand $CMD_WRITE_PATH
      writeString $1
      writeString $2
      command
      shift # remove ecowitt path
      shift # remove wu path
      ;;
    cport)
       
        updateCustomized CUSTOMIZED_PORT $1
        shift # remove port
        ;; 
    cserver)
       updateCustomized CUSTOMIZED_SERVER $1
       shift
       ;;
    cid)
       updateCustomized CUSTOMIZED_ID $1
       shift
      ;;
    cpassword)
      updateCustomized CUSTOMIZED_PASSWORD $1
      shift
      ;;
    cinterval)
      updateCustomized CUSTOMIZED_INTERVAL $1
      shift
      ;;
    ctype)
      updateCustomized CUSTOMIZED_TYPE $1
      shift
      ;;
    cenabled)
      updateCustomized CUSTOMIZED_ENABLED $1
      shift
      ;;
  esac

  done

  set -- "${POSITIONAL[@]}" # restore positional parameters

  disconnect

##echo CMD_BROADCAST
#command '\x12\x00\x04\x15' $FD_UDP