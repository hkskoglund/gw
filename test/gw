#!/bin/bash
# Utility for configuration of GW-1000
# Only for firmware v1.6.5 or later - for intepretation of battery levels/sensor id new command
# example ./gw -s
# scan for devices
# example ./gw -h 10.42.0.180 -c mac
# read mac

#Documentation:

#Protocol
# https://osswww.ecowitt.net/uploads/20210716/WN1900%20GW1000,1100%20WH2680,2650%20telenet%20v1.6.0%20.pdf (https://www.ecowitt.com/shop/forum/forumDetails/255)
#Shell
# bash
# ksh
# zsh
# mirbsd ksh http://www.mirbsd.org/htman/i386/man1/mksh.htm
#Netcat
#https://en.wikipedia.org/wiki/Netcat
#choosing which nc on fedora (openbsd/nmap)
#sudo alternatives --config nc

#testing in android shell
#adb push gw /sdcard && adb shell "sh  /sdcard/gw -h 192.168.3.80 -c livedata"

# Converting
#inch to mm (1 inch is 25.4mm):
# printf "%s" $(echo "25.4*13.043" | bc)
#farenheit to celcius 
# printf "%s" $(echo "(58.64-32)/1.8" | bc)

#for debugging
#echo PID "$$"
#read -r -p "DEBUG - press key to continue"

#SHELLIFS=$IFS

#https://stackoverflow.com/questions/29968096/get-android-os-version-of-device-connected-via-adb
#testing purpose
#if which getprop 2>/dev/null ; then
#   ANDROID_BUILD_VERSION=$(getprop ro.build.version.release)
#   printenv
#fi

[ -n "$ZSH_VERSION" ] && emulate ksh 
#setopt ksharrays 2>/dev/null # for zsh, force array index start at 0

typeset -i DEBUG
DEBUG=0

DEBUG_OPTIONS_dd='status=none'

typeset -ir NC_NMAP=0
typeset -ir NC_OPENBSD=1
typeset -ir NC_TOYBOX=2

typeset -ir PORT_tcp_command_server=45000
typeset -ir PORT_udp_discovery_server=59387
typeset -ir PORT_udp_discovery_client=46000


typeset -ir CMD_read_version=$(( 0x50 )); #zsh - wont compare int with hex 16#50 in [ ] expression unless converted to decimal, works in [[ ]] expression
typeset -ir CMD_reboot=$(( 0x40 ));
typeset -ir CMD_read_mac=$(( 0x26 )); 
typeset -ir CMD_write_ssid=$(( 0x11 )); 
typeset -ir CMD_broadcast=$(( 0x12 )); 
typeset -ir CMD_write_reset=$(( 0x41 )); 

#weather services
typeset -ir CMD_read_ecowitt_interval=$(( 0x1e )); 
typeset -ir CMD_write_ecowitt_interval=$(( 0x1f )); 

typeset -ir CMD_read_wunderground=$(( 0x20 )); 
typeset -ir CMD_write_wunderground=$(( 0x21 )); 

typeset -ir CMD_read_wow=$(( 0x22 )); 
typeset -ir CMD_write_wow=$(( 0x23 )); 

typeset -ir CMD_read_weathercloud=$(( 0x24 )); 
typeset -ir CMD_write_weathercloud=$(( 0x25 )); 

#customized server for ecowitt/wunderground http requests
typeset -ir CMD_read_customized=$(( 0x2a )); 
typeset -ir CMD_write_customized=$(( 0x2b )); 
typeset -ir CMD_read_path=$(( 0x51 )); 
typeset -ir CMD_write_path=$(( 0x52 )); 

typeset -ir CMD_read_raindata=$(( 0x34 )); 
typeset -ir CMD_write_raindata=$(( 0x35 )); 

typeset -ir CMD_livedata=$(( 0x27 )); 

#sensors
typeset -ir CMD_read_sensor_id=$(( 0x3a )); 
typeset -ir CMD_write_sensor_id=$(( 0x3b )); 
typeset -ir CMD_read_sensor_id_new=$(( 0x3c ));  # for new sensors

typeset -ir CMD_read_system=$(( 0x30 )); 
typeset -ir CMD_write_system=$(( 0x31 ));

typeset -ir CMD_read_calibration=$(( 0x38 ))
typeset -ir CMD_write_calibration=$(( 0x39 ))

typeset -a CMD_NAME

#mapping to name
CMD_NAME[$CMD_read_version]="read version"
CMD_NAME[$CMD_reboot]="reboot"
CMD_NAME[$CMD_read_mac]="read mac"
CMD_NAME[$CMD_write_ssid]="write ssid"
CMD_NAME[$CMD_broadcast]="broadcast"
CMD_NAME[$CMD_write_reset]="reset"

CMD_NAME[$CMD_read_ecowitt_interval]="read ecowitt intervall"
CMD_NAME[$CMD_write_ecowitt_interval]="write ecowitt interval"
CMD_NAME[$CMD_read_wunderground]="read wunderground"
CMD_NAME[$CMD_write_wunderground]="write wunderground"
CMD_NAME[$CMD_read_wow]="read wow"
CMD_NAME[$CMD_write_wow]="write wow"
CMD_NAME[$CMD_read_weathercloud]="read weathercloud"
CMD_NAME[$CMD_write_weathercloud]="write weathercloud"

CMD_NAME[$CMD_read_customized]="read customized"
CMD_NAME[$CMD_write_customized]="write customized"
CMD_NAME[$CMD_read_path]="read path"
CMD_NAME[$CMD_write_path]="write path"

CMD_NAME[$CMD_read_raindata]="read raindata"
CMD_NAME[$CMD_write_raindata]="write raindata"

CMD_NAME[$CMD_livedata]="livedata"

CMD_NAME[$CMD_read_sensor_id]="read sensor id"
CMD_NAME[$CMD_write_sensor_id]="write sensor id"
CMD_NAME[$CMD_read_sensor_id_new]="read sensor id new"

CMD_NAME[$CMD_read_system]="read system"
CMD_NAME[$CMD_write_system]="write system"

CMD_NAME[$CMD_read_calibration]="read calibration"
CMD_NAME[$CMD_write_calibration]="write calibration"

typeset -ir SYSTEM_FREQUENCY_RFM433M=0 # 433MHz
typeset -ir SYSTEM_FREQUENCY_RFM868M=1 # 868Mhz
typeset -ir SYSTEM_FREQUENCY_RFM915M=2 # 915MHz
typeset -ir SYSTEM_FREQUENCY_RFM920M=4 # 920Mhz

typeset -ir SYSTEM_SENSOR_TYPE_WH24=0
typeset -ir SYSTEM_SENSOR_TYPE_WH65=1

typeset -a SYSTEM_TIMEZONE #initTimezones

#sensors

#https://www.wxforum.net/index.php?topic=40730.0
if [[ $KSH_VERSION = *MIRBSD?KSH* ]]; then
   typeset -irU  SENSOR_SEARCH=$(( 0xffffffff ))
   typeset -irU SENSOR_DISABLE=$(( 0xfffffffe ))
# mksh - sets 0xffffffff to -1!? if typeset -i SENSOR_SEARCH=0xffffffff - its using 32-bit signed integer by default unless typeset -iU is used
   typeset -iU VALUE_UINT32BE #force to unsigned 32-bit int (-U option)
   typeset -iU VALUE_UINT16BE
   typeset -iU VALUE_UINT8
else
  typeset -r SENSOR_SEARCH=$(( 0xffffffff ))
  typeset -r SENSOR_DISABLE=$(( 0xfffffffe ))
  #ksh typeset option -iu for usigned int https://docstore.mik.ua/orelly/unix3/korn/appb_07.htm
fi

typeset -ir WH24_type=$(( 0x00 ))
typeset -ir WH65_type=$(( 0x00 ))
typeset -ir WH68_type=$(( 0x01 ))
typeset -ir WH80_type=$(( 0x02 ))
typeset -ir WH40_type=$(( 0x03 ))

typeset -ir WH32_type=$(( 0x05 ))

typeset -ir WH31_type=$(( 0x06 ))
typeset -ir WH31_max_ch=8

typeset -ir WH51_type=$(( 0x0e ))
typeset -ir WH51_max_ch=8

#Probably: cmd sensor_id up to 0x1e sensors type, and sensor_id_new from 0x1f (31)
typeset -ir WH55_type=$(( 0x1b ))
typeset -ir WH55_max_ch=4

typeset -ir WH43_type=$(( 0x16 ))
typeset -ir WH43_max_ch=4

typeset -ir WH57_type=$(( 0x1a ))

typeset -ir WH34_type=$(( 0x1f ))
typeset -ir WH34_max_ch=8

typeset -ir WH35_type=$(( 0x28 ))
typeset -ir WH35_max_ch=8

typeset -ir WH45_type=$(( 0x27 ))

typeset -ir SENSORTYPE_MAX=47

typeset -a SENSOR_TYPE

#type:description:reportinginterval(s):max reportinterval:detection interval
SENSOR_TYPE[WH65_type]="WH65:Outdoor Solar Powered 7-in-1 Weather Sensor:16.0:"
SENSOR_TYPE[WH68_type]="WH68:Solar Powered Anemometer with Light and UV Sensor:16.5:"
SENSOR_TYPE[WH80_type]="WH80:Wind Speed/Direction, Solar Radiation/Light, Temp/Humidity:4.75:"
SENSOR_TYPE[WH40_type]="WH40:Self-Emptying Rain Collector Rainfall Sensor:49.0"
SENSOR_TYPE[WH32_type]="WH32:Outdoor Temperature and Humidity Sensor:64.0"
SENSOR_TYPE[WH57_type]="WH57:Lightning Detection Sensor:79.0:"
SENSOR_TYPE[WH45_type]="WH45:Indoor CO2 PM2.5 PM10 Temperature and Humidity:60.0:600"

#sensors with max 8 channels
typeset -i CH
CH=1
while [ "$CH" -le $WH31_max_ch ]; do 
   SENSOR_TYPE[$(( WH31_type + CH - 1 ))]="WH31:Temperature and humidity CH$CH:61.0:"
   SENSOR_TYPE[$(( WH51_type + CH - 1 ))]="WH51:Soil Moisture CH$CH:70.0:"
   SENSOR_TYPE[$(( WH34_type + CH - 1 ))]="WH34:Soil Temperature CH$CH:77.0"
   SENSOR_TYPE[$(( WH35_type + CH - 1 ))]="WH35:Leaf Wetness CH$CH:79.5"
   if [ $CH -le $WH55_max_ch ]; then
      SENSOR_TYPE[$(( WH43_type + CH - 1 ))]="WH43:PM2.5 Air Quality Indoor CH$CH:60.0:600.0"
      SENSOR_TYPE[$(( WH55_type + CH - 1 ))]="WH55:Water Leak CH$CH:60.0::3"
   fi
   CH=$((CH + 1))
done

typeset -a LIVEDATA

typeset -a LIVEDATA_FIELD
                      #name:description:unit:bytes:scaling/10:signedint
LIVEDATA_FIELD[0x01]="INTEMP:indoor temperature:C:2:1:1"
LIVEDATA_FIELD[0x02]="OUTTEMP:outdoor temperature:C:2:1:1"
LIVEDATA_FIELD[0x06]="INHUMI:indoor humidity:%:1:0"
LIVEDATA_FIELD[0x07]="OUTHUMI:outdoor humidity:%:1:0"
LIVEDATA_FIELD[0x08]="ABSBARO:absolute pressure:hpa:2:1"
LIVEDATA_FIELD[0x09]="RELBARO:relative pressure:hpa:2:1"
LIVEDATA_FIELD[0x0A]="WINDDIRECTION:wind direction:°:2:0"
LIVEDATA_FIELD[0x0B]="WINDSPEED:wind speed:m/s:2:1"
LIVEDATA_FIELD[0x19]="WINDGUSTDAILYMAX:wind gust daily max:m/s:2:1"
LIVEDATA_FIELD[0x0C]="WINDGUST:wind gust:m/s:2:1"
LIVEDATA_FIELD[0x0D]="RAINEVENT:rain event:mm:2:1"
LIVEDATA_FIELD[0x0E]="RAINRATE:rain rate:mm/h:2:1"
LIVEDATA_FIELD[0x0F]="RAINHOUR:rain hour:mm:2:1"
LIVEDATA_FIELD[0x10]="RAINDAILY:rain daily:mm:2:1"
LIVEDATA_FIELD[0x11]="RAINWEEK:rain week:mm:2:1"
LIVEDATA_FIELD[0x12]="RAINMONTH:rain month:mm:4:1"
LIVEDATA_FIELD[0x13]="RAINYEAR:rain year:mm:4:1"
LIVEDATA_FIELD[0x15]="LIGHT:light:lx:4:1" # lux=lumen/m2
LIVEDATA_FIELD[0x16]="UV:UV radiation:µW/m2:2:1"
LIVEDATA_FIELD[0x17]="UVI:UV index (0-15)::1:0"

LIVEDATA_FIELD[0x60]="LIGHTNING:lightning distance (1-40km):km:1:0"
typeset -i LDF_LIGHTNING_TIME=$(( 0x61 ))
LIVEDATA_FIELD[LDF_LIGHTNING_TIME]="LIGHTNING_TIME:lightning utc time:utc:4:0"
LIVEDATA_FIELD[0x62]="LIGHTNING_POWER:lightning power::4:0"

typeset -i LDF_SENSOR_CO2=$(( 0x70 ))
LIVEDATA_FIELD[LDF_SENSOR_CO2]="CO2:co2 pm2.5 pm10 temperature::16:0" #  parsing of livedata for this sensor 32 hexdigits

LDFT_WH43=0x2A
LDFT_WH43_24AVG=0x4D
LDFT_WH51=0x2B
LDFT_WH31_TEMP=0x1A
LDFT_WH31_HUMI=0x22
LDFT_WH55=0x58
LDFT_WH34=0x72
CH=1

while [ "$CH" -le 8 ]; do 
#for ((, CH=1;CH<=4; CH++, LDFT++,LDFT2++ )); do
  
  if [ "$CH" -le $WH43_max_ch ]; then 
        if [ "$CH" -eq 2 ]; then LDFT_WH43=$((0x51)); fi

        LIVEDATA_FIELD[$LDFT_WH43]="PM25_CH$CH:PM2.5 air quality CH$CH:μg/m3:2:1"
        LIVEDATA_FIELD[$LDFT_WH43_24AVG]="PM25_24HAVG_CH$CH:PM2.5 24h average CH$CH:μg/m3:2:1"
        LDFT_WH43=$(( LDFT_WH43 + 1))
        LDFT_WH43_24AVG=$(( LDFT_WH43_24AVG + 1))
  fi

  if [ "$CH" -le $WH51_max_ch ]; then 
   LIVEDATA_FIELD[$LDFT_WH51]="SOILTEMP_CH${CH}:soil temperature CH$CH:C:2:1:1"
   LIVEDATA_FIELD[$(( LDFT_WH51 + 1 ))]=SOILHUMI_CH$CH":soil humidity CH$CH"":%:1:0"
   LDFT_WH51=$(( LDFT_WH51 + 2))
  fi 

  if [ "$CH" -le $WH31_max_ch ]; then 
     LIVEDATA_FIELD[$LDFT_WH31_TEMP]="TEMP_CH$CH:temperature CH$CH:C:2:1:1"
     LIVEDATA_FIELD[$LDFT_WH31_HUMI]="HUMI_CH$CH:humidity CH$CH:%:1:0"
     LDFT_WH31_TEMP=$(( LDFT_WH31_TEMP + 1 ))
     LDFT_WH31_HUMI=$(( LDFT_WH31_HUMI + 1 ))
  fi

  if [ "$CH" -le $WH55_max_ch ]; then
     LIVEDATA_FIELD[$LDFT_WH55]="LEAK_CH$CH:leak CH$CH::1:0"
    LDFT_WH55=$(( LDFT_WH55 + 1 ))
  fi 

  if [ "$CH" -le $WH34_max_ch ]; then
     LIVEDATA_FIELD[$LDFT_WH34]="LEAF_WETNESS_CH$CH:leaf wetness CH$CH::1:0"
    LDFT_WH34=$(( LDFT_WH34 + 1 ))
  fi 

  CH=$(( CH + 1 ))

done

CONFIGURATION_SENSORFIELD="sensortype_"

#mapping from livedata field type/decimal to rename of description (specified in configuration file)
typeset -a LIVEDATA_FIELDRENAME
# fieldtypes discovered/parsed in livedata from host
typeset -a LDF_DISCOVERED 

#CONNECT ERRORS
ERROR_CONNECTION=1
ERROR_NO_NMCLI=2
ERROR_NC_UDP_SCAN_UNAVAILABLE=3
ERROR_RAINDATA_NOTSPECIFIED=4
ERROR_SYSTEMPARAM_NOTSPECIFIED=5
ERROR_NO_NC=6

typeset -a CONFIGURATION
typeset -a CONFIGURATION_INDEX
#CONFIGURATION_INDEX array contains indexes to CONFIGURAITION with values
#CONFIGURATION_SENSOR[sensortype]=sensorid
typeset -a CONFIGURATION_SENSOR
typeset -a CONFIGURATION_SENSOR_INDEX
#CONFIGURATION_SENSOR_TYPE array contains indexes to CONFIGURATION_SENSOR with values
#if typeset -A ASSOCIATIVE_ARRAY 2>/dev/null; then # is easier to use, otherwise two arrays
#  SUPPORT_ASSOCIATIVE_ARRAY=1
#  unset ASSOCIATIVE_ARRAY
#fi

typeset -ir CONF_broadcast_ip=0
typeset -ir CONF_broadcast_mac=1
typeset -ir CONF_broadcast_port=2
typeset -ir CONF_broadcast_ssid=3
typeset -ir CONF_broadcast_version=4

typeset -ir CONF_customized_ecowitt_path=5
typeset -ir CONF_customized_enabled=6
typeset -ir CONF_customized_id=7
typeset -ir CONF_customized_interval=8
typeset -ir CONF_customized_password=9
typeset -ir CONF_customized_port=10
typeset -ir CONF_customized_server=11
typeset -ir CONF_customized_type=12
typeset -ir CONF_customized_wunderground_path=13

typeset -ir CONF_ecowitt_interval=14

typeset -ir CONF_host=15
typeset -ir CONF_mac=16

typeset -ir CONF_raindaily=17
typeset -ir CONF_rainmonth=18
typeset -ir CONF_rainrate=19
typeset -ir CONF_rainweek=20
typeset -ir CONF_rainyear=21

typeset -ir CONF_system_dst_status=22
typeset -ir CONF_system_dst_status_bit=23
typeset -ir CONF_system_dst_status_state=24
typeset -ir CONF_system_frequency=25
typeset -ir CONF_system_frequency_state=26
typeset -ir CONF_system_sensor_type=27
typeset -ir CONF_system_sensor_type_state=28
typeset -ir CONF_system_timezone_auto_bit=29
typeset -ir CONF_system_timezone_auto_state=30
typeset -ir CONF_system_timezone_index=31
typeset -ir CONF_system_timezone_index_state=32
typeset -ir CONF_system_utc=33
typeset -ir CONF_system_utc_state=34

typeset -ir CONF_version=35

typeset -ir CONF_weathercloud_id=36
typeset -ir CONF_weathercloud_password=37
typeset -ir CONF_wow_id=38
typeset -ir CONF_wow_password=39
typeset -ir CONF_wunderground_id=40
typeset -ir CONF_wunderground_password=41

typeset -ir CONF_calibration_intempoffset=42
typeset -ir CONF_calibration_inhumidityoffset=43
typeset -ir CONF_calibration_absoffset=44
typeset -ir CONF_calibration_reloffset=45
typeset -ir CONF_calibration_outtempoffset=46
typeset -ir CONF_calibration_outhumidityoffset=47
typeset -ir CONF_calibration_windiroffset=48

typeset -a CONFIGURATION_NAME #allow reverse mapping from property to index -> make backup file readable/editable
CONFIGURATION_NAME[CONF_broadcast_ip]="broadcast_ip"
CONFIGURATION_NAME[CONF_broadcast_mac]="broadcast_mac"
CONFIGURATION_NAME[CONF_broadcast_port]="broadcast_port"
CONFIGURATION_NAME[CONF_broadcast_ssid]="broadcast_ssid"
CONFIGURATION_NAME[CONF_broadcast_version]="broadcast_version"
CONFIGURATION_NAME[CONF_customized_ecowitt_path]="customized_ecowitt_path"
CONFIGURATION_NAME[CONF_customized_enabled]="customized_enabled"
CONFIGURATION_NAME[CONF_customized_id]="customized_id"
CONFIGURATION_NAME[CONF_customized_interval]="customized_interval"
CONFIGURATION_NAME[CONF_customized_password]="customized password"
CONFIGURATION_NAME[CONF_customized_port]="customized_port"
CONFIGURATION_NAME[CONF_customized_server]="customized_server"
CONFIGURATION_NAME[CONF_customized_type]="customized_type"
CONFIGURATION_NAME[CONF_customized_wunderground_path]="customized_wunderground_path"
CONFIGURATION_NAME[CONF_ecowitt_interval]="ecowitt_interval"
CONFIGURATION_NAME[CONF_host]="host"
CONFIGURATION_NAME[CONF_mac]="mac"
CONFIGURATION_NAME[CONF_rainrate]="rainrate"
CONFIGURATION_NAME[CONF_raindaily]="raindaily"
CONFIGURATION_NAME[CONF_rainweek]="rainweek"
CONFIGURATION_NAME[CONF_rainmonth]="rainmonth"
CONFIGURATION_NAME[CONF_rainyear]="rainyear"
CONFIGURATION_NAME[CONF_system_dst_status]="system_dst_status"
CONFIGURATION_NAME[CONF_system_dst_status_bit]="system_dst_status_bit"
CONFIGURATION_NAME[CONF_system_dst_status_state]="system_dst_status_state"
CONFIGURATION_NAME[CONF_system_frequency]="system_frequency"
CONFIGURATION_NAME[CONF_system_frequency_state]="system_frequency_state"
CONFIGURATION_NAME[CONF_system_sensor_type]="system_sensor_type"
CONFIGURATION_NAME[CONF_system_sensor_type_state]="system_sensor_type_state"
CONFIGURATION_NAME[CONF_system_timezone_auto_bit]="system_timezone_auto_bit"
CONFIGURATION_NAME[CONF_system_timezone_auto_state]="system_timezone_auto_state"
CONFIGURATION_NAME[CONF_system_timezone_index]="system_timezone_index"
CONFIGURATION_NAME[CONF_system_timezone_index_state]="system_timezone_index_state"
CONFIGURATION_NAME[CONF_system_utc]="system_utc"
CONFIGURATION_NAME[CONF_system_utc_state]="system_utc_state"
CONFIGURATION_NAME[CONF_version]="version"
CONFIGURATION_NAME[CONF_weathercloud_id]="weathercloud_id"
CONFIGURATION_NAME[CONF_weathercloud_password]="weathercloud_password"
CONFIGURATION_NAME[CONF_wow_id]="wow_id"
CONFIGURATION_NAME[CONF_wow_password]="wow_password"
CONFIGURATION_NAME[CONF_wunderground_id]="wunderground_id"
CONFIGURATION_NAME[CONF_wunderground_password]="wunderground_password"
CONFIGURATION_NAME[CONF_calibration_intempoffset]="calibration_intempoffset"
CONFIGURATION_NAME[CONF_calibration_inhumidityoffset]="calibration_intempoffset"
CONFIGURATION_NAME[CONF_calibration_absoffset]="calibration_absoffset"
CONFIGURATION_NAME[CONF_calibration_reloffset]="calibration_reloffset"
CONFIGURATION_NAME[CONF_calibration_outtempoffset]="calibration_outtempoffset"
CONFIGURATION_NAME[CONF_calibration_outhumidityoffset]="calibration_outhumidityoffset"
CONFIGURATION_NAME[CONF_calibration_windiroffset]="calibration_windiroffset"


# getCommandName ()
#$1 - cmd
# {
#  if [$(( $cmd)) -eq $CMD_read_version ]; then
#   CMD_NAME="read version"
#}

 listLivedataFieldsAndDescription ()
# $1 - if non-zero list only active fields found during parsing of livedata, else list all known fields
{
  typeset fn #using typeset instead of local which isnt available in ksh https://stackoverflow.com/questions/12000949/scope-of-variables-in-ksh
  typeset fd
  typeset fk
  
  IFS=' '
  
  if [ -n "$1" ]; then
   fk="${LDF_DISCOVERED[*]}" # works for zsh
  elif [ -z "$ZSH_VERSION" ]; then
   fk=${!LIVEDATA_FIELD[*]} # !  all keys, except zsh which expands all values
  fi

  printf "%4s %-16s %s\n" "type" "name" "description"

  for k in $fk; do
    IFS=':'
   if [ -n "$1" ] || [ -z "$ZSH_VERSION" ]; then
      read -r fn fd DISCARD <<< "${LIVEDATA_FIELD[$k]}"
   elif [ -n "$ZSH_VERSION" ]; then
      read -r fn fd DISCARD <<< "$k"
   fi   
    printf "%4d %-16s %s\n" "$k" "$fn" "$fd"
  done
}

 connect () {
  # Info  from https://www.xmodulo.com/tcp-udp-socket-bash-shell.html
  typeset host
  host="$1"

  if [ -v FD_TCP ] || [ -v FD_UDP ]; then # True if the shell variable varname is set (has been assigned a value). - man bash
    [ $DEBUG -eq 1 ] && echo >&2 "$HOST_PREV closing connection"
    disconnect
  fi

  #https://www.gnu.org/software/bash/manual/bash.html - 3.6 Redirections
  if exec {FD_UDP}<>/dev/udp/"$host"/"$PORT_udp_discovery_client"; then
    [ $DEBUG -eq 1 ] && echo >&2 "$host:$PORT_udp_discovery_client Connected (UDP FD $FD_UDP)"
  else
    return $ERROR_CONNECTION
  fi

  if exec {FD_TCP}<>/dev/tcp/"$host"/"$PORT_tcp_command_server"; then
    [ $DEBUG -eq 1 ] && echo >&2 "$host:$PORT_tcp_command_server Connected (TCP FD $FD_TCP)"
  else
    return $ERROR_CONNECTION
  fi

  #Current shell PID $$

  if [ $DEBUG -eq 1 ]; then
    netstat -tunp | grep "$$"
  fi

  [ -v FD_TCP ] && [ -v FD_UDP ]

}

 disconnect () {
  #https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
  #close sockets
  if [ -v FD_UDP ]; then

    if ! exec {FD_UDP}>&-; then echo >&2 Failed to close $FD_UDP; fi
    [ $DEBUG -eq 1 ] && echo >&2 "Closing FD $FD_UDP (UDP)"

    unset FD_UDP
  fi

  if [ -v FD_TCP ]; then

    if ! exec {FD_TCP}>&-; then echo >&2 Failed to close $FD_TCP; fi
    [ $DEBUG -eq 1 ] && echo >&2 "Closing FD $FD_TCP (TCP)"

    unset FD_TCP
  fi
}

 parseResultPacket () {
  typeset -i cmd
  cmd=$(( 0x${PACKET_RX[2]} ))
  typeset -i result

  result=$(( 0x${PACKET_RX[4]} ))
  printf "%s %s" "${CMD_NAME[cmd]}" "$result" >&2
  
  if [ $result -eq  0 ]; then
   >&2  echo " OK"
    return 0 
  elif [ $result  -eq 1 ]; then
    >&2 echo " FAIL"
    return 1
  fi
}

 printStack () {
  if [ -n "$BASH_VERSION" ]; then 
    echo "${FUNCNAME[@]}"
  fi
}

 printCustomized () {
  printf "%16s %s\n" "id" "$C_WS_CUSTOMIZED_ID"
  printf "%16s %s\n" "password" "$C_WS_CUSTOMIZED_PASSWORD"
  printf "%16s %s\n" "server" "$C_WS_CUSTOMIZED_SERVER"
  printf "%16s %d\n" "port" "$C_WS_CUSTOMIZED_PORT"
  printf "%16s %d\n" "interval" "$C_WS_CUSTOMIZED_INTERVAL"
  printf "%16s %d %s\n" "type" "$C_WS_CUSTOMIZED_TYPE" "$C_WS_CUSTOMIZED_TYPE_STATE"
  printf "%16s %d %s\n" "enabled" "$C_WS_CUSTOMIZED_ENABLED" "$C_WS_CUSTOMIZED_ENABLED_STATE"
  printf "%16s %s\n" "pathecowitt" "$C_WS_CUSTOMIZED_PATH_ECOWITT" 
  printf "%16s %s\n" "pathwunderground" "$C_WS_CUSTOMIZED_PATH_WU" 
 
}

 printConfiguration () {
typeset K
#typeset -i n
 #bash  for K in "${!CONFIGURATION[@]}"; do

 #n=0
 #while [ $n -lt ${#CONFIGURATION[@] ]

  if [ "${#CONFIGURATION_INDEX[@]}" -gt 0 ]; then 
    for K in  "${CONFIGURATION_INDEX[@]}"; do
      printf "%-30s %s\n" "${CONFIGURATION_NAME[$K]}" "${CONFIGURATION[$K]}" 
    done
  fi

  IFS=':'
  if [ "${#CONFIGURATION_SENSOR_INDEX[@]}" -gt 0 ]; then 
      for K in  "${CONFIGURATION_SENSOR_INDEX[@]}"; do
          read -r SNAME SDESC DISCARD <<< "${SENSOR_TYPE[$K]}"
          decToHex "${CONFIGURATION_SENSOR[$K]}"
          printf "%-30s %10s %s\n"  "$CONFIGURATION_SENSORFIELD$K" "$VALUE_HEX" "$SDESC" 
      done
  fi

}

 readUInt8 () {
  #VALUE_UINT8_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):2}"
  VALUE_UINT8=$(( 0x${PACKET_RX[$RX_POS ]} ))

  RX_POS=$(( RX_POS + 1 ))
}

 readInt8 ()
#$1 - decimal
{
  typeset hexstr

  if [ -n "$1" ]; then
    hexstr=$1
  else
    hexstr="0x${PACKET_RX_HEX:(($RX_POS * 2)):2}"
  fi
  #VALUE_INT8_HEX=$hexstr
  VALUE_INT8=$(( -1 * ( hexstr >> 7) * 0x80 + ( hexstr & 0x7f ) ))

  if [ -z "$1" ]; then
    RX_POS=$(( RX_POS + 1 ))
  fi
}

 readUInt16BE () {
  #VALUE_UINT16BE_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):4}"
  VALUE_UINT16BE=$(( (0x${PACKET_RX[$RX_POS]} << 8) |  0x${PACKET_RX[$RX_POS + 1]} ))
 
  RX_POS=$(( RX_POS + 2 ))
}

 readInt16BE ()
#$1 - decimal
#2's complement big endian
#msb is the sign bit
#test cmd: n=0; while [ "$n" -lt $(( 1 << 16 )) ]; do readInt16BE $(printf "%x" $n); echo $n $VALUE_INT16BE; n=$(( n + 1 )); done 
{
  typeset hexstr

  if [ -n "$1" ]; then
    hexstr=$1
  else
    hexstr="0x${PACKET_RX_HEX:(($RX_POS * 2)):4}"
  fi
  #VALUE_INT16BE_HEX=$hexstr
  #Converting from two's complement representation
  #https://en.wikipedia.org/wiki/Two%27s_complement
  VALUE_INT16BE=$(( -1* ( hexstr >> 15) * 0x8000 +  ( hexstr & 0x7fff ) ))
  if [ -z "$1" ]; then
     RX_POS=$(( RX_POS + 2 ))
  fi
}

 readUInt32BE () {
  VALUE_UINT32BE_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):8}"
  VALUE_UINT32BE=$(( (0x${PACKET_RX[$RX_POS ]} << 24) | (0x${PACKET_RX[$RX_POS + 1 ]} << 16)  | (0x${PACKET_RX[$RX_POS + 2 ]} << 8) |  0x${PACKET_RX[$RX_POS + 3]} ))
  RX_POS=$(( RX_POS + 4 ))
}


 readInt32BE ()
#$1 decimal
#2's complement big endian
#msb is the sign bit
{
  typeset hexstr

  if [ -n "$1" ]; then
    hexstr=$1
  else
     hexstr="0x${PACKET_RX_HEX:(($RX_POS * 2)):8}"
  fi
  #VALUE_INT32BE_HEX=$hexstr
  VALUE_INT32BE=$(( -1* ( hexstr >> 31) * 0x80000000 +   ( hexstr & 0x7fffffff ) ))
  if [ -z "$1" ]; then
    RX_POS=$(( RX_POS + 4 ))
  fi
}

 readString () {
  typeset -i len
  len=0x${PACKET_RX[$RX_POS]}
  typeset n
  n=1
  #VALUE_STRING="${PACKET_RX_OD_ASCII:(($RX_POS + 1)):len}"
  unset VALUE_STRING
  while [ "$n" -le $(( len )) ]; do
      VALUE_STRING=$VALUE_STRING"\x${PACKET_RX[$RX_POS + $n]}"
      n=$(( n + 1 ))
  done
  # shellcheck disable=SC2059
  VALUE_STRING=$(printf "$VALUE_STRING")

  RX_POS=$(( RX_POS + len + 1 ))
}

 readHex ()
#$1 - length in bytes
{
  # PACKET_RX_HEX : string of hex bytes ffff...<checksum>
  VALUE_HEX_STRING=${PACKET_RX_HEX:(($RX_POS * 2)):$(( $1 * 2 ))}
  RX_POS=$(( RX_POS + $1 + 1))
}

 printCalibration ()
#for sensor array
{
  typeset intempoffset
  typeset inhumidityoffset
  typeset absoffset
  typeset reloffset
  typeset outtempoffset
  typeset outhumidityoffset
  typeset windiroffset

  readInt16BE "${CONFIGURATION[$CONF_calibration_intempoffset]}" # convert to signed int intepretation
  convertScale10ToFloat "$VALUE_INT16BE"
  intempoffset=$VALUE_SCALE10_FLOAT
   
   readInt8 "${CONFIGURATION[$CONF_calibration_inhumidityoffset]}"
  inhumidityoffset=$VALUE_INT8

  readInt32BE "${CONFIGURATION[$CONF_calibration_absoffset]}"
  convertScale10ToFloat "$VALUE_INT32BE"
  absoffset=$VALUE_SCALE10_FLOAT

  readInt32BE "${CONFIGURATION[$CONF_calibration_reloffset]}"
  convertScale10ToFloat "$VALUE_INT32BE"
  reloffset=$VALUE_SCALE10_FLOAT

  readInt16BE "${CONFIGURATION[$CONF_calibration_outtempoffset]}"
  convertScale10ToFloat "$VALUE_INT16BE"
  outtempoffset=$VALUE_SCALE10_FLOAT
  
  readInt8 "${CONFIGURATION[$CONF_calibration_outhumidityoffset]}"
  outhumidityoffset=$VALUE_INT8
  
  readInt16BE "${CONFIGURATION[$CONF_calibration_windiroffset]}"
  windiroffset=$VALUE_INT16BE

  printf "%12s %16s %12s %12s %12s %12s %12s\n" intempoffset inhumidityoffset absoffset reloffset outtempoffset outhumidityoffset windiroffset

  printf "%12s %16s %12s %12s %12s %12s %12s\n" "$intempoffset" "$inhumidityoffset" "$absoffset" "$reloffset" "$outtempoffset" "$outhumidityoffset" "$windiroffset"
}

 printRain () {
  typeset rr
  typeset rd
  typeset rw
  typeset rm
  typeset ry
  convertScale10ToFloat "$C_RAINRATE"
  rr=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "$C_RAINDAILY"
  rd=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "$C_RAINWEEK"
  rw=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "$C_RAINMONTH"
  rm=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "$C_RAINYEAR"
  ry=$VALUE_SCALE10_FLOAT
  
  printf "%9s %7s\n" rainrate  "$rr"
  printf "%9s %7s\n" raindaily "$rd"
  printf "%9s %7s\n" rainweek  "$rw"
  printf "%9s %7s\n" rainmonth "$rm"
  printf "%9s %7s\n" rainyear  "$ry"
  #echo "rainrate $rr rainday $rd rainweek $rw rainmonth $rm rainyear $ry"
 # printf "%9s %9s %9s %9s %9s\n" rainrate rainday rainweek rainmonth rainyear
  #printf "%9s %9s %9s %9s %9s\n" "$rr" "$rd" "$rw" "$rm" "$ry"
}

 convertWindDirectionToCompassDirection ()
#$1 - direction in degrees
#http://snowfence.umn.edu/Components/winddirectionanddegrees.htm
{
  VALUE_COMPASS_DIRECTION_NAME=""
  if   [ "$1" -le 11 ] || [  "$1" -gt 349 ]; then
    VALUE_COMPASS_DIRECTION_NAME="N"
  elif [ "$1" -gt 11 ] && [  "$1" -lt 34 ]; then
    VALUE_COMPASS_DIRECTION_NAME="NNE"
  elif [ "$1" -ge 34 ] && [  "$1" -le 56 ]; then
    VALUE_COMPASS_DIRECTION_NAME="NE";
  elif [ "$1" -gt 56 ] && [  "$1" -le  79 ]; then
    VALUE_COMPASS_DIRECTION_NAME="ENE";
  elif [ "$1" -gt  79 ] && [  "$1" -le  101 ]; then
    VALUE_COMPASS_DIRECTION_NAME="E"
  elif [ "$1" -gt  101 ] && [  "$1" -le  124 ]; then
    VALUE_COMPASS_DIRECTION_NAME="ESE"
  elif [ "$1" -gt  124 ] && [ "$1" -le  146 ]; then
    VALUE_COMPASS_DIRECTION_NAME="SE"
  elif [ "$1" -gt  146 ] && [  "$1" -le  169 ]; then
    VALUE_COMPASS_DIRECTION_NAME="SSE"
  elif [ "$1" -gt  169 ] && [  "$1" -le  191 ]; then
    VALUE_COMPASS_DIRECTION_NAME="S"
  elif [ "$1" -gt  191 ] && [  "$1" -le  214 ]; then
    VALUE_COMPASS_DIRECTION_NAME="SSW"
  elif [ "$1" -gt  214 ] && [  "$1" -le  236 ]; then
    VALUE_COMPASS_DIRECTION_NAME="SW"
  elif [ "$1" -gt  236 ] && [  "$1" -le  259 ]; then
     VALUE_COMPASS_DIRECTION_NAME="WSW"
  elif [ "$1" -gt  259 ] && [  "$1" -le  281 ]; then
     VALUE_COMPASS_DIRECTION_NAME="W"
  elif [ "$1" -gt  281 ] && [  "$1" -le  304 ]; then
     VALUE_COMPASS_DIRECTION_NAME="WNW"
  elif [ "$1" -gt  304 ] && [  "$1" -le  326 ]; then
     VALUE_COMPASS_DIRECTION_NAME="NW"
  elif [ "$1" -gt  326 ] && [  "$1" -le  349 ]; then
     VALUE_COMPASS_DIRECTION_NAME="NNW"
  fi
}

 getBatteryLevelState ()
# $1 - battery level 0-6, 6 = dc, <=1 low
{
  typeset -i max_battery_level
  max_battery_level=6

  unset SBATTERY_STATE
 
  if [ "$1" -gt "$max_battery_level" ]; then
    return 
  fi
  #set -- 0     #debug  set $1 to 0 
    if [ "$1" -eq 6 ]; then
      SBATTERY_STATE="dc"; # for example PM 2.5 indoor
    else
      SBATTERY_STATE=""
      typeset l
      l=1
      while [ "$l" -le "$1" ] && [ "$l" -le "$max_battery_level" ]; do
          SBATTERY_STATE+="+";
          l=$(( l + 1 ))
      done
      if [ "$1" -le 1 ]; then
        SBATTERY_STATE+=" low"
      fi
    fi
}

 getBatteryState ()
{
  unset SBATTERY_STATE
  if [ "$1" -eq 0 ]; then
      SBATTERY_STATE="normal" #ok
  elif [  "$1" -eq 1 ]; then
    SBATTERY_STATE="low"
  fi
}

 parseLivedata_C02_sensor ()
#$1 - hex string
{
  typeset ld_temp_co2
  typeset ld_humidity_co2
  typeset ld_pm10_co2
  typeset ld_pm10_24h_co2
  typeset ld_pm25_co2
  typeset ld_pm25_24h_co2
  typeset ld_co2
  typeset ld_co2_24h
  typeset ld_co2_batt
  
  [ "$DEBUG" -eq 1 ] && >&2 echo  parse livedata co2 hex string"$1" "${#1}"
  #testdata: parseLivedata_C02_sensor "$(printf "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x" 00 100 70 00 101 00 110 00 120 00 130 00 140 00 150 0)"

  readInt16BE "0x${1:0:4}"
  convertScale10ToFloat $VALUE_INT16BE
  ld_temp_co2=$VALUE_SCALE10_FLOAT
  
  ld_humidity_co2=$(( 0x${1:4:2} ))
  
  convertScale10ToFloat "0x${1:6:4}"
  ld_pm10_co2=$VALUE_SCALE10_FLOAT

  convertScale10ToFloat "0x${1:10:4}"
  ld_pm10_24h_co2=$VALUE_SCALE10_FLOAT

  convertScale10ToFloat "0x${1:14:4}"
  ld_pm25_co2=$VALUE_SCALE10_FLOAT

  convertScale10ToFloat "0x${1:18:4}"
  ld_pm25_24h_co2=$VALUE_SCALE10_FLOAT

  ld_co2=$(( 0x${1:22:4} ))
  ld_co2_24h=$(( 0x${1:26:4} ))
  ld_co2_batt=$(( 0x${1:30:2} ))
  
  printf "%8s %5s %s\n" "$ld_temp_co2"         "C" "temperature"
  printf "%8s %5s %s\n" "$ld_humidity_co2"     "%" "humidity"
  printf "%8s %5s %s\n" "$ld_pm10_co2"     "µg/m3" "PM10"
  printf "%8s %5s %s\n" "$ld_pm10_24h_co2" "µg/m3" "PM10 24h average"
  printf "%8s %5s %s\n" "$ld_pm25_co2"     "µg/m3" "PM25"
  printf "%8s %5s %s\n" "$ld_pm25_24h_co2" "µg/m3" "PM25 24h average"
  printf "%8s %5s %s\n" "$ld_co2"           "ppm"  "co2"
  printf "%8s %5s %s\n" "$ld_co2_24h"       "ppm"  "co2 24h average"
  printf "%8s %5s %s\n" "$ld_co2_batt"       ""    "battery level"
  
}

 printLivedata ()
#$1 field type in decimal
{
    if [ -n "${LDFDESC_RENAME}" ]; then
           LDFDESC=$LDFDESC_RENAME
        fi

   # if [ "$LDFUNIT" = "℃" ]; then
        #multibyte character/unicode requires 1 larger width and a space padding for description
   #           printf "%8s %6s %s\n" "${LIVEDATA[$1]}" "$LDFUNIT" " $LDFDESC"
    if [ "$LDFUNIT"  = "°" ]; then
              printf "%8s %6s %s\n" "${LIVEDATA[$1]}" "$LDFUNIT" "$LDFDESC"
    elif [ "$1" -eq $LDF_SENSOR_CO2 ]; then
       parseLivedata_C02_sensor "${LIVEDATA[$1]}"
    elif [ "$1" -eq $LDF_LIGHTNING_TIME ]; then
       printf "%8s %5s %s\n" "$(date -u -d @"${LIVEDATA[$1]}" +'%F %T')" "$LDFUNIT" "$LDFDESC" 
    else
            printf "%8s %5s %s\n" "${LIVEDATA[$1]}" "$LDFUNIT" "$LDFDESC"
    fi 

    if [ "$LDFNAME" = 'WINDDIRECTION' ]; then  
            convertWindDirectionToCompassDirection $(( ${LIVEDATA[$1]} ))
            #LIVEDATA_EXTRA[$fieldTypeDec]=$VALUE_COMPASS_DIRECTION_NAME
            if [ -n "${LIVEDATA_FIELDRENAME[compass_direction]}" ]; then
                LDFDESC=${LIVEDATA_FIELDRENAME[compass_direction]}
            else
              LDFDESC="wind compass direction"
            fi
              printf "%8s %5s %s\n" "$VALUE_COMPASS_DIRECTION_NAME" "" "$LDFDESC"
            
    fi

}

 parseLivedata ()
# $1 -pattern to match
#https://unix.stackexchange.com/questions/306111/what-is-the-difference-between-the-bash-operators-vs-vs-vs [[ [ ((
{
  typeset fieldTypeDec
  typeset match
  typeset len
  typeset liveline

 [ $DEBUG -eq 1 ] && >&2 echo parseLivedata "SPATTERN" "$SPATTERN"

  IFS=':'
  unset LDF_DISCOVERED

  len=$((${#PACKET_RX[@]} - 1))
  match=0

  #date +"%s.%N"

  while [ "$RX_POS" -lt $len  ]; do

    [ $DEBUG -eq 1 ] && >&2 echo PACKET_RX_HEX "${PACKET_RX_HEX:(( $RX_POS * 2 ))}" RX_POS "$RX_POS" PACKET_RX_LENGTH "${#PACKET_RX[@]}"

    readUInt8
    fieldTypeDec=$VALUE_UINT8

     LDF_DISCOVERED+=( "$fieldTypeDec" ) # keep track of discovered fields

   read -r LDFNAME LDFDESC LDFUNIT LDFBYTES LDFSCALE LDFSIGNEDINT << EOF
${LIVEDATA_FIELD[$fieldTypeDec]}
EOF
    
    unset LDFDESC_RENAME
    if [ -n "${LIVEDATA_FIELDRENAME[$fieldTypeDec]}" ]; then #rename sensor description
       LDFDESC_RENAME=${LIVEDATA_FIELDRENAME[$fieldTypeDec]}
    fi

    if   [ "$LDFBYTES" -eq 1 ]; then  
          readUInt8
          LIVEDATA[$fieldTypeDec]=$VALUE_UINT8

    elif [ "$LDFBYTES" -eq 2 ] && [ -z "$LDFSIGNEDINT" ]; then 
          readUInt16BE 
          LIVEDATA[$fieldTypeDec]=$VALUE_UINT16BE
    elif [ "$LDFBYTES" -eq 2 ] && [ "$LDFSIGNEDINT" -eq 1 ]; then
          readInt16BE # temp is signed 16-bit
          LIVEDATA[$fieldTypeDec]=$VALUE_INT16BE
    elif [ "$LDFBYTES" -eq 4 ]; then
          readUInt32BE
          LIVEDATA[$fieldTypeDec]=$VALUE_UINT32BE
    else
       readHex "$LDFBYTES"
       LIVEDATA[$fieldTypeDec]=$VALUE_HEX_STRING
    fi
    
     if [ "$LDFSCALE" -eq 1 ]; then # scale: divide by 10 if neccessary
        convertScale10ToFloat "${LIVEDATA[$fieldTypeDec]}"
        LIVEDATA[$fieldTypeDec]=$VALUE_SCALE10_FLOAT
     fi

    liveline="$LDFNAME $LDFDESC $LDFDESC_RENAME"
    toLowercase "$liveline"
    liveline=$lowercase


    if [ "$SHELL_SUPPORT_TILDE_REGEX" -eq 1 ]; then
       eval 'if [[ "$liveline" =~  ${SPATTERN} ]] ; then match=1; printLivedata "$fieldTypeDec"; fi' #eval prevent ksh parser syntax error
      # ^ line starts with, ,,=to lowercase
     elif echo "$liveline" | grep -i -q -E "$SPATTERN"; then
        match=1 
        printLivedata "$fieldTypeDec"
    fi

  done

  [ $DEBUG -eq 1 ] && >&2 echo Discovered fields in packet "${LDF_DISCOVERED[@]}"
  
  if [ "$match" -eq 0 ]; then
  >&2 echo "Error Failed to match '$SPATTERN' in current livedata fields"
     listLivedataFieldsAndDescription 1 # 1 - list only active/discovered fields in parsed data
    
  fi
}

 printSensorHeader ()
{
   printf "%4s %5s %8s %10s %7s %13s %6s %12s %s\n" type name id id_state battery battery_state signal interval_min description
}

 printSensorLine ()
{
  case "$KSH_VERSION" in 
   *MIRBSD*)
      typeset -iU SID_PRINT=$SID #force usigned int for mirbsd korn shell/android to get proper formatting 
       printf "%4s %5s %8x %10s %7s %13s %6s %12s %s\n" "$STYPE" "$SNAME" "$SID_PRINT" "$SID_STATE" "$SBATTERY" "$SBATTERY_STATE" "$SSIGNAL" "$SINTERVAL_MIN" "$SDESC"
       ;;
  *)
    printf "%4s %5s %8x %10s %7s %13s %6s %12s %s\n" "$STYPE" "$SNAME" "$SID" "$SID_STATE" "$SBATTERY" "$SBATTERY_STATE" "$SSIGNAL" "$SINTERVAL_MIN" "$SDESC"
    ;;
  esac
}

 toLowercase ()
{
  typeset -l lowcasestr # -l option -> lowercase on assignment/or ignored
  if [ -n "$BASH_VERSION" ]; then
    eval 'lowercase=${1,,}' #eval prevents ksh from stopping parsing on syntax error
  elif [ -n "$ZSH_VERSION" ]; then
    lowercase=${1:l}
  elif [ -n "$KSH_VERSION" ]; then
  # Android 11 runds mir bsd korn shell http://www.mirbsd.org/mksh.htm
    lowcasestr=$1
    lowercase=$lowcasestr
  else
     lowercase=$(echo "$1" | tr '[:upper:]' '[:lower:]')
  fi
 
}

 parseSensor ()
{
  typeset match # flag when pattern matches fields
  typeset printSensorHeaderFlag
  typeset n
  unset CONFIGURATION_SENSOR
  unset CONFIGURATION_SENSOR_INDEX
  unset CONFIGURATION_SENSOR_MATCH # keeps track of sensors matching search pattern
  n=0
  match=0
  printSensorHeaderFlag=0

 # echo SENSOR_SEARCH ${SENSOR_SEARCH} SENSOR_DISABLE $SENSOR_DISABLE $(( 0xffffffff ))

  [ $DEBUG -eq 1 ] && >&2 echo parseSensor "SPATTERN" "$SPATTERN"
 
     IFS=':'
    
       while [ "$RX_POS" -lt $(( ${#PACKET_RX[@]} - 1 )) ]; do
            
            typeset RX_START_POS
            RX_START_POS=$RX_POS # for listing entire record as hex

              readUInt8

              STYPE=$VALUE_UINT8
    # shellcheck disable=SC2034
              read -r SNAME SDESC SINTERVAL_MIN DISCARD << EOF
${SENSOR_TYPE[STYPE]}
EOF
              [ -z "$SNAME" ] && [ $DEBUG -eq 1 ] && echo >&2 "Unknown SENSOR_TYPE $STYPE"

              readUInt32BE

              SID=$VALUE_UINT32BE
              SID_HEX=$VALUE_UINT32BE_HEX # for searching

              n=$(( n + 1 ))

              setConfigurationSensor "$STYPE" $SID

              if [ "$SID" -eq "$SENSOR_SEARCH" ]; then 
                  SID_STATE="searching"
              elif [ "$SID" -eq  "$SENSOR_DISABLE" ]; then
                    SID_STATE="disabled"
              else    
                    SID_STATE='enabled'
              fi

              readUInt8
              
              SBATTERY=$VALUE_UINT8
              
              unset SBATTERY_STATE
              #https://unix.stackexchange.com/questions/306111/what-is-the-difference-between-the-bash-operators-vs-vs-vs


              if [ "$SID_STATE" = "enabled" ]; then # intepret battery levels

                  if [ "$STYPE" -ge "$WH43_type" ] && [ "$STYPE" -lt  $(( WH43_type + WH43_max_ch )) ] ||
                     [ "$STYPE" -ge "$WH55_type" ] && [ "$STYPE" -lt  $(( WH55_type + WH55_max_ch )) ] ||
                     [ "$STYPE" -eq "$WH57_type" ] ||
                     [ "$STYPE" -eq "$WH45_type" ]; then  #WH43 - PM2.5 indoor, WH41? same ID?
                  #WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/CurdataGwFragment.java l 4575
                    getBatteryLevelState "$SBATTERY"
                  fi

                  #Voltage value seems to be scaled * 10 for soil moisture/rainfall sensor
                  if [ "$STYPE" -ge  $WH51_type ] && [ "$STYPE" -lt $(( WH51_type + WH51_max_ch )) ] || 
                     [ "$STYPE" -eq  $WH40_type ]; then 
                        convertScale10ToFloat "$SBATTERY"
                        SBATTERY_STATE=$VALUE_SCALE10_FLOAT"V"
                        if [ "$SBATTERY" -le 12 ]; then
                          SBATTERY_STATE+=" low"
                        fi
                  fi

                  if [  "$STYPE" -eq  $WH65_type ] || [ "$STYPE" -ge $WH31_type ] && [ "$STYPE" -lt  $(( WH31_type + WH31_max_ch )) ]; then # WH65, WH31 CH1-8 
                    getBatteryState "$SBATTERY"
                  fi
              fi

              readUInt8
              
              SSIGNAL=$VALUE_UINT8
            
            [ $DEBUG -eq 1 ] && >&2 echo "${PACKET_RX_HEX:(($RX_START_POS * 2)):14}"

          match=0
     #force external grep for testing
         # typeset bashv
         # bashv=$BASH_VERSION
         # typeset kshv
         # kshv=$KSH_VERSION
         # typeset zshv
         # zshv=$ZSH_VERSION
         # unset BASH_VERSION KSH_VERSON ZSH_VERSION
          SLINE="$STYPE $SNAME $SID_HEX $SID_STATE $SBATTERY $SBATTERY_STATE $SSIGNAL $SINTERVAL_MIN $SDESC"
          toLowercase "$SLINE"
          SLINE=$lowercase
          
          [ $DEBUG -eq 1 ] && >&2 echo SLINE "$SLINE"
          
          if [ "$SHELL_SUPPORT_TILDE_REGEX" -eq 1 ]; then
               eval 'if [[ ${SLINE,,} =~ $SPATTERN ]]; then match=1; fi' #eval prevent ksh parser syntax error
                # ^ line starts with, ,,=to lowercase
          elif  echo "$SLINE"   | grep -i -q -E "$SPATTERN"; then
               #-w option to search for word or "\<word\>" search pattern
                #https://www.networkworld.com/article/2764489/unix-tip-grepping-on-whole-words.html
                match=1
          fi
          
          #BASH_VERSION=$bashv
          #KSH_VERSION=$kshv
          #ZSH_VERSION=$zshv
       
          if [ $match -eq 1 ] && [ $printSensorHeaderFlag -eq 0 ]; then
            printSensorHeaderFlag=1
            CONFIGURATION_SENSOR_MATCH+=( "$STYPE" )
            printSensorHeader
            printSensorLine
          elif [ $match -eq 1 ];then 
            CONFIGURATION_SENSOR_MATCH+=( "$STYPE" )
            printSensorLine
          fi
            
       done

       [ $DEBUG -eq 1 ] && >&2 echo PARSED "${CONFIGURATION_SENSOR_INDEX[@]}" length "${#CONFIGURATION_SENSOR_INDEX[@]}"
       [ $DEBUG -eq 1 ] && >&2 echo MACTHED "${CONFIGURATION_SENSOR_MATCH[@]}" length "${#CONFIGURATION_SENSOR_MATCH[@]}"
     
}

 initTimezones ()
{
  #zsh read -A assigns to array, #bash -a assigns to array ?! -> do a while loop over heredoc
  #https://stackoverflow.com/questions/2337616/can-i-read-line-from-a-heredoc-in-bash
  #echo "(UTC-12:00)International Date Line West", "(UTC-11:00)Samoa", "(UTC-11:00)Coordinated Universal Time-11", "(UTC-10:00)Aleutian Islands", "(UTC-10:00)Hawaii", "(UTC-09:30)Marquesas Islands", "(UTC-09:00)Alaska", "(UTC-09:00)Coordinated Universal Time-9", "(UTC-08:00)Pacific Time (US & Canada)", "(UTC-08:00)Baja California", "(UTC-08:00)Coordinated Universal Time-8", "(UTC-07:00)Chihuahua,La Paz,Mazatlan", "(UTC-07:00)Mountain Time (US & Canada)", "(UTC-07:00)Arizona", "(UTC-06:00)Guadalajara,Mexico City,Monterrey", "(UTC-06:00)Saskatchewan", "(UTC-06:00)Central Time (US & Canada)", "(UTC-06:00)Central America", "(UTC-05:00)Bogota,Lima,Quito", "(UTC-05:00)Eastern Time (US & Canada)", "(UTC-05:00)Havana", "(UTC-05:00)Hayti", "(UTC-05:00)Chetumal", "(UTC-05:00)Indiana (East)", "(UTC-04:30)Caracas", "(UTC-04:00)Atlantic Time (Canada)", "(UTC-04:00)Cuiaba", "(UTC-04:00)Georgetown,La Paz,Manaus,San Juan", "(UTC-04:00)Santiago", "(UTC-04:00)Asuncion", "(UTC-03:30)Newfoundland", "(UTC-03:00)Brasilia", "(UTC-03:00)Buenos Aires", "(UTC-03:00)Greenland", "(UTC-03:00)Cayenne,Fortaleza", "(UTC-03:00)Montevideo", "(UTC-02:00)Coordinated Universal Time-02", "(UTC-01:00)Cape Verde Is.", "(UTC-01:00)Azores", "(UTC)Dublin,Edinburgh,Lisbon,London", "(UTC)Casablanca", "(UTC)Monrovia,Reykjavik", "(UTC)Coordinated Universal Time", "(UTC+01:00)Amsterdam,Berlin,Bern,Rome,Stockholm,Vienna", "(UTC+01:00)Belgrade,Bratislava,Budapest,Ljubljana,Prague", "(UTC+01:00)Brussels,Copenhagen,Madrid,Paris", "(UTC+01:00)Sarajevo,Skopje,Warsaw,Zagreb", "(UTC+01:00)Windhoek", "(UTC+01:00)West Central Africa", "(UTC+02:00)Amman", "(UTC+02:00)Beirut", "(UTC+02:00)Damascus", "(UTC+02:00)Harare,Pretoria", "(UTC+02:00)Helsinki,Kyiv,Riga,Sofia,Talinn,Vilnius", "(UTC+02:00)Cairo", "(UTC+02:00)Athens,Bucharest,Istanbul", "(UTC+02:00)Jerusalem", "(UTC+03:00)Baghdad", "(UTC+03:00)Kuwait,Riyadh", "(UTC+03:00)Minsk", "(UTC+03:00)Moscow,St.Petersburg,Volgograd", "(UTC+03:00)Nairobi", "(UTC+03:30)Tehran", "(UTC+04:00)Abu Dhabi,Muscat", "(UTC+04:00)Yerevan", "(UTC+04:00)Baku", "(UTC+04:00)Tbilisi", "(UTC+04:00)Port Louis", "(UTC+04:30)Kabul", "(UTC+05:00)Tashkent", "(UTC+05:00)Ekaterinburg", "(UTC+05:00)Islamabad,Karachi", "(UTC+05:30)Chennai,Kolkata,Mumbai,New Delhi", "(UTC+05:30)Sri Jayawardenepura", "(UTC+05:45)Kathmandu", "(UTC+06:00)Astana", "(UTC+06:00)Dhaka", "(UTC+06:00)Novosibirsk", "(UTC+06:30)Yangon (Rangoon)", "(UTC+07:00)Kobdo", "(UTC+07:00)Krasnoyarsk", "(UTC+07:00)Bangkok,Hanoi,Jakarta", "(UTC+08:00)Beijing,Chongqing,Hong Kong,Urumqi", "(UTC+08:00)Kuala Lumpur,Singapore", "(UTC+08:00)Perth", "(UTC+08:00)Taipei", "(UTC+08:00)Ulaanbaatar", "(UTC+08:00)Irkutsk", "(UTC+09:00)Pyongyang", "(UTC+09:00)Osaka,Sapporo,Tokyo", "(UTC+09:00)Seoul", "(UTC+09:00)Yakutsk", "(UTC+09:30)Adelaide", "(UTC+09:30)Darwin", "(UTC+10:00)Brisbane", "(UTC+10:00)Vladivostok", "(UTC+10:00)Guam,Port Moresby", "(UTC+10:00)Hobart", "(UTC+10:00)Canberra,Melbourne,Sydney", "(UTC+10:30)Lord Howe Island", "(UTC+11:00)Magadan", "(UTC+11:00)Solomon Is.,New Caledonia", "(UTC+12:00)Auckland,Wellington", "(UTC+12:00)Fiji", "(UTC+12:00)Coordinated Universal Time+12", "(UTC+12:45)Chatham Islands", "(UTC+13:00)Nuku'alofa", "(UTC+14:00)Christmas Island" | cut -d ',' -f 1- --output-delimiter=$'\n'
#Based on decompiled /WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/SystemFragment.java
unset SYSTEM_TIMEZONE
while read -r line; do
 SYSTEM_TIMEZONE+=( "$line" )
 done <<EOF
(UTC-12:00) International Date Line West
(UTC-11:00) Samoa
(UTC-11:00) Coordinated Universal Time-11
(UTC-10:00) Aleutian Islands
(UTC-10:00) Hawaii
(UTC-09:30) Marquesas Islands
(UTC-09:00) Alaska
(UTC-09:00) Coordinated Universal Time-9
(UTC-08:00) Pacific Time (US & Canada)
(UTC-08:00) Baja California
(UTC-08:00) Coordinated Universal Time-8
(UTC-07:00) Chihuahua, La Paz, Mazatlan
(UTC-07:00) Mountain Time (US & Canada)
(UTC-07:00) Arizona
(UTC-06:00) Guadalajara, Mexico City,Monterrey
(UTC-06:00) Saskatchewan
(UTC-06:00) Central Time (US & Canada)
(UTC-06:00) Central America
(UTC-05:00) Bogota, Lima, Quito
(UTC-05:00) Eastern Time (US & Canada)
(UTC-05:00) Havana
(UTC-05:00) Hayti
(UTC-05:00) Chetumal
(UTC-05:00) Indiana (East)
(UTC-04:30) Caracas
(UTC-04:00) Atlantic Time (Canada)
(UTC-04:00) Cuiaba
(UTC-04:00) Georgetown, La Paz, Manaus, San Juan
(UTC-04:00) Santiago
(UTC-04:00) Asuncion
(UTC-03:30) Newfoundland
(UTC-03:00) Brasilia
(UTC-03:00) Buenos Aires
(UTC-03:00) Greenland
(UTC-03:00) Cayenne, Fortaleza
(UTC-03:00) Montevideo
(UTC-02:00) Coordinated Universal Time-02
(UTC-01:00) Cape Verde Is.
(UTC-01:00) Azores
(UTC) Dublin, Edinburgh, Lisbon, London
(UTC) Casablanca
(UTC) Monrovia, Reykjavik
(UTC) Coordinated Universal Time
(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
(UTC+01:00) Brussels, Copenhagen, Madrid, Paris
(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb
(UTC+01:00) Windhoek
(UTC+01:00) West Central Africa
(UTC+02:00) Amman
(UTC+02:00) Beirut
(UTC+02:00) Damascus
(UTC+02:00) Harare, Pretoria
(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Talinn, Vilnius
(UTC+02:00) Cairo
(UTC+02:00) Athens, Bucharest, Istanbul
(UTC+02:00) Jerusalem
(UTC+03:00) Baghdad
(UTC+03:00) Kuwait, Riyadh
(UTC+03:00) Minsk
(UTC+03:00) Moscow, St.Petersburg, Volgograd
(UTC+03:00) Nairobi
(UTC+03:30) Tehran
(UTC+04:00) Abu Dhabi, Muscat
(UTC+04:00) Yerevan
(UTC+04:00) Baku
(UTC+04:00) Tbilisi
(UTC+04:00) Port Louis
(UTC+04:30) Kabul
(UTC+05:00) Tashkent
(UTC+05:00) Ekaterinburg
(UTC+05:00) Islamabad, Karachi
(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi
(UTC+05:30) Sri Jayawardenepura
(UTC+05:45) Kathmandu
(UTC+06:00) Astana
(UTC+06:00) Dhaka
(UTC+06:00) Novosibirsk
(UTC+06:30) Yangon (Rangoon)
(UTC+07:00) Kobdo
(UTC+07:00) Krasnoyarsk
(UTC+07:00) Bangkok, Hanoi, Jakarta
(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi
(UTC+08:00) Kuala Lumpur, Singapore
(UTC+08:00) Perth
(UTC+08:00) Taipei
(UTC+08:00) Ulaanbaatar
(UTC+08:00) Irkutsk
(UTC+09:00) Pyongyang
(UTC+09:00) Osaka, Sapporo, Tokyo
(UTC+09:00) Seoul
(UTC+09:00) Yakutsk
(UTC+09:30) Adelaide
(UTC+09:30) Darwin
(UTC+10:00) Brisbane
(UTC+10:00) Vladivostok
(UTC+10:00) GuamPort Moresby
(UTC+10:00) Hobart
(UTC+10:00) Canberra, Melbourne, Sydney
(UTC+10:30) Lord Howe Island
(UTC+11:00) Magadan
(UTC+11:00) Solomon Is., New Caledonia
(UTC+12:00) Auckland, Wellington
(UTC+12:00) Fiji
(UTC+12:00) Coordinated Universal Time+12
(UTC+12:45) Chatham Islands
(UTC+13:00) Nuku'alofa
(UTC+14:00) Christmas Island
EOF
}

 printTimezones ()
{
  typeset n
  n=0
  printf "%3s %s\n" "tzi" "timezone" #tzi timezone index
  #for tz in "${SYSTEM_TIMEZONE[@]}"; do
  while [ $n -lt ${#SYSTEM_TIMEZONE[@]} ]; do
  tz=${SYSTEM_TIMEZONE[$n]}
    printf "%3d %s\n" $n "$tz"
    n=$(( n + 1))
  done
}

 setConfiguration ()
#$1 - index to configuration element
#$2 - value
{
 typeset overwrite
 overwrite=0
 
  #check if index already has a value
  for i in "${CONFIGURATION_INDEX[@]}"; do
    if [ "$1" = "$i" ]; then
     overwrite=1
    fi
  done

  if [ $overwrite -eq 1 ]; then
     [ $DEBUG -eq 1 ] && >&2 echo "Overwrite value ${CONFIGURATION[$i]} index $1 with value $2"
      CONFIGURATION[$1]=$2

  else
    [ $DEBUG -eq 1 ] && >&2 echo "Setting configuration index $1 to value $2"
      CONFIGURATION[$1]=$2
      CONFIGURATION_INDEX+=( "$1" ) # keeps track of index with values, zsh doesnt have ${!arr} - keys expansion
  fi

  [ $DEBUG -eq 1 ] && >&2 echo "Indexes with values ${CONFIGURATION_INDEX[*]}"
}

 printSystem ()
{
     printf "%15s %s %s\n" "frequency" "$C_SYSTEM_FREQUENCY" "$C_SYSTEM_FREQUENCY_STATE" 
     printf "%15s %s %s\n" "sensortype" "$C_SYSTEM_SENSORTYPE" "$C_SYSTEM_SENSORTYPE_STATE"
     printf "%15s %s %s\n" "UTC" "$C_SYSTEM_UTC" "$C_SYSTEM_UTC_STATE"
     printf "%15s %s %s\n" "tzindex" "$C_SYSTEM_TIMEZONE_INDEX" "$C_SYSTEM_TIMEZONE_INDEX_STATE"
     printf "%15s %d dst %s auto %s\n" "timezone" "$C_SYSTEM_DST_STATUS" "$C_SYSTEM_DST_STATUS_STATE" "$C_SYSTEM_TIMEZONE_AUTO_STATE" 
}

 parsePacket () {
  typeset -i cmd
  RX_POS=4 # current read position/after packet length byte for indexing PACKET_RX_OD[1] - ASCII string from od utility

  cmd=$(( 0x${PACKET_RX[2]} ))

  #Packet length
  if [ "$cmd" -eq  $CMD_broadcast ] || [ "$cmd" -eq $CMD_livedata ] || [ "$cmd" -eq $CMD_read_sensor_id_new ]; then

      RX_POS=5    
      #printf -v PACKET_RX_LENGTH "%u" "0x${PACKET_RX[3]}${PACKET_RX[4]}" 2>/dev/null || 
      PACKET_RX_LENGTH=$(( 0x${PACKET_RX[3]}${PACKET_RX[4]} ))
   else  
       PACKET_RX_LENGTH=$(( 0x${PACKET_RX[3]} ))
  fi

  [ $DEBUG -eq 1 ] && echo >&2 "Parse packet ${PACKET_RX[*]} length $PACKET_RX_LENGTH"

  if  [ "$cmd" -eq $CMD_write_ecowitt_interval ] ||
   [ "$cmd" -eq $CMD_write_reset ] ||
   [ "$cmd" -eq $CMD_write_customized ] ||
   [ "$cmd" -eq $CMD_write_path ] ||
   [ "$cmd" -eq $CMD_reboot ] ||
   [ "$cmd" -eq $CMD_write_ssid ] ||
   [ "$cmd" -eq $CMD_write_raindata ] ||
   [ "$cmd" -eq $CMD_write_wunderground ] ||
   [ "$cmd" -eq $CMD_write_wow ] ||
   [ "$cmd" -eq $CMD_write_weathercloud ] ||
   [ "$cmd" -eq $CMD_write_sensor_id ] ||
   [ "$cmd" -eq $CMD_write_calibration ] ||
   [ "$cmd" -eq $CMD_write_system ]; then 

    parseResultPacket

  elif [  "$cmd" -eq $CMD_read_mac ]; then

    #setConfiguration $CONF_mac "$(printf "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[4]}" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}")"
    C_MAC="$(printf "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[4]}" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}")"

    echo "$C_MAC"

  elif [  "$cmd" -eq $CMD_read_version ]; then

    readString
    #setConfiguration $CONF_version "$VALUE_STRING"
    C_VERSION=$VALUE_STRING
   
    echo "$C_VERSION"

  elif [  "$cmd" -eq $CMD_read_system ]; then
  
     readUInt8
     #setConfiguration $CONF_system_frequency "$VALUE_UINT8"
     C_SYSTEM_FREQUENCY=$VALUE_UINT8
     if [ "$C_SYSTEM_FREQUENCY" -eq $SYSTEM_FREQUENCY_RFM433M ]; then
      # setConfiguration $CONF_system_frequency_state "433MHz"
       C_SYSTEM_FREQUENCY_STATE="433MHz"
     elif [ "$C_SYSTEM_FREQUENCY"  -eq $SYSTEM_FREQUENCY_RFM868M ]; then
       #setConfiguration $CONF_system_frequency_state "868MHz"
       C_SYSTEM_FREQUENCY_STATE="868MHz"
     elif [ "$C_SYSTEM_FREQUENCY" -eq $SYSTEM_FREQUENCY_RFM915M ]; then
       #setConfiguration $CONF_system_frequency_state "915MHz"
       C_SYSTEM_FREQUENCY_STATE="915MHz"
     elif [ "$C_SYSTEM_FREQUENCY" -eq $SYSTEM_FREQUENCY_RFM920M ]; then
       #setConfiguration $CONF_system_frequency_state "920MHz"
       C_SYSTEM_FREQUENCY_STATE="920MHz"
     fi

     readUInt8
     #setConfiguration $CONF_system_sensor_type $VALUE_UINT8 # 0=WH24, 1=WH65
     C_SYSTEM_SENSORTYPE=$VALUE_UINT8
     if [ "$C_SYSTEM_SENSORTYPE" -eq $SYSTEM_SENSOR_TYPE_WH24 ]; then
       #setConfiguration $CONF_system_sensor_type_state "WH24"
       SENSOR_TYPE[WH24_type]="WH24:Outdoor Weather Sensor:16.0:" # overwrite default WH65_type=0
      C_SYSTEM_SENSORTYPE_STATE="WH24"
     elif [ "$C_SYSTEM_SENSORTYPE" -eq $SYSTEM_SENSOR_TYPE_WH65 ]; then
       #setConfiguration $CONF_system_sensor_type_state "WH65"
      C_SYSTEM_SENSORTYPE_STATE="WH65"
     fi

     readUInt32BE
     #setConfiguration $CONF_system_utc $VALUE_UINT32BE # UTC time (seconds)
     C_SYSTEM_UTC=$VALUE_UINT32BE
     #setConfiguration $CONF_system_utc_state "$(date -u -d @"$VALUE_UINT32BE" +'%F %T')"
     C_SYSTEM_UTC_STATE="$(date -u -d @"$VALUE_UINT32BE" +'%F %T')"
     #while true; do time ./gw  -h 192.168.3.80 -c system | grep utc; date -u; sleep 0.6; done #see time difference between machine time and device time

     readUInt8
     #setConfiguration $CONF_system_timezone_index $VALUE_UINT8 # 39 = UTC
     C_SYSTEM_TIMEZONE_INDEX=$VALUE_UINT8
     initTimezones
     #setConfiguration $CONF_system_timezone_index_state "${SYSTEM_TIMEZONE[CONFIGURATION[$CONF_system_timezone_index]]}"
      C_SYSTEM_TIMEZONE_INDEX_STATE=${SYSTEM_TIMEZONE[$C_SYSTEM_TIMEZONE_INDEX]}

     readUInt8
     #setConfiguration $CONF_system_dst_status $VALUE_UINT8
     C_SYSTEM_DST_STATUS=$VALUE_UINT8
     #setConfiguration $CONF_system_dst_status_bit "$(( ${CONFIGURATION[$CONF_system_dst_status]} & 0x1 ))"
     C_SYSTEM_DST_STATUS_BIT=$(( C_SYSTEM_DST_STATUS & 0x01 ))
     if [ "$C_SYSTEM_DST_STATUS_BIT" -eq 1 ]; then
        #setConfiguration $CONF_system_dst_status_state "on";
        C_SYSTEM_DST_STATUS_STATE="on"
      elif [ "$C_SYSTEM_DST_STATUS_BIT" -eq 0 ]; then
        #setConfiguration $CONF_system_dst_status_state "off"
        C_SYSTEM_DST_STATUS_STATE="off"
     fi  
     
     #setConfiguration $CONF_system_timezone_auto_bit $(( ( ${CONFIGURATION[$CONF_system_dst_status]} & 0x2 ) >> 1 )) # bit 2 1= off, 0=on ?
     C_SYSTEM_TIMEZONE_AUTO_BIT=$(( (C_SYSTEM_DST_STATUS & 0x2 ) >> 1 )) # bit 2 1= off, 0=on ?
     if [ "$C_SYSTEM_TIMEZONE_AUTO_BIT" -eq 0 ]; then
        #setConfiguration $CONF_system_timezone_auto_state "on";
        C_SYSTEM_TIMEZONE_AUTO_STATE="on"
      elif [  "${CONFIGURATION[$CONF_system_timezone_auto_bit]}" -eq 1 ]; then
        #setConfiguration $CONF_system_timezone_auto_state "off"
         C_SYSTEM_TIMEZONE_AUTO_STATE="off"
     fi

     printSystem

  elif [ "$cmd" -eq $CMD_read_ecowitt_interval ]; then

    readUInt8
    #setConfiguration $CONF_ecowitt_interval "$VALUE_UINT8"
    C_WS_ECOWITT_INTERVAL=$VALUE_UINT8
    echo $C_WS_ECOWITT_INTERVAL

  elif [  "$cmd" -eq $CMD_read_wunderground ]; then

    readString
    #setConfiguration $CONF_wunderground_id "$VALUE_STRING"
    C_WS_WUNDERGROUND_ID=$VALUE_STRING
    readString
    #setConfiguration $CONF_wunderground_password "$VALUE_STRING"
    C_WS_WUNDERGROUND_PASSWORD=$VALUE_STRING

    echo "$C_WS_WUNDERGROUND_ID $C_WS_WUNDERGROUND_PASSWORD" 
    
  elif [  "$cmd" -eq $CMD_read_wow ]; then

    readString
    #setConfiguration $CONF_wow_id "$VALUE_STRING"
    C_WS_WOW_ID=$VALUE_STRING

    readString
    #setConfiguration $CONF_wow_password "$VALUE_STRING"
    C_WS_WOW_PASSWORD=$VALUE_STRING

    echo "$C_WS_WOW_ID $C_WS_WOW_PASSWORD"
   
  elif [  "$cmd" -eq $CMD_read_weathercloud ]; then

    readString
    #setConfiguration $CONF_weathercloud_id "$VALUE_STRING"
    C_WS_WC_ID=$VALUE_STRING
    
    readString
    #setConfiguration $CONF_weathercloud_password "$VALUE_STRING"
    C_WS_WC_PASSWORD=$VALUE_STRING
    echo "$C_WS_WC_ID $C_WS_WC_PASSWORD"
    
  elif [  "$cmd" -eq $CMD_read_customized ]; then

    readString
    #setConfiguration $CONF_customized_id "$VALUE_STRING"
    C_WS_CUSTOMIZED_ID=$VALUE_STRING

    readString
    #setConfiguration $CONF_customized_password "$VALUE_STRING"
    C_WS_CUSTOMIZED_PASSWORD=$VALUE_STRING

    readString
    #setConfiguration $CONF_customized_server "$VALUE_STRING"
    C_WS_CUSTOMIZED_SERVER=$VALUE_STRING

    readUInt16BE
    #setConfiguration $CONF_customized_port "$VALUE_UINT16BE"
    C_WS_CUSTOMIZED_PORT=$VALUE_UINT16BE

    readUInt16BE
    #setConfiguration $CONF_customized_interval "$VALUE_UINT16BE"
    C_WS_CUSTOMIZED_INTERVAL=$VALUE_UINT16BE
    
    readUInt8
    #setConfiguration $CONF_customized_type "$VALUE_UINT8"
    C_WS_CUSTOMIZED_TYPE=$VALUE_UINT8

    if [ "$C_WS_CUSTOMIZED_TYPE" -eq 1 ]; then
      C_WS_CUSTOMIZED_TYPE_STATE="wunderground"
    elif [ "$C_WS_CUSTOMIZED_TYPE" -eq 0 ]; then
      C_WS_CUSTOMIZED_TYPE_STATE="ecowitt"
    fi
    
    readUInt8
    #setConfiguration $CONF_customized_enabled "$VALUE_UINT8"
    
    C_WS_CUSTOMIZED_ENABLED=$VALUE_UINT8
    if [ "$C_WS_CUSTOMIZED_ENABLED" -eq 1 ]; then
       C_WS_CUSTOMIZED_ENABLED_STATE="on"
    elif [ "$C_WS_CUSTOMIZED_ENABLED" -eq 0 ]; then
       C_WS_CUSTOMIZED_ENABLED_STATE="off"
    fi
    
    printCustomized

  elif [  "$cmd" -eq $CMD_read_path ]; then

    readString
    #setConfiguration $CONF_customized_ecowitt_path "$VALUE_STRING"
    C_WS_CUSTOMIZED_PATH_ECOWITT=$VALUE_STRING
    
    readString
    #setConfiguration $CONF_customized_wunderground_path "$VALUE_STRING"
    C_WS_CUSTOMIZED_PATH_WU=$VALUE_STRING

  elif [  "$cmd" -eq $CMD_broadcast ]; then
    #this is the station MAC/ip on local network, when device is reset its annoncing hotspot accesspoint/AP with first byte of MAC changed
    # shellcheck disable=SC2102
    setConfiguration $CONF_broadcast_mac "$( printf "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}" 0x"${PACKET_RX[10]}")"

    # shellcheck disable=SC2102
    setConfiguration $CONF_broadcast_ip "$(printf "%u.%u.%u.%u" 0x"${PACKET_RX[11]}" 0x"${PACKET_RX[12]}" 0x"${PACKET_RX[13]}" 0x"${PACKET_RX[14]}" )"
    
    RX_POS=17
    typeset ssid
    typeset version
    #        IFS=' '; read -r ssid version <<< "${PACKET_RX_OD[1]:(( $pos + 1)):0x${PACKET_RX[$pos]}}" # ssid appends space+version
    readString
    IFS=' '
    read -r ssid version <<< "$VALUE_STRING" # ssid appends space+version

    setConfiguration $CONF_broadcast_ssid "$ssid"
    setConfiguration $CONF_broadcast_version "$version"
    # shellcheck disable=SC2102
    #printf -v CONFIGURATION[$CONF_broadcast_port] "%u" 0x"${PACKET_RX[15]}""${PACKET_RX[16]}" ||
    setConfiguration $CONF_broadcast_port "$(( 0x${PACKET_RX[15]}${PACKET_RX[16]} ))"

    echo "${CONFIGURATION[$CONF_broadcast_mac]} ${CONFIGURATION[$CONF_broadcast_ip]}:${CONFIGURATION[$CONF_broadcast_port]} ${CONFIGURATION[$CONF_broadcast_ssid]} ${CONFIGURATION[$CONF_broadcast_version]}"

  elif [  "$cmd" -eq $CMD_read_raindata ]; then

    # echo "${PACKET_RX_HEX}" "$RX_POS_HEX"
    readUInt32BE
    #setConfiguration $CONF_rainrate "$VALUE_UINT32BE"
    C_RAINRATE=$VALUE_UINT32BE

    readUInt32BE
    #setConfiguration $CONF_raindaily "$VALUE_UINT32BE"
    C_RAINDAILY=$VALUE_UINT32BE
    
    readUInt32BE
    #setConfiguration $CONF_rainweek "$VALUE_UINT32BE"
    C_RAINWEEK=$VALUE_UINT32BE

    readUInt32BE
    #setConfiguration $CONF_rainmonth "$VALUE_UINT32BE"
    C_RAINMONTH=$VALUE_UINT32BE

    readUInt32BE
    #setConfiguration $CONF_rainyear "$VALUE_UINT32BE"
    C_RAINYEAR=$VALUE_UINT32BE

    printRain

 elif [ "$cmd" -eq $CMD_read_calibration ]; then

   readUInt16BE
   setConfiguration $CONF_calibration_intempoffset "$VALUE_UINT16BE"
   
   readUInt8 
   setConfiguration $CONF_calibration_inhumidityoffset "$VALUE_UINT8"

   readUInt32BE ""
   setConfiguration $CONF_calibration_absoffset "$VALUE_UINT32BE"

   readUInt32BE ""
   setConfiguration $CONF_calibration_reloffset "$VALUE_UINT32BE"

   readUInt16BE
   setConfiguration $CONF_calibration_outtempoffset "$VALUE_UINT16BE" 
   
   readUInt8
   setConfiguration $CONF_calibration_outhumidityoffset "$VALUE_UINT8" 

   readUInt16BE
   setConfiguration $CONF_calibration_windiroffset "$VALUE_UINT16BE"  

   printCalibration
   
  elif [  "$cmd" -eq $CMD_livedata ]; then

    parseLivedata "$SPATTERN" # use time for performance monitoring/optimization

  elif [ "$cmd" -eq $CMD_read_sensor_id_new ] || [  "$cmd" -eq $CMD_read_sensor_id ]; then

    parseSensor 1
     
  else

    echo >&2 "Warning unable to parse response for command $cmd $PACKET_RX_HEX " "$CMD_write_ecowitt_interval"
  fi
}

 newPacketBody () {
  # PACKET BODY STARTING AT BYTE 2 (from 0 index, first 0xff 0xff)
  typeset -i cmd
  cmd=$1

  if [ -z "$1" ]; then
      >&2 echo Error no command given to newPacketBody
      return 1
  fi
  
  #PACKET_BODY=() - ksh set array to length 1 here!?
  unset PACKET_BODY
  decToHex  $(( cmd ))
  PACKET_BODY+=("$VALUE_HEX" "0x00")
  
  if [ "$cmd" -eq $CMD_broadcast ] || [ "$cmd" -eq $CMD_write_ssid ]; then  
   # WSVIEW sends 2 byte field for size
    PACKET_BODY+=("0x00")
#    [ $DEBUG -eq 1 ] && echo >&2 appending 0x00 for 2-byte packet length PACKET BODY "${PACKET_BODY[@]}"
  fi 

 #[ $DEBUG -eq 1 ] && >&2 echo PACKET BODY "${PACKET_BODY[@]}"
 
}

 printPacketBody ()
{
  echo -------------------------- PACKET_BODY_LENGTH "${#PACKET_BODY[@]}"
  typeset n
  n=0
  while [ "$n" -lt ${#PACKET_BODY[@]} ]; do
     printf "%d %x\n" "$n" "${PACKET_BODY[$n]}"
     n=$(( n + 1))
  done
}
 createPacketTX () {
  typeset packetLengthLSB
  typeset packetLengthMSB
  typeset n
  typeset cmd
  cmd=$(( PACKET_BODY[0] )) #make sure its an int

  #Update packet length, either 1 or 2 bytes
   
  if [  "$cmd" -eq  "$CMD_broadcast" ] || [ "$cmd" -eq $CMD_write_ssid ]; then 
          packetLengthLSB=$((   (${#PACKET_BODY[@]} + 1) & 0xff ))
          packetLengthMSB=$(( ( (${#PACKET_BODY[@]} + 1) & 0xff00 ) >> 8 ))
          
          decToHex $packetLengthMSB
          PACKET_BODY[1]=$VALUE_HEX

          decToHex $packetLengthLSB
          PACKET_BODY[2]=$VALUE_HEX
  else
          decToHex $(( ${#PACKET_BODY[@]} + 1 ))
          PACKET_BODY[1]=$VALUE_HEX # set packet length including checksum byte
  fi

  checksum

  PACKET_TX=(0xff 0xff "${PACKET_BODY[@]}" "$PACKET_CHECKSUM")
  PACKET_TX_COMMAND=$(( PACKET_TX[2] )) # convert to decimal/integer for comparison in sendPacket

  #workaround for @(#)MIRBSD KSH R58 2020/03/27, assign array to ptx, complains about "bad subtitution"
 
  PACKET_TX_ECHO=""
  n=0
 # for n in "${!PACKET_TX[@]}"; do
  while [ "$n" -lt "${#PACKET_TX[@]}" ]; do
    PACKET_TX_ECHO+=${PACKET_TX[$n]}
    n=$(( n + 1 ))
  done
  
  PACKET_TX_ECHO=${PACKET_TX_ECHO//0x/'\x'}

   [ $DEBUG -eq 1 ] && { typeset ptx; ptx="${PACKET_TX[*]}"; echo >&2 PACKET_TX "${ptx//0x/''}" PACKET_TX_ECHO "$PACKET_TX_ECHO"; }

}

 readResponseCat () {
  typeset timeoutCat
  timeoutCat=0.025 # Wireshark [Time delta from previous captured frame: 0.013166760 seconds]
  #   [ $DEBUG -eq 1 ] && timeoutOptions='-v'
  # cat inside while (true) { continue read }
  #https://github.com/coreutils/coreutils/blob/bbb19b18687d5572dcbe7bbb1a48c8ee0f21786b/src/cat.c#L168
  # Actually response is read in the first call to read, then a second read is started on stdin/redirected FD, so cat has to be killed...
  # timeout "$timeoutOptions"--preserve-status $timeoutCat cat <&"$FD" >$FILENAME_RESPONSE
  cat <&"$FD" >"$FILENAME_rx" &
  sleep $timeoutCat
  kill %1
}

 readResponseDD () {
  typeset dd_result
  [ $DEBUG -eq 1 ] && unset "DEBUG_OPTIONS_dd"
  # shellcheck disable=SC2086
  timeout 0.5 dd bs=1024 count=1 ${DEBUG_OPTIONS_dd} <&"$FD" >$FILENAME_rx # timeout request, for example EasyWeather doesnt respond to rain command
  dd_result=$?
  if [ $dd_result -ne 0 ]; then
    echo >&2 Error DD failed to read response from FD "$FD", status "$dd_result"
  fi
  [ $DEBUG -eq 1 ] && echo >&2 dd_result $dd_result
  return $dd_result

}

 readHexASCII () {
  unset PACKET_RX_HEX # compact hex string without spaces ffff
  od -A n -t x1 -v -w"$(stat -c %s "$1")"  "$1" >"$FILENAME_od_hex"; 
  read -r  PACKET_RX_OD_HEX <"$FILENAME_od_hex" 
  rm "$FILENAME_od_hex"
  [ $DEBUG -eq 1 ] && echo >&2 OD HEX "$PACKET_RX_OD_HEX"
  
  convert_od_hexStringToArray "$PACKET_RX_OD_HEX" 
   #readarray -d ' ' -t PACKET_RX < <(echo -n "${PACKET_RX_OD[0]:1:-2}") # :1 substring, removes space at the beginning, -2: removes two trailing spaces
  PACKET_RX_HEX=${PACKET_RX_OD_HEX// /}                                 # strip off all spaces, just hex

}

 convert_od_hexStringToArray ()
{
  typeset hexCode
 IFS=' '
 unset PACKET_RX
 for hexCode in $1; do
   PACKET_RX+=( "$hexCode" )
 done
}

 sendPacket ()
{
  sendPacketnc "$@"
  #sendPacketdd "$@"
}

 parse_od_hex_packet ()
#$1 od hex string
{
      PACKET_RX_HEX=${1// /}                                 # strip off all spaces, just hex
      if [ ${#PACKET_RX_HEX} -eq  0 ]; then
          echo >&2 "Warning no data in response received from host"
      else
          [  "$DEBUG" -eq 1 ] && echo >&2 PACKET_RX_HEX "$PACKET_RX_HEX" length "${#PACKET_RX_HEX}"
          convert_od_hexStringToArray "$1"
          parsePacket
      fi
}

 sendPacketnc ()
#$1 - command
#$2 - host
{
  typeset ncUDPOpt # UDP (-u) or TCP
  typeset ncIdleOpt
  typeset port
  typeset ncStatus
  typeset host
  host=$2
  typeset timeout_udp_broadcast
  timeout_udp_broadcast=0.236 # timeout selected based on udp port scanning 254 hosts in 60s (60s/254=0.236s)
  typeset timeout_nc=0.05

  if [ -n "$TIMEOUT_READ" ]; then # allow override via -x option
    timeout_nc=$TIMEOUT_READ
  fi

  if [ -z "$host" ]; then
     host=$HOST #use default host, specfied using -h option
  fi 

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -ge 1 ]; then
    newPacketBody "$1"
  fi

  createPacketTX

  if [ $PACKET_TX_COMMAND -eq  $CMD_broadcast ]; then
            ncUDPOpt='-u'
            port=$PORT_udp_discovery_client #change to UDP from TCP default
            timeout_nc=$timeout_udp_broadcast
  elif [ "$PACKET_TX_COMMAND" -eq $CMD_write_reset ] || [ "$PACKET_TX_COMMAND" -eq $CMD_write_ssid ]; then
       # some commands needs idle timeout
         #https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching
         # man bash "When  the == and != operators are used, the string to the right of the operator
         #     is considered a pattern and matched according to the rules described below  un‐
         #     der Pattern Matching, as if the extglob shell option were enabled."
         if ! [[ $KSH_VERSION == *Android* ]]; then
            ncIdleOpt='-i 100ms'
            [ $DEBUG -eq 1 ] && >&2 echo "${CMD_NAME["$PACKET_TX_COMMAND"]}" Setting device idle timeout option for nc "$ncIdleOpt" 
         fi
  else
     unset ncUDPOpt
     #1>&2 echo ncUDPOpt $ncUDPOpt
     port=$PORT_tcp_command_server
  
  fi
  # shellcheck disable=SC2059
  printf "$PACKET_TX_ECHO" >"$FILENAME_tx" #print to file for debuggging purpose
  

 #{ cat "$FILENAME_tx"; sleep 0.175; } |  $NC_CMD  $ncUDPOpt $ncIdleOpt -w 500ms  -4 "$host" "$port"  >"$FILENAME_rx" # wait 0.1s to disable READ KILL of nc on stdin
  
  # if timeout is too small, ICMP port unreachable is generated when doing udp port 46000 probing/broadcast
  # udp debugging in wireshark : udp.dstport == 46000 || udp.srcport == 46000
    # shellcheck disable=SC2086
    if [ $NC_VERSION -eq $NC_OPENBSD  ]; then

       if [ "$ncUDPOpt" != "-u" ]; then
          { cat "$FILENAME_tx"; sleep $timeout_nc; } | $NC_CMD -4 -N "$host" "$port" >"$FILENAME_rx" #-N shutdown socket after EOF on stdin
           ncStatus=$?
    
        elif [ "$ncUDPOpt" = "-u" ]; then
             nc -4 -u "$host" "$port" <"$FILENAME_tx" >"$FILENAME_rx" &
             #-w only allow >=1s timeout, too slow, must move process to background and kill
            sleep $timeout_nc
            #jobs
            kill %1
        fi
    elif [ $NC_VERSION -eq $NC_NMAP ]; then

          { cat "$FILENAME_tx"; sleep $timeout_nc; } | $NC_CMD -4  $ncUDPOpt $ncIdleOpt "$host" "$port" >"$FILENAME_rx" 
           ncStatus=$?
    elif [ $NC_VERSION -eq $NC_TOYBOX ]; then

          { cat "$FILENAME_tx"; sleep $timeout_nc; } | $NC_CMD -4  $ncUDPOpt "$host" "$port" >"$FILENAME_rx" 
           ncStatus=$?
    fi

  # Fedora 35: use --no-shutdown to continue even if receving EOF on stdin
  # Android : -q Quit SECONDS after EOF on stdin, even if stdout hasn't closed yet" (from nc --help)
  
  if [ -s "$FILENAME_rx" ] ; then # -s file exists and not empty

        if od -A n -t x1 -v -w"$(stat -c %s "$FILENAME_rx")" "$FILENAME_rx" >"$FILENAME_od_hex"; then
            read -r PACKET_RX_OD_HEX <"$FILENAME_od_hex"
           [ $DEBUG -eq 1 ] &&  echo >&2 OD HEX "$PACKET_RX_OD_HEX" length "${#PACKET_RX_OD_HEX}"
            parse_od_hex_packet "$PACKET_RX_OD_HEX"
        else
          echo >&2 Error od failed to create hex decoding for packet, error code $?
        fi

  else
    [ $DEBUG -eq 1 ] &&  >&2 echo Error nc failed to receive response or empty response for command "${CMD_NAME["$PACKET_TX_COMMAND"]}" in "$timeout_nc" s
  fi

  #cleanup files

  if [ $DEBUG -eq 0 ]; then 
      rm "$FILENAME_tx" 2>/dev/null
      rm "$FILENAME_rx" 2>/dev/null
      rm "$FILENAME_od_hex" 2>/dev/null
  fi

}

#including checksum byte
 sendPacketdd () {
  #takes two arguments $1 - command, $2 is udp broadcast request
  typeset FD
  FD=$FD_TCP # default TCP command port

  [ -n "$2" ] && FD="$2" #may also use UDP for broadcast (ssid etc.)
  if [ ! -v FD ]; then
    echo >&2 Error connection to host not available, missing -h to host?
    exit $ERROR_CONNECTION
  fi

  [ $DEBUG -eq 1 ] && echo >&2 "Using FD $FD for sending packet"

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -ge 1 ]; then
    newPacketBody "$1"
  fi

  # write command/read response

  createPacketTX
    # shellcheck disable=SC2059
  printf "$PACKET_TX_ECHO" >"$FILENAME_tx"
  #printf "%b" "$PACKET_TX_ECHO" >&"$FD" # echo -ne/printf "%b" splits packet at 0x0a if written directly to FD
  [ $DEBUG -eq 1 ] && unset "DEBUG_OPTIONS_dd"
  
  if dd if="$FILENAME_tx" ${DEBUG_OPTIONS_dd} >&"$FD"; then 

      if readResponseDD; then #readResponseCat

       # PACKET_TIMESTAMP=$(date)
        readHexASCII "$FILENAME_rx"

        if [ ${#PACKET_RX[@]} -eq 0 ]; then
          echo >&2 "$HOST Warning no response received from host"
        else
          parsePacket
        fi
      fi
  else
     echo >&2 Error DD failed to send packet to FD "$FD", dd status $?
  fi

}

 discovery ()
{
  if which nc >/dev/null; then
    discovery_nc "$@"
  else
    echo >&2 Error nc not found, cannot scan for devices
  fi
  #if which socat >/dev/null; then
  #    discovery_socat
  #  else
  #    echo >&2 Error socat not found, cannot scan for devices
  #    return "$ERROR_NO_SOCAT"
  #  fi
  
}

 discovery_udp_client ()
#$1 - subnet, for example 192.168.3
#issue: nc fails to read when sending to subnet broadcast address 192.168.3.255
#host reply with ICMP host/port unreachable or broadcast response
#send broadcast cmd to port 46000
#some host responses take a long time > 175ms, but most take only 4-8ms, so -s should be run multiple times to get all hosts on the subnet
#wireshark filter: ip.addr == 192.168.3.80 or ip.addr == 192.168.3.49 or ip.addr == 192.168.3.204
#wireshark: Time field: "Delta time displayed"
#testing environment: vEthernet WSL adapter/ubuntu, Windows 11, Realtek RTL8852AE WiFi 6 802.11ax PCIe, Huawei AX mesh router 5Ghz channel 36,WPA2
{
typeset host
host=1;
while [ $host -le 254 ]; do
  [ $DEBUG -eq 1 ] && >&2 echo Discovery sending broadcast command to "$1.$host"
   sendPacket $CMD_broadcast "$1.$host"
   host=$(( host + 1 ))
done
}

 discovery_nc ()
#$1 - subnet for udp scan
{
  typeset -i SCAN_MAX_ITERATIONS
  SCAN_MAX_ITERATIONS=10
  typeset  SCAN_NC_IDLE_TIMEOUT
  SCAN_NC_IDLE_TIMEOUT=0.005 # 5ms
  typeset -i n
  typeset broadcast 

  if [[ $KSH_VERSION == *Android* ]]; then
     echo >&2 "Error UDP scanning for devices not supported ( -u -l options ), nc version $NC_VERSION_STR"
     # udp -u -l option gives 1 error code and 'nc: listen' output
     return "$ERROR_NC_UDP_SCAN_UNAVAILABLE"
  fi

  if [ -z "$1" ]; then # set up server on 59387 port

        if [ "$NC_VERSION" -ne $NC_NMAP ]; then
          SCAN_MAX_ITERATIONS=30
          SCAN_NC_TIMEOUT=0.1
        fi
        
          if  scan_result=$(n=0; while [ $n -lt $SCAN_MAX_ITERATIONS ]; do 
                                      if [ "$NC_VERSION" -eq $NC_NMAP ]; then 
                                              $NC_CMD -4 -u -i $SCAN_NC_IDLE_TIMEOUT -l $PORT_udp_discovery_server 2>/dev/null | od -A n -w64 -t x1 
                                      else
                                              { timeout $SCAN_NC_TIMEOUT "$NC_CMD" -4 -u -l $PORT_udp_discovery_server 2>/dev/null; } | od -A n -w64 -t x1 
                                      fi    
                                      n=$(( n + 1 ))
                              done | sort -u); then #"A Brief POSIX Advocacy: Shell Script Portability" https://www.usenix.org/system/files/login/articles/login_spring16_09_tomei.pdf
        
                    if [ -n "$scan_result" ]; then
                        IFS=$(printf "\n\b") # #https://stackoverflow.com/questions/16831429/when-setting-ifs-to-split-on-newlines-why-is-it-necessary-to-include-a-backspac
                        for broadcast in $scan_result; do
                          parse_od_hex_packet "$broadcast"
                        done
                    fi
          else
              echo >&2 Error failed to obtain scan result while listening on UDP port $PORT_udp_discovery_server, error code $?
          fi
  else 
    discovery_udp_client "$1"
  fi

}

 discovery_socat () {
  typeset TIMEOUT_SCAN
  TIMEOUT_SCAN=2 #seconds
  typeset rxscan
  typeset rxscan_sorted
  typeset socat_discovery_server_pid
  typeset n
  typeset hex_escape

  [ $DEBUG -eq 0 ] && unset "DEBUG_OPTIONS_socat"

  [ $DEBUG -eq 1 ] && echo >&2 "UDP discovery on GW port $PORT_udp_discovery_client"
  [ $DEBUG -eq 1 ] && echo >&2 "UDP discovery on local port $PORT_udp_discovery_server"
  # shellcheck disable=SC2086
  socat $DEBUG_OPTIONS_socat -u UDP-RECV:"$PORT_udp_discovery_server" CREATE:$FILENAME_udp_server & # move in background
  socat_discovery_server_pid=$!
  [ $DEBUG -eq 1 ] && echo >&2 Socat discovery server PID = $socat_discovery_server_pid

  newPacketBody $CMD_broadcast
  createPacketTX
  #-R socat appends to file
  # shellcheck disable=SC2086
  {
    # shellcheck disable=SC2059
    printf "$PACKET_TX_ECHO"
    sleep $TIMEOUT_SCAN
  } | socat $DEBUG_OPTIONS_socat -R "$FILENAME_udp_client" - udp-datagram:255.255.255.255:$PORT_udp_discovery_client,broadcast >/dev/null #disable stdout echo of rx data, sleep timeout EOF on STDIN
  #(printf "\xff\xff\x12\x00\x04\x16"; sleep 3) | socat -d -d -x -R rxsocat  - udp-datagram:255.255.255.255:46000,broadcast
  kill $socat_discovery_server_pid

  cat "$FILENAME_udp_client" "$FILENAME_udp_server" >"$FILENAME_discovery" # Merge results from udp/tcp discovery
  #ff ff 12 00 27 48 3f da 54 14 ec c0 a8 03 50 af c8 17 47 57 31 30 30 30 41 2d 57 49 46 49 31 34 45 43 20 56 31 2e 36 2e 38 91
  # .  .  .  .  '  H  ?  .  T  .  .  .  .  .  P  .  .  .  G  W  1  0  0  0  A  -  W  I  F  I  1  4  E  C     V  1  .  6  .  8

  rxscan=$(od -A n -t x1 -v -w"$(stat -c %s "$FILENAME_discovery")" "$FILENAME_discovery")
  [ $DEBUG -eq 1 ] && echo Keeping files in "$PWD" "$FILENAME_discovery" "$FILENAME_udp_client" "$FILENAME_udp_server"
  ((!DEBUG)) && rm "$FILENAME_discovery" "$FILENAME_discovery_sorted" "$FILENAME_udp_client" "$FILENAME_udp_server"

  rxscan_sorted=$(printf "%s" "${rxscan//" ff ff 12"/"\nff ff 12"}" | sort -u | tail -n +3) # Skips first few lines which is a newline followed by broadcast (0x12) command

  printf "%s" "$rxscan_sorted" >"$FILENAME_discovery_sorted"

  while read -r line; do # loop through all received broadcasts and parse them
    if [ "${line:0:8}" = "ff ff 12" ]; then
      hex_escape=""
      n=0
      while [ "$n" -lt  ${#line} ]; do
        hex_escape="$hex_escape\x${line:$n:2}" # create \x escape codes for echo
         n=$(( n + 3))
      done
          # shellcheck disable=SC2059
      printf "$hex_escape" >"$FILENAME_rx"
      readHexASCII "$FILENAME_rx"
      parsePacket
    fi
  done <<<"$rxscan_sorted"

}

 checksum () {
  typeset n
  #caller 0

  PACKET_CHECKSUM=0
 # [ $DEBUG -eq 1 ] && echo >&2 checksum start PACKET_BODY "${PACKET_BODY[@]}"
  #http://mywiki.wooledge.org/BashGuide/Arrays
  #for ((n = 0; n < ${#PACKET_BODY[@]}; n++)); do
  #for n in "${!PACKET_BODY[@]}"; do
   n=0;
   while [ "$n" -lt "${#PACKET_BODY[@]}" ]; do
    PACKET_CHECKSUM=$(( (PACKET_CHECKSUM + ${PACKET_BODY[$n]}) & 0xff ))
    n=$(( n + 1))
   done
  decToHex $PACKET_CHECKSUM
  PACKET_CHECKSUM=$VALUE_HEX
  #[ $DEBUG -eq 1 ] && echo >&2 PACKET_CHECKSUM "$PACKET_CHECKSUM"
}

 writeString  () {
  typeset n

  [ $DEBUG -eq 1 ] && echo >&2 "${FUNCNAME[0]} $1 len ${#1}"
  decToHex ${#1}
  PACKET_BODY+=("$VALUE_HEX")
  n=0
  while [ "$n" -lt ${#1} ]; do
    decToHex "'${1:$n:1}"
    PACKET_BODY+=("$VALUE_HEX")
    n=$(( n + 1 ))
  done
}

 writeUInt32BE () {
  writeUInt 32 "$1"
}
 writeUInt16BE () {
  writeUInt 16 "$1"
}

 writeUInt8 () {
  writeUInt 8 "$1"
}

 writeUInt () {
  typeset hex

  case $1 in
      
       8)  #printf -v hex "%02x" "$2" 2>/dev/null ||  
           hex=$( printf "%02x" "$2")
           #VALUE_UINT8_HEX=$hex
            ;;
      
      16) #printf -v hex "%04x" "$2" 2>/dev/null ||  
          hex=$( printf  "%04x" "$2")
          #VALUE_UINT16BE_HEX=$hex
           ;;
      
      32) #printf -v hex "%08x" "$2" 2>/dev/null ||
          hex=$(  printf "%08x" "$2" )
          #VALUE_UINT32BE_HEX=$hex
          ;;
  esac
   
  n=0
  while  [ "$n" -lt ${#hex} ]; do # Convert to byte array
    PACKET_BODY+=(0x"${hex:$n:2}")
    n=$(( n + 2))
  done
}

 decToHex () {
  VALUE_HEX=$( printf "0x%02x" "$1" ) 
    
}

 newCustomizedPacket () {
  newPacketBody $CMD_write_customized
  writeString   "$C_WS_CUSTOMIZED_ID"
  writeString   "$C_WS_CUSTOMIZED_PASSWORD"
  writeString   "$C_WS_CUSTOMIZED_SERVER"
  writeUInt16BE "$C_WS_CUSTOMIZED_PORT"
  writeUInt16BE "$C_WS_CUSTOMIZED_INTERVAL"
  writeUInt8    "$C_WS_CUSTOMIZED_TYPE"
  writeUInt8    "$C_WS_CUSTOMIZED_ENABLED"
}

 newPathPacket () {
  newPacketBody $CMD_write_path
  writeString "$C_WS_CUSTOMIZED_PATH_WU"
  writeString "$C_WS_CUSTOMIZED_PATH_ECOWITT"
}

 sendSystem ()
{
 
  typeset dst
  dst=0

  if ! isNumber "$1" || [ "$1" -gt 1 ]; then
    echo Error: System type must be 0 for WH24, or 1 for WH65 - "$1" invalid
    return $ERROR_SYSTEMPARAM_NOTSPECIFIED
  fi

  if ! isNumber "$2" || [ "$2" -ge ${#SYSTEM_TIMEZONE[@]} ]; then
     echo Error: System timezone index must be 0 -  $(( ${#SYSTEM_TIMEZONE[@]} - 1 )) - "$2" invalid
     printTimezones 
     return $ERROR_SYSTEMPARAM_NOTSPECIFIED
  fi

  if ! isNumber "$3" || [ "$3" -gt 1 ]; then
    echo Error: Daylight saving must be 0 for disabled, or 1 for enabled - "$3" invalid
    return $ERROR_SYSTEMPARAM_NOTSPECIFIED
  fi


  if ! isNumber "$4" || [ "$4" -gt 1 ]; then
    echo Error: Auto timezone must be 0 for disabled, or 1 for enabled - "$4" invalid
    return $ERROR_SYSTEMPARAM_NOTSPECIFIED
  fi

  #TODO dst=

#        CONFIGURATION[$CONF_system_dst_status_bit]=$(( "${CONFIGURATION[$CONF_system_dst_status]}" & 0x1 ))
#     CONFIGURATION[$CONF_system_timezone_auto_bit]=$(( ( "${CONFIGURATION[$CONF_system_dst_status]}" & 0x2 ) >> 1 )) # bit 2 1= off, 0=on ?
  
  if [  "$4" -eq 0 ]; then
    dst=$(( $3 | 2 ))
  else
    dst=$(( $3 ))
  fi

  newPacketBody $CMD_write_system
  writeUInt8 0    #frequency - only read
  writeUInt8 "$1"   #sensortype 0=WH24, 1=WH65
  writeUInt32BE 0 #UTC time - only read
  writeUInt8 "$2"   #timezone index
  writeUInt8 "$dst"   #daylight saving - dst
  sendPacket
}

 sendRaindata () {
 # if ! [[ "$1" =~ ^[0-9]+$ ]] || ! [[ "$2" =~ ^[0-9]+$ ]] || ! [[ "$3" =~ ^[0-9]+$ ]] || ! [[ "$4" =~ ^[0-9]+$ ]]; then
 if ! isNumber "$1" || ! isNumber "$2" || ! isNumber "$3" || ! isNumber "$4"; then
    echo Error: Raindata has "element(s)" which is not a number
    return $ERROR_RAINDATA_NOTSPECIFIED
  fi 

  [ $DEBUG -eq 1 ] && >&2 echo  rainday "$2" rainweek "$3" rainmonth "$4" rainyear "$5"
  
  newPacketBody $CMD_write_raindata
  writeUInt32BE "$1" #rainday
  writeUInt32BE "$2" #rainweek
  writeUInt32BE "$3" #rainmonth
  writeUInt32BE "$4" #rainyear
  [ $DEBUG -eq 1 ] && echo >&2 "Sending raindata rd $1 rw $2 rm $3 ry $4"
  sendPacket
}

 sendCalibration ()
{
  newPacketBody $CMD_write_calibration
  writeUInt16BE "$1" #intempoffset
  writeUInt8    "$2" #inhumidityoffset
  writeUInt32BE "$3" #absoffset
  writeUInt32BE "$4" #reloffset
  writeUInt16BE "$5" #outtempoffset
  writeUInt8    "$6" #outhumidityoffset
  writeUInt16BE "$7" #winddiroffset

 [ $DEBUG -eq 1 ] && echo >&2 "Sending calibration itempo $1 iho $2 abso $3 relo $4 otempo $5 oho $6 wdo $7"
  sendPacket

}

 sendEcowittInterval () {
# observation: GW1000 red-wifi led blinks slowly if not sending data to ecowitt when 0=off
  if [ "$1" -ge 0 ] && [ "$1" -le 5 ]; then
      newPacketBody $CMD_write_ecowitt_interval
      writeUInt8 "$1" #interval
      [ $DEBUG -eq 1 ] && echo >&2 Sending ecowitt interval "$1"
      sendPacket
  else
      >&2 echo Error Not a valid ecowitt interval, range 0-5 minutes
  fi
}

 sendWeatherservice () {

  newPacketBody "$1"
  writeString "$2"
  writeString "$3"
  
  case "$1" in
      "$CMD_write_wow")
        writeUInt8 0 # stationnum size - unused
        writeUInt8 1
        ;;
        
      "$CMD_write_weathercloud")
        writeUInt8 1
        ;;
  esac
  [ $DEBUG -eq 1 ] && echo >&2 "Sending weather service $1 id $2 password $3"
  sendPacket
}

 sendCustomized () {
  newCustomizedPacket
  sendPacket

  newPathPacket
  sendPacket

}

 updateCustomized () {
  typeset value
  typeset key
 
  #readarray -d ',' -t OPTION_CUSTOMIZED < <(echo -n "$1") # <<< HERE string appends 0x0a -> using process substitution

  [ $DEBUG -eq 1 ] && echo >&2 "${FUNCNAME[0]} $1"

  OPTION_CURRENT=$1

  while [ -n  "$OPTION_CURRENT" ]; do

# first parse , expressions format: enabled=1,port=8000,server=test.no
      IFS=,
      read -r OPTION_CUSTOMIZED NEXT_OPTIONS << EOF
$OPTION_CURRENT
EOF

    [ $DEBUG -eq 1 ] && echo >&2 "${FUNCNAME[0]} OPTION_CUSTOMIZED $OPTION_CUSTOMIZED $NEXT_OPTIONS"

# second parse = expressions
    IFS='='
    read -r  key value << EOF
$OPTION_CUSTOMIZED
EOF

    [ $DEBUG -eq 1 ] && echo >&2 "${FUNCNAME[0]} KEY $key len ${#key} VALUE $value len ${#value}"

    case "$key" in

          id)
              [ $DEBUG -eq 1 ] && echo >&2 Update customized_id from "$C_WS_CUSTOMIZED_ID to $value"
              C_WS_CUSTOMIZED_ID=$value
            ;;
          
          password|pw)
          
              [ $DEBUG -eq 1 ] && echo >&2 Update customized_password from "${C_WS_CUSTOMIZED_PASSWORD} to $value"
              C_WS_CUSTOMIZED_PASSWORD=$value
            ;;

          server|s)
          
              [ $DEBUG -eq 1 ] && echo >&2 Update customized_server from "$C_WS_CUSTOMIZED_SERVER to $value"
              C_WS_CUSTOMIZED_SERVER=$value
            
            ;;

          port|p)
              if ! isNumber "$value" ; then
                 echo >&2 Error NaN cannot set customized port to $(( value )) from "$value"
              else
                C_WS_CUSTOMIZED_PORT=$(( value ))
                [ $DEBUG -eq 1 ] && echo >&2 Update customized_port from "$C_WS_CUSTOMIZED_PORT to $value"
              fi

            ;;

          type|t)
          
             case $value in

                wunderground|wu|w|1)
                   value=$(( 1 ))
                ;;
             
                ecowitt|ec|e|0)
                   value=$(( 0 ))
                ;;

             esac
            
              if ! isNumber "$value"  ; then
                 echo >&2 Error NaN cannot set customized type to "$value"
              else
                 C_WS_CUSTOMIZED_TYPE=$(( value ))
                 [ $DEBUG -eq 1 ] && echo >&2 Update customized_type from "$C_WS_CUSTOMIZED_TYPE to $value"
              fi

            ;;

          enabled|e)

             case $value in
                 
                 on|1)
                 value=$(( 1 ))
                 ;;

                 off|0)
                 value=$(( 0 ))
                 ;;
             esac
          
            if ! isNumber "$value"; then
                  echo >&2 Error Cannot set customized enabled to "$value"
            else
              [ $DEBUG -eq 1 ] && echo >&2 Update customized_enabled from "$C_WS_CUSTOMIZED_ENABLED to $value"
              C_WS_CUSTOMIZED_ENABLED=$value
            fi

            ;;

          interval|i)
          
               if ! isNumber "$value"  ; then
                 echo >&2 Error NaN cannot set customized interval to "$value"
              else
                 [ $DEBUG -eq 1 ] && echo >&2 Update customized_interval from $C_WS_CUSTOMIZED_INTERVAL to "$value"
                   C_WS_CUSTOMIZED_INTERVAL=$(( value ))
              
              fi
            
            ;;
          
          path_wunderground|path_wu|pwu)
          
              [ $DEBUG -eq 1 ] && echo >&2 Update customized_path_wu from "$C_WS_CUSTOMIZED_PATH_WU to $value"
              C_WS_CUSTOMIZED_PATH_WU=$value
            
            ;;
          
          path_ecowitt|path_ec|pec)

              [ $DEBUG -eq 1 ] && echo >&2 Update customized_ecowitt_path from "$C_WS_CUSTOMIZED_PATH_ECOWITT to $value"
              C_WS_CUSTOMIZED_PATH_ECOWITT=$value

            ;;

          *)
            echo >&2 Skipped updateCustomized: unknown key "$key" value: "$value"
            ;;
    esac

    OPTION_CURRENT=$NEXT_OPTIONS

  done

  #https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash

    [ $DEBUG -eq  1 ] && >&2 printCustomized
  
    sendCustomized

}

 convertScale10ToFloat () {
# $1 - number to convert
  typeset -i int
  typeset -i frac
  typeset -i number
  typeset sign
  
  number=$(( $1 ))
  if [ "$number" -lt 0 ]; then
   number=$(( number * - 1))
   sign="-"
  fi

  if [ "$number" -lt  10 ]; then
    #printf -v VALUE_SCALE10_FLOAT "%s" "0.$1" 2>/dev/null ||
     VALUE_SCALE10_FLOAT=$sign"0.$number"
  else
    int=$(( number / 10))
    frac=$(( number - int * 10))
    #printf -v VALUE_SCALE10_FLOAT "%u.%u" $int $frac 2>/dev/null ||
     VALUE_SCALE10_FLOAT=$sign"$int.$frac" 
  fi
}

 initnc ()
{
  typeset nc_ver
  typeset nc_ver_header
  typeset nc_status
  typeset nc_exec
  typeset ncat_exec

  nc_exec=$(which nc 2>/dev/null)
  if [ -z "$nc_exec" ]; then
     ncat_exec=$(which ncat 2>/dev/null) # try ncat, if nc not availale
     if [ -n "$ncat_exec" ]; then
       NC_CMD=ncat
     fi
  else
    NC_CMD=nc
  fi
    
  if [ -n "$NC_CMD" ]; then 
        nc_ver=$($NC_CMD --version 2>&1 )
        nc_status=$?
        if [ "$nc_status" -eq 0 ]; then
          if [[ $nc_ver = *nmap* ]]; then
            NC_VERSION=$NC_NMAP
          elif [[ $nc_ver = *toybox* ]]; then
            NC_VERSION=$NC_TOYBOX
          fi
          NC_VERSION_STR=$nc_ver
        else
          read -r nc_ver_header <<<  "$nc_ver"
          if [[ $nc_ver_header == "nc: invalid option --"* ]]; then
            NC_VERSION=$NC_OPENBSD
            NC_VERSION_STR="nc openbsd (probably)"
          else
              >&2 echo "Error Unknown nc version header $nc_ver" 
              NC_VERSION=$NC_OPENBSD
              NC_VERSION_STR="nc unknown"
          fi
        fi

        [ "$DEBUG" -eq 1 ] && >&2 "echo nc version detection $NC_VERSION_STR"

        return 0
  else
    return $ERROR_NO_NC
  fi
}

 initConfigDir () {

  DIR=$HOME'/.config/gw' # .config subdirectory used for configuration on gnome/linux
  [ -n "$EXTERNAL_STORAGE" ] && DIR=$EXTERNAL_STORAGE # testing in Android 11 adb shell
  [ ! -d "$DIR" ] && mkdir -p -v "$DIR" 1>&2
  [ "$DEBUG" -eq 1 ] && echo >&2 Configuration directory "$DIR"
  
  SHELLPID=$$
  FILENAME_tx=$DIR"/txpacket-$SHELLPID"
  FILENAME_rx=$DIR"/rxpacket-$SHELLPID"
  FILENAME_discovery=$DIR"/rxsocat-$SHELLPID"
  FILENAME_discovery_sorted=$DIR/"rxsocat_sorted-$SHELLPID"
  FILENAME_udp_server="$FILENAME_discovery"_UDP_"$PORT_udp_discovery_server"-$SHELLPID
  FILENAME_udp_client="$FILENAME_discovery"_UDP_"$PORT_udp_discovery_client"-$SHELLPID
  FILENAME_livedata_description=$DIR/'livedata-description.txt'
  FILENAME_od_hex=$DIR/"rxpacket-od-hex-$SHELLPID.txt"

}

 initLivedataFieldDescriptionRenaming ()
{
  if [ ! -s "$FILENAME_livedata_description" ]; then
     [ "$DEBUG" -eq 1 ] && >&2 echo Warning "$FILENAME_livedata_description" is empty or does not exists, using default names for livedata field descriptions
     return 1
  fi

  #mapping from livedata field in decimal to names
  #26=bedroom,  #27=livingroom
  
  IFS='='
  while read -r LDFTYPE LDNAME; do
    if [ -z "$LDFTYPE" ] || [[ "$LDFTYPE" = *#* ]] ; then #skip comments
      continue;
    fi
     LIVEDATA_FIELDRENAME[$LDFTYPE]=$LDNAME
     [ $DEBUG -eq 1 ] && >&2 echo Livedata field type to name "$LDFTYPE=$LDNAME"
  done < "$FILENAME_livedata_description"

}


 showRainInfoMessage () {
  which notify-send >/dev/null && notify-send -t 3000 -i dialog-warning "gw script" "$1" &
  #https://www.shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash/
  printf "%s %s\n" "$(date)" "$1" # may add bell \a
  if [ -n "$2" ]; then
    which espeak >/dev/null && espeak -p10 "$2" &
  fi
}

 runRainNotification () { 
  # $1 - number of seconds between each rain probe
  # $2 - show start/stop messages only (1 on, 0 off)
  typeset rr
  typeset rd
  typeset rainInterval # raining continously for "$1" seconds
  typeset rainDuration # minutes raining
  typeset simulation
  typeset showStartStopEventOnly
  typeset rainTimeout
  rainTimeout=$1
  showStartStopEventOnly=$2

  simulation=0 # 1 = on for testing
  [ $DEBUG -eq 1 ] && >&2 echo Rain simulation $simulation
  [ "$simulation" -eq 1 ] && {
    rainTimeout=5
    showStartStopEventOnly=1
    CONFIGURATION[$CONF_rainrate]=0
    CONFIGURATION[$CONF_raindaily]=10
  } # { list ; } run in current shell

  [ $DEBUG -eq 1 ] && echo >&2 "Rain event interval $rainTimeout s. Show start/stop events only $showStartStopEventOnly"

  rainInterval=0
  while true; do
    [ "$simulation" -eq 0 ] && sendPacket $CMD_read_raindata >/dev/null
    [ "$simulation" -eq 1 ] && { CONFIGURATION[$CONF_rainrate]=$(("${CONFIGURATION[$CONF_rainrate]}" + 10 ))
    [ ${CONFIGURATION[$CONF_rainrate]} -eq 50 ] && CONFIGURATION[CONF_rainrate]=0; }
    convertScale10ToFloat "${CONFIGURATION[$CONF_rainrate]}"
    rr=$VALUE_SCALE10_FLOAT
    convertScale10ToFloat "${CONFIGURATION[$CONF_raindaily]}"
    rd=$VALUE_SCALE10_FLOAT
    if [ "${CONFIGURATION[$CONF_rainrate]}" -ne 0 ]; then
      rainInterval=$((rainInterval+1))
      if [ "$rainInterval" -eq 1 ]; then
        showRainInfoMessage "☂ Raining $rr mm/h.Today $rd mm" "Its raining! $rr millimeter per hour. Today $rd millimeter"
      else
        if [ "$showStartStopEventOnly" != "1" ]; then
          showRainInfoMessage "☂ Raining $rr mm/h. Today $rd mm"
        fi
      fi
    fi
    if [ "$rainInterval" -gt 0 ] && [ "${CONFIGURATION[$CONF_rainrate]}" -eq 0 ]; then
      rainDuration=$((rainInterval * rainTimeout / 60)) # integer only in bash
      showRainInfoMessage "Raining stopped! Today $rd mm. Rained for $rainDuration minutes." "Raining stopped! Today $rd millimeter. It rained for $rainDuration minutes."
      rainInterval=0
    fi
    sleep "$rainTimeout"
  done
}

 updateSensorIdRange ()
#$1 - search or disable
{
  typeset r
  r=$STYPE_MIN
  while [ "$r" -le "$STYPE_MAX" ]; do 
    #    for (( r=STYPE_MIN; r<= STYPE_MAX; r++ )); do 
            setConfigurationSensor "$r" "$1"
            r=$(( r + 1))
  done
}

 setConfigurationSensor ()
#$1 - STYPE sensor type
#$2 - SID sensor id
{
typeset overwrite
typeset updated
 updated=0
 overwrite=0
 
  #check if index already has a value
  for i in "${CONFIGURATION_SENSOR_INDEX[@]}"; do
    if [ "$1" = "$i" ]; then
     overwrite=1
    fi
  done

  if [ $overwrite -eq 1 ]; then
     [ $DEBUG -eq 1 ] && >&2 echo "Overwrite sensor configuration value ${CONFIGURATION_SENSOR[$i]} index $1 with value $2"
      CONFIGURATION_SENSOR[$1]=$2

      for i in "${CONFIGURATION_SENSOR_UPDATE_INDEX[@]}"; do #dont append new index if already marked for update
          if [ "$1" = "$i" ]; then
             updated=1
          fi
      done

     if [ $updated -eq 0 ]; then
      [ $DEBUG -eq 1 ] && >&2 echo "Update sensor configuration index $1"
      CONFIGURATION_SENSOR_UPDATE_INDEX+=( "$1" ) #keep track of updated sensors, for example used for writing only updated sensors to gw1000
     fi 

  else #this is a new sensor
     [ $DEBUG -eq 1 ] && >&2 echo "Setting sensor configuration index $1 to value $2"
      CONFIGURATION_SENSOR[$1]=$2
      CONFIGURATION_SENSOR_INDEX+=( "$1" ) # keeps track of sensor index with values/ids, zsh doesnt have ${!arr} - keys expansion
      CONFIGURATION_SENSOR_UPDATE_INDEX+=( "$1" )
  fi

  [ $DEBUG -eq 1 ] && >&2 echo "Indexes with values ${CONFIGURATION_INDEX[*]}"
}

 setSensorId_decprecate ()
#$1 - STYPE sensor type
#$2 - SID sensor id
{
 [ "$DEBUG" -eq 1 ] &&  >&2 echo "Setting sensor type $1 to $2"
                                                          
  CONFIGURATION_SENSOR[$1]=$(( $2 ))
  # only update when value overwritten
  CONFIGURATION_SENSOR_UPDATE_INDEX+=( "$1" )
}

 sendSensorId ()
{
  typeset type
  #debug : WSVIEW sensor overview is updated periodically to reflect current state

  if [ ${#CONFIGURATION_SENSOR_UPDATE_INDEX[@]} -eq 0 ]; then
    return 1
  fi

  newPacketBody $CMD_write_sensor_id

  for type in "${CONFIGURATION_SENSOR_UPDATE_INDEX[@]}"; do
  
    writeUInt8 "$type"                  # 1 byte packet length? (255-3)/5 bytes pr field = 50 sensor types max
    writeUInt32BE "${CONFIGURATION_SENSOR[$type]}"

    #[ $DEBUG -eq 1 ] && 
    >&2 printf "Write sensor type %3d id %8x\n" "$type" "${CONFIGURATION_SENSOR[$type]}"
  done

  sendPacket
}

 getReadArrayOption ()
{
  if [ -n "$BASH_VERSION" ]; then
         READARRAY_OPTION="-a"
      elif [ -n "$ZSH_VERSION" ] || [ -n "$KSH_VERSION" ]; then
       READARRAY_OPTION="-A"
      fi
}

 connectGW () {
  typeset lan_mac
  typeset lan_mac_lc #lowercase
  typeset ap_mac
  typeset ap_all_scan
  typeset ap_scan
  typeset ap_scan_result
  typeset connect_result
  typeset connect_str
  typeset connect_attempt
  typeset connect_attempt_MAX
  typeset connected
  typeset timeout
  typeset bssid_pattern

  timeout=5
  connected=1
  connect_attempt=0
  connect_attempt_MAX=15

  #useful for debugging: sudo nmcli device monitor and  sudo iw event -r

  if ! which nmcli >/dev/null; then
    return "$ERROR_NO_NMCLI"
  fi

  sudo nmcli radio wifi on
  echo >&2 Attempting to reconnect to device, waiting $timeout s for device to bootup after reset
  sleep $timeout # wait for reset/bootup

  # Station mode/LAN: MAC 48:3F:DA:54:14:EC, ssid/version GW1000A-WIFI14EC, AP-mode: MAC 4A:3F:DA:54:14:EC, GW1000-WIFI4EC
  # 48:3F:DA - EspressIf Inc. https://www.wireshark.org/tools/oui-lookup.html
  #  nmcli dev wifi list : 4A:3F:DA:54:14:EC  GW1000-WIFI14EC  Infra  1     54 Mbit/s   77      ▂▄▆_  --
  # observation/seldom : 4A:3F:DA:54:14:EC SSID  ESP_5414EC -> hotsport started before ssid rename in firmware v.1.6.8?
  lan_mac=${CONFIGURATION[$CONF_broadcast_mac]//:/}
  toLowercase "${CONFIGURATION[$CONF_broadcast_mac]}"
  lan_mac_lc=$lowercase
  bssid_pattern=${lan_mac:9}

  while ((connected == 1 && connect_attempt < "$connect_attempt_MAX")); do
    ((connect_attempt++))

    [ $DEBUG -eq 1 ] && echo >&2 Connect attempt "$connect_attempt"
    if [ "$connect_attempt" -eq 1 ]; then
      ap_all_scan=$(sudo nmcli -t -e no -f BSSID,SSID,IN-USE dev wifi list --rescan yes) #use terse mode for fixed format string
    else
      ap_all_scan=$(sudo nmcli -t -e no -f BSSID,SSID,IN-USE dev wifi list --rescan auto)
    fi
    ap_scan=$(grep -F "$bssid_pattern" <<<"$ap_all_scan")
    ap_scan_result=$?

    if [ $ap_scan_result -eq 0 ] && [ -n "$ap_scan" ]; then
     
      [ $DEBUG -eq 1 ] && echo >&2 AP scan "$ap_scan"
     
       read -r $READARRAY_OPTION  -d':' nmcli_result <<< "$ap_scan"
     
      in_use=${nmcli_result[7]}
      ap_mac=${nmcli_result[0]}${nmcli_result[1]}${nmcli_result[2]}${nmcli_result[3]}${nmcli_result[4]}${nmcli_result[5]}
      ap_mac=${ap_mac:0:-1}

      if [ "$in_use" != "*" ]; then
        [ $DEBUG -eq 1 ] && echo >&2 Connecting to bssid "$ap_mac"
        connect_str=$(sudo nmcli -w 5 dev wifi connect "$ap_mac") #nmcli has a default timeout of 45 seconds, try just waiting 5 s
        connect_result=$?
        echo >&2 "$connect_str"
      fi

      if [ $connect_result -eq 0 ] && [[ $connect_str != Error* ]] || [ "$in_use" == "*" ]; then
        [ $DEBUG -eq 1 ] && arp -n | grep -F "${lan_mac_lc:9}" >&2
        connected=0
        #ip -4 -o address
      fi

    fi

    ((connected == 1)) && sleep 5
  done

  ip address

}

 initSearchPatternForCommand ()
{
     SPATTERN=$1
     if [ -z "$SPATTERN" ] || [ "$SPATTERN" = "*" ] || [ "${SPATTERN:0:1}" = "-" ]; then
        SPATTERN='.*' #add default search for any pattern
     fi
     toLowercase "$SPATTERN"
     SPATTERN=$lowercase
}


 nextArgEmptyOrOption ()
{
  [ -z "$1" ]  ||  [ "${1:0:1}" = "-" ]
}

 printCommands ()
{
  echo reset reboot mac "system|sys ecowitt|ec wunderground|wu weathercloud|wc wow customized|c|cust broadcast|b rain|r livedata|ld sensor_id sensor_id_new|sid|sensor|s calibration|cal"  
}

 processCommand () {
#$1 - field pattern for livedata/sensor id

 shift # remove {command} (to -c option) -> all args to {command} starts at $1

  case $COMMAND in

       "")
          printCommands
       ;;

        reset)
          
          sendPacket $CMD_broadcast $FD_UDP >/dev/null
          
          echo "Reset ${CONFIGURATION[$CONF_broadcast_mac]} ${CONFIGURATION[$CONF_broadcast_ssid]} (Y/N)? "
          read -r
          
          case $REPLY in
          Y)
            sendPacket $CMD_write_reset # 3 blink in red LED
            connectGW                     # assume user wants to reconnect for setting up new WIFI
            ;;
          esac
          
          ;;

        reboot)
          
          sendPacket $CMD_reboot
          ;;

        mac)
          
          sendPacket $CMD_read_mac
          ;;

        version|ver)
          
          sendPacket $CMD_read_version
          ;;

        system|sys)
          
          if nextArgEmptyOrOption "$1"; then 
            sendPacket $CMD_read_system
          else
            if [ $# -lt  4 ]; then
              echo >&2 "Error {sensortype} {timezoneindex} {dst} {autotimezone} must be specified"
            else
              sendSystem "$1" "$2" "$3" "$4"
            fi
          fi
          ;;

        ecowitt|ec|e)
           
          if nextArgEmptyOrOption "$1"; then
            sendPacket $CMD_read_ecowitt_interval
          else
           sendEcowittInterval "$1"
          fi
          ;;

        wunderground|wu)

            if nextArgEmptyOrOption "$1"; then
              sendPacket $CMD_read_wunderground;
            else
              if [ $# -lt 2 ]; then
                 echo >&2 "Error {id} {password} must be specified"
              else
                  sendWeatherservice "$CMD_write_wunderground" "$1" "$2"
              fi
            fi 

          ;;

        wow)
          
          if nextArgEmptyOrOption "$1"; then
            sendPacket $CMD_read_wow
          else
            if [ $# -lt 2 ]; then
                 echo >&2 "Error {id} {password} must be specified"
              else
                  sendWeatherservice "$CMD_write_wow" "$1" "$2"
              fi
          fi
          ;;

        weathercloud|wc)

          if nextArgEmptyOrOption "$1"; then
            sendPacket $CMD_read_weathercloud
          else
                if [ $# -lt 2 ]; then
                  echo >&2 "Error {id} {key} must be specified"
                else
                    sendWeatherservice "$CMD_write_weathercloud" "$1" "$2"
                fi
          fi
          ;;

        customized|c|cust)

          if nextArgEmptyOrOption "$1"; then 
            sendPacket $CMD_read_path
            sendPacket $CMD_read_customized
          else
            sendPacket $CMD_read_path >/dev/null
            sendPacket $CMD_read_customized >/dev/null
            updateCustomized "$1"
          fi
          ;;

        broadcast|b)
          sendPacket $CMD_broadcast $FD_UDP
          ;;

        rain|r)

          if nextArgEmptyOrOption "$1"; then
            sendPacket $CMD_read_raindata
          else

            if [ $# -lt 4 ]; then # validate rain input
              echo >&2 "Error: {rainday} {week} {month} {year} parameters not specified"
            else
               sendRaindata "$1" "$2" "$3" "$4"
            fi
          
          fi
            
          ;;

        livedata|ld|live|l)
          
          initSearchPatternForCommand "$1"
          sendPacket $CMD_livedata
                ;;

        sensor_id)
          
          initSearchPatternForCommand "$1"
          sendPacket $CMD_read_sensor_id
          ;;

        sensor_id_new|sid|sensor|s) # for new SENSOR_TYPE types
    
          initSearchPatternForCommand "$1"
          sendPacket $CMD_read_sensor_id_new
          ;;

        calibration|cal)

          sendPacket $CMD_read_calibration
          ;;

        *)
              
              echo >&2 Error Unknown command "$COMMAND" "$@"
              return 1
              ;;
  esac

  return 0
}

 isNumber ()
{
    #https://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash?page=1&tab=votes#tab-top
    case $1 in
      ''|*[!0-9]*) return 1 ;;
                *) return 0 ;;
    esac
}

 getConfigurationIndexFromName ()
{
  typeset -i i

  i=0
  while [ $i -lt ${#CONFIGURATION_NAME[@]} ]; do
    if [ -n "${CONFIGURATION_NAME[$i]}" ] && [ "${CONFIGURATION_NAME[$i]}" = "$1" ]; then
       CONFIGURATION_NAME_INDEX=$i
       break;
    fi
   i=$((i + 1))
  done
}

 initShell ()
{
        #shellcheck disable=2050
  if [[ a =~ a ]] 2>/dev/null; then
   SHELL_SUPPORT_TILDE_REGEX=1
  else
   SHELL_SUPPORT_TILDE_REGEX=0
  fi

}

#read -r -u 0 -t 0 STDIN

#if [ -n "$STDIN" ]; then
#  echo STDIN "$STDIN"
   :
  #maybe parse packet if gw used as filter echo hex dump | gw

#fi

getReadArrayOption #-a/-A for read command based on shell
initShell
initConfigDir
if ! initnc; then
  echo >&2 Error nc/ncat not found
  exit $ERROR_NO_NC
fi
initLivedataFieldDescriptionRenaming

#https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
unset POSITIONAL

while [ $# -gt 0 ]; do

  key="$1"

  case $key in

  -b | --backup)

    sendPacket $CMD_read_mac >/dev/null
    sendPacket $CMD_read_version >/dev/null
    sendPacket $CMD_broadcast >/dev/null
    sendPacket $CMD_read_ecowitt_interval >/dev/null
    sendPacket $CMD_read_wunderground >/dev/null
    sendPacket $CMD_read_wow >/dev/null
    sendPacket $CMD_read_weathercloud >/dev/null
    sendPacket $CMD_read_customized >/dev/null
    sendPacket $CMD_read_path >/dev/null
    sendPacket $CMD_read_raindata >/dev/null
    sendPacket $CMD_read_sensor_id_new >/dev/null
    sendPacket $CMD_read_calibration >/dev/null
    # some data probably saved to device EEPROM
    # TODO? calibration data?
    if [ -n "$2" ]; then #save to file
      printConfiguration >"$2"
      shift 2
    else
      printConfiguration #or just stdout
      shift 1
    fi
    ;;
  
  -c | --command)

    toLowercase "$2"
    COMMAND=$lowercase
    shift 1 # remove -c 
    
    processCommand "$@" 

    for param in "$@"; do #remove params to command (until new - option) 
        if [ "${param:0:1}" != "-" ]; then
            [ $DEBUG -eq 1 ] && >&2 echo Shift param "$@" "$param"
          shift
          else
            break #breakout to process new - option
        fi
    done

    unset COMMAND
    ;;

  -d | --debug)
    DEBUG=1
    DEBUG_OPTIONS_socat='-d -d -x'
    #DEBUG_OPTIONS_nc="-v"
    shift
    ;;

  -f | --firmware)
    HTTP_UA_NAME="gw script BASH ${BASH_VERSION} $(uname -srv)"
    HTTP_FIRMWARE="http://download.ecowitt.net/down/filewave?v=FirwaveReadme.txt"
    [ $DEBUG -eq 1 ] && printf >&2 "%s\n%s" "$HTTP_UA_NAME" "$HTTP_FIRMWARE"
    curl --silent --show-error --user-agent "$HTTP_UA_NAME" "$HTTP_FIRMWARE"
    shift 2
    ;;

  -h | --host)
    HOST_PREV=$HOST
    HOST="$2" # this arg must come first to open socketsopen file descriptors to UDP/TCP port on HOST

    #if ! connect "$2"; then
    #  echo >&2 "$HOST" "Error Failed to connect host $2, exiting"
    #  disconnect
    #  exit $ERROR_CONNECTION
    #fi
    setConfiguration $CONF_host "$HOST"
    #sendPacket "$CMD_read_mac" >/dev/null
    sendPacket "$CMD_read_version" >/dev/null
    sendPacket "$CMD_read_system" >/dev/null  # find sensor type WH65/WH24 - &> redirect stderr+stdout - read_system not available on EasyWeather
    #maybe: option to turn off?
    #>&2  printf "%s %s\n" "${CONFIGURATION[$CONF_version]}" "${CONFIGURATION[$CONF_system_utc_state]}" 
    
    shift 2
    ;;
 
  -l | --listen)
    echo >&2 Listening for http request on port "$2"
    eval 'mapfile HTTP_REQUEST < <($NC_CMD -l "$2")'
    n=0
    while [ "$n" -lt  ${#HTTP_REQUEST[@]} ]; do
      echo "${HTTP_REQUEST[$n]}"
      n=$(( n + 1))
    done
    shift 2
    ;;
    # Wunderground
    #GET /wundergroundID=testid&PASSWORD=testpassword&tempf=63.0&humidity=82&dewptf=57.4&windchillf=63.0&winddir=355&windspeedmph=3.36&windgustmph=4.47&rainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&solarradiation=206.87&UV=2&indoortempf=74.3&indoorhumidity=61&baromin=29.760&soilmoisture=16&lowbatt=0&dateutc=now&softwaretype=GW1000A_V1.6.8&action=updateraw&realtime=1&rtfreq=5 HTTP/1.0
    #Accept: */*
    #Host: 192.168.3.174
    #Connection: Close

    # Ecowitt
    #POST /ecowitt HTTP/1.1
    #HOST: 192.168.3.174
    #Connection: Close
    #Content-Type: application/x-www-form-urlencoded
    #Content-Length:591
    #
    #PASSKEY=976D09F15C41FD8DC6E9A9E8C4F39707&stationtype=GW1000A_V1.6.8&dateutc=2021-08-10+12:08:12&tempinf=74.1&humidityin=61&baromrelin=29.754&baromabsin=29.754&tempf=63.0&humidity=82&winddir=15&windspeedmph=3.80&windgustmph=4.47&maxdailygust=5.82&solarradiation=206.01&uv=2&rainratein=0.000&eventrainin=0.051&hourlyrainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&totalrainin=4.811&temp1f=68.72&humidity1=67&temp2f=72.14&humidity2=63&temp3f=80.24&humidity3=48&soilmoisture1=16&wh65batt=0&batt1=0&batt2=0&batt3=0&soilbatt1=1.4&freq=868M&model=GW1000_Pro
    #
    #A = 868 Mhz GW1000A, B= , C= 433

    #quick ecowitt parsing
    #IFS='&' read -a data <<<$(nc  -l 8080 -i 0.1 | tail -n +7) && for f in "${data[@]}"; do echo $f; done

  -r | --restore)

    unset CONFIGURATION
    unset CONFIGURAITION_INDEX
    unset CONFIGURATION_SENSOR
    unset CONFIGURATION_SENSOR_UPDATE_INDEX
    unset CONFIGURATION_SENSOR_INDEX
    typeset -a CONFIGURATION
    typeset -a CONFIGURATION_SENSOR
    typeset -a CONFIGURATION_SENSOR_UPDATE_INDEX # sensor types that needs update/write
    typeset -a CONFIGURATION_SENSOR_INDEX

    if [ -s "$2" ]; then 
      IFS=' '
      #shellcheck disable=2034
      while read -r K V DISCARD; do
        unset CONFIGURATION_INDEX
        STYPE=$(expr "$K" : "$CONFIGURATION_SENSORFIELD\([0-9]*\)" ) # extracts number part from sensortype_{number}
        if [ -n "$STYPE" ]; then
          setConfigurationSensor "$STYPE" "$V"
        else
           getConfigurationIndexFromName "$K"
           if [ -n "$CONFIGURATION_NAME_INDEX" ]; then 
            [ "$DEBUG" -eq 1 ] && echo >&2 "$K" "Configuration[$CONFIGURATION_NAME_INDEX]=$V"
             setConfiguration $CONFIGURATION_NAME_INDEX "$V"
           fi
        fi
      
      done < "$2"
      
      printConfiguration >&2

      sendEcowittInterval "${CONFIGURATION[$CONF_ecowitt_interval]}"
      sendWeatherservice "$CMD_write_wunderground" "${CONFIGURATION[$CONF_wunderground_id]}" "${CONFIGURATION[$CONF_wunderground_password]}"
      sendWeatherservice "$CMD_write_wow"          "${CONFIGURATION[$CONF_wow_id]}"          "${CONFIGURATION[$CONF_wow_password]}"
      sendWeatherservice "$CMD_write_weathercloud" "${CONFIGURATION[$CONF_weathercloud_id]}" "${CONFIGURATION[$CONF_weathercloud_password]}"
      sendCustomized
      sendRaindata "${CONFIGURATION[$CONF_raindaily]}" "${CONFIGURATION[$CONF_rainweek]}" \
                    "${CONFIGURATION[$CONF_rainmonth]}" "${CONFIGURATION[$CONF_rainyear]}"
      sendSensorId
      sendCalibration "${CONFIGURATION[$CONF_calibration_intempoffset]}" "${CONFIGURATION[$CONF_calibration_inhumidityoffset]}" \
                      "${CONFIGURATION[$CONF_calibration_absoffset]}" "${CONFIGURATION[$CONF_calibration_reloffset]}" \
                      "${CONFIGURATION[$CONF_calibration_outtempoffset]}" "${CONFIGURATION[$CONF_calibration_outhumidityoffset]}" \
                      "${CONFIGURATION[$CONF_calibration_windiroffset]}"

        shift 2

    elif [ -z "$2" ]; then

      >&2 echo Error no backup file specified
       shift
    else
      >&2 echo Error "$2 does not exists or is empty";
      shift 2
    fi

    ;;

  -m | --sensor)

    if [ -n "$2" ] && [ "${2:0:1}" != '-' ]; then 

          case $2 in
           
            *=*) # parameter contains =

                      unset CONFIGURATION_SENSOR_UPDATE_INDEX #array -> contains sensortype to update

                      #sendPacket "$CMD_read_sensor_id_new" >/dev/null
                    
                        # $2 -  {sensortype}=search|disable|hexid,{st1-stn}=search|disable|hexid,...
                        IFS=","
                        if [ -n "$BASH_VERSION" ]; then
                          arrayOption='-a'
                        elif [ -n "$KSH_VERSION" ] || [ -n "$ZSH_VERSION" ]; then
                          arrayOption='-A'
                        else
                          arrayOption='-A'
                        fi
#shellcheck disable=2229
                        read -r $arrayOption SENSOR_MANAGEMENT  <<< "$2" 

                        s_disable="disable"
                        s_search="search"
                        n=0

                        while [ "$n" -lt ${#SENSOR_MANAGEMENT[@]} ];  do

                              IFS='='
                              read -r STYPE SID <<< "${SENSOR_MANAGEMENT[$n]}" # {st1-stn}=search|disable|hexid (for example 1-10=search)

                              if [ -z "$SID" ]; then
                               >&2 echo Sensor id after = empty, use search/disable/hexid
                                n=$(( n + 1 ))
                                continue
                              fi
                              
                              IFS='-'
                              read -r STYPE_MIN STYPE_MAX <<< "$STYPE" 
 
                              [ "$DEBUG" -eq 1 ] && >&2 echo "STYPE_MIN $STYPE_MIN STYPE_MAX $STYPE_MAX"
 
                              #https://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash/806923
                              STYPE_INVALID=0
                              [ -z "$STYPE_MAX" ] && STYPE_MAX=$STYPE_MIN

                              if ! isNumber  "$STYPE_MIN"; then # first check for valid number, then check limits
                                 >&2 echo "$STYPE_MIN is  invalid sensor type/number"
                                STYPE_INVALID=1
                              elif ! isNumber "$STYPE_MAX"; then  
                                  >&2 echo "$STYPE_MAX is invalid sensor type/number"
                                  STYPE_INVALID=1
                              elif [ "$STYPE_MIN" -gt "$SENSORTYPE_MAX" ] || [ "$STYPE_MIN" -gt "$STYPE_MAX" ]; then
                                  >&2 echo "$STYPE_MIN is not valid, max is $SENSORTYPE_MAX"
                                  STYPE_INVALID=1
                              elif [  "$STYPE_MAX" -gt "$SENSORTYPE_MAX" ] || [ "$STYPE_MAX" -lt "$STYPE_MIN" ]; then  
                                 >&2 echo "$STYPE_MAX is invalid, max is $SENSORTYPE_MAX";
                                  STYPE_INVALID=1    
                              fi

                              if [ "$STYPE_INVALID" -eq 1 ]; then 
                                n=$(( n + 1 ))
                                continue
                              fi 

                              [ "$DEBUG" -eq  1 ] &&  >&2 echo Parsing expression $n "${SENSOR_MANAGEMENT[$n]}" STYPE "$STYPE" SID "$SID"

                              toLowercase "$SID"
                              SID=$lowercase
                              s_search=${s_search:0:${#SID}}
                              s_disable=${s_disable:0:${#SID}} # shrink search pattern for matching

                             if [ "$SID" = "$s_search" ]; then
                                 updateSensorIdRange $SENSOR_SEARCH
                             elif [ "$SID" = "$s_disable" ] && [ "$SID" != 'd' ]; then
                                 updateSensorIdRange $SENSOR_DISABLE
                             else
                                r=$STYPE_MIN
                                if [ "$r" -eq "$STYPE_MAX" ]; then 
                                #https://www.gnu.org/software/grep/manual/html_node/Regular-Expressions.html#Regular-Expressions
                                      if [ -n "$BASH_VERSION" ] ||  [ -n "$ZSH_VERSION" ]; then 
                                                #extended regular expression ^ -start of line $-end of line - {1,8} iterator/quantifier
                                          eval 'if [[ $SID =~ ^[a-fA-F0-9]{1,8}$ ]]; then 
                                                          setConfigurationSensor "$r" 0x"$SID" 
                                                else
                                                        >&2 echo "Error unknown or invalid sensor id $SID, use disable/search/hexid"
                                                fi'
                                          #use eval to avoid syntax error in mirbsd korn shell/android
                                      elif [[ $KSH_VERSION == Version* ]]; then
                                          eval 'if [[ $SID == {1,8}([a-fA-F0-9]) ]]; then
                                                          setConfigurationSensor "$r" 0x"$SID" 
                                                else
                                                        >&2 echo "Error unknown or invalid sensor id $SID, use disable/search/hexid"
                                                fi'
                                        #http://www.mirbsd.org/htman/i386/man1/mksh.htm
                                      elif [[ $KSH_VERSION == *MIRBSD* ]]; then #android shell
                                          eval 'if [[ $SID == +([a-f]|[A-F]|[0-9]) && ${#SID} -le 8 ]]; then 
                                                          setConfigurationSensor "$r" 0x"$SID" 
                                                else
                                                    >&2 echo "Error unknown or invalid sensor id $SID, use disable/search/hexid"
                                                fi'
                                      elif echo "$SID" | grep -E -q "^[a-fA-F0-9]{1,8}$"; then  
                                                  setConfigurationSensor "$r" 0x"$SID"
                                      else
                                          echo >&2 "Error shell not supported, cannot set $r to $SID"
                                      fi
                                        r=$(( r + 1 ))
                                else
                                    echo >&2 "Error cannot set type $STYPE_MIN-$STYPE_MAX to same id $SID"
                                fi
                                #expr $SID : "\([a-fA-F0-9]\+\)" works in BASH/KSH/ZSH, but not MIRBSD KSH - \+ - one or more repetitions \() - extract substring

                              fi

                              n=$(( n + 1 ))
                          
                          done

                          if [ "${#CONFIGURATION_SENSOR_UPDATE_INDEX}" -ge 1 ] ; then sendSensorId; fi

                        shift 2
                          ;;

             *) # assume its a search pattern if it does not contain =

                        initSearchPatternForCommand "$2"
                        sendPacket "$CMD_read_sensor_id_new"
                        shift 2
                        ;;

          esac
         
     else
         initSearchPatternForCommand
         sendPacket $CMD_read_sensor_id_new
         shift
     fi

     ;;

  -n | --notifyrain)
    runRainNotification "$2" "$3" #tested on GNOME
    shift 3
    ;;

  -s | --scan)
      if [ -n "$2" ] && [ "${2:0:1}" != '-' ]; then 
        discovery "$2"
        shift 2
      else
        discovery
        shift 1
      fi
    
    ;;

  -t | --timezones)
      printTimezones
      ;;
  
  -x | --read-timeout)

     TIMEOUT_READ="$2"
     shift 2
     ;;

  -z | --customized)

    updateCustomized "$2"
    shift 2
    ;;

  -w | --wifi)
    
    newPacketBody $CMD_write_ssid
    #ssid packet has two byte length
    # TEST wsview android app, wireshark: ffff | 11 |001b| 08536b6f676c756e640d6c756775626572313934322d2e | a9
    #WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/ConfigrouterFragment.java - SaveData
    writeString "$2" # ssid
    writeString "$3" # password
    sendPacket

    shift 3
    ;;

  *)                   # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac

done

[ ${#POSITIONAL[@]} -ge 1 ] && echo >&2 Failed to recognize options "${POSITIONAL[@]}"

set -- "${POSITIONAL[@]}" # restore positional parameters

#disconnect

##echo CMD_BROADCAST
#command '\x12\x00\x04\x15' $FD_UDP
#https://unix.stackexchange.com/questions/612193/socat-send-a-udp-broadcast-from-stdin-but-handling-responses-with-system
#printf "\xff\xff\x12\x00\x04\x16" | socat -d -d -x -t 1 - udp-datagram:255.255.255.255:46000,broadcast
