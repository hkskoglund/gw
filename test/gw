#!/bin/bash
# Utility for administration of GW-1000 configuration
# example ./gw -s
# scan for devices
# example ./gw -h 10.42.0.180 -c mac
# read mac

#Protocol documentation : https://osswww.ecowitt.net/uploads/20210716/WN1900%20GW1000,1100%20WH2680,2650%20telenet%20v1.6.0%20.pdf (https://www.ecowitt.com/shop/forum/forumDetails/255)
#https://devhints.io/bash

#for debugging
#echo PID "$$"
#read -r -p "DEBUG - press key to continue"

SHELLIFS=$IFS

declare -i DEBUG
DEBUG=0

declare -A DEBUG_OPTIONS
DEBUG_OPTIONS[dd]='status=none'

declare -A PORT

PORT[tcp_command_server]=45000
PORT[udp_discovery_server]=59387
PORT[udp_discovery_client]=46000

declare -A CMD

CMD[read_version]=0x50
CMD[reboot]=0x40
CMD[read_mac]=0x26
CMD[write_ssid]=0x11
CMD[broadcast]=0x12
CMD[write_reset]=0x41

#weather services
CMD[read_ecowitt_interval]=0x1e
CMD[write_ecowitt_interval]=0x1f

CMD[read_wunderground]=0x20
CMD[write_wunderground]=0x21

CMD[read_wow]=0x22
CMD[write_wow]=0x23

CMD[read_weathercloud]=0x24
CMD[write_weathercloud]=0x25

#customized server for ecowitt/wunderground http requests
CMD[read_customized]=0x2a
CMD[write_customized]=0x2b
CMD[read_path]=0x51
CMD[write_path]=0x52

CMD[read_raindata]=0x34
CMD[write_raindata]=0x35

CMD[livedata]=0x27

declare -a LIVEDATA

declare -a LDFIELD
LDFIELD[0x01]="INTEMP:indoor temperature:℃:2:1"
LDFIELD[0x02]="OUTTEMP:outdoor temperature:℃:2:1"
LDFIELD[0x06]="INHUMI:indoor humidity:%:1:0"
LDFIELD[0x07]="OUTHUMI:outdoor humidity:%:1:0"
LDFIELD[0x08]="ABSBARO:absolute pressure:hpa:2:1"
LDFIELD[0x09]="RELBARO:relative pressure:hpa:2:1"
LDFIELD[0x0A]="WINDDIRECTION:wind direction:°:2:0"
LDFIELD[0x0B]="WINDSPEED:wind speed:m/s:2:1"
LDFIELD[0x19]="WINDGUSTDAILYMAX:wind gust daily max:m/s:2:1"
LDFIELD[0x0C]="WINDGUST:wind gust:m/s:2:1"
LDFIELD[0x0D]="RAINEVENT:rain event:mm:2:1"
LDFIELD[0x0E]="RAINRATE:rain rate:mm/h:2:1"
LDFIELD[0x0F]="RAINHOUR:rain hour:mm:2:1"
LDFIELD[0x10]="RAINDAILY:rain daily:mm:2:1"
LDFIELD[0x11]="RAINWEEK:rain week:mm:2:1"
LDFIELD[0x12]="RAINMONTH:rain month:mm:4:1"
LDFIELD[0x13]="RAINYEAR:rain year:mm:4:1"
LDFIELD[0x15]="LIGHT:light:lx:4:1" # lux=lumen/m2]
LDFIELD[0x16]="UV:UV radiation:µW/m2:2:1"
LDFIELD[0x17]="UVI:UV index (0-15)::1:0"
for ((LDFT=0x2A, LDFT2=0x4D, CH=1;CH<=4; CH++, LDFT++,LDFT2++ )); do
  if (( CH == 2 )); then LDFT=$((0x51)); fi
   LDFIELD[$LDFT]="PM25_CH$CH:PM2.5 air quality sensor CH$CH:μg/m3:2:1"
   LDFIELD[$LDFT2]="PM25_24HAVG_CH$CH:PM2.5 air quality sensor 24 h average CH$CH:μg/m3:2:1"
done
for ((LDFT=0x2B, CH=1;CH<=16; CH++, LDFT=LDFT+2 )); do
   LDFIELD[$LDFT]="SOILTEMP_CH$CH:soil temperature CH$CH:℃:2:1"
   LDFIELD[(( LDFT + 1 ))]="SOILHUMI_CH$CH:soil humidity CH$CH:%:1:0"
done
for ((LDFT=0x1A, LDFT2=0x22, CH=1;CH<=8; CH++, LDFT++,LDFT2++ )); do
   LDFIELD[$LDFT]="TEMP_CH$CH:temperature CH$CH:℃:2:1"
   LDFIELD[$LDFT2]="HUMI_CH$CH:humidity CH$CH:%:1:0"
done
for ((LDFT=0x58, CH=1;CH<=4; CH++, LDFT++ )); do
   LDFIELD[$LDFT]="LEAK_CH$CH:leak CH$CH::1:0"
done

# PACKET BODY STARTING AT BYTE 2 (from 0 index, first 0xff 0xff)
PACKET_BODY=()

#CONNECT ERRORS
ERROR_CONNECTION=1
ERROR_RAINDATA_NOTSPECIFIED=2
ERROR_NO_NMCLI=3
ERROR_NO_SOCAT=4
#ERROR_READ_RESPONSE=3

declare -A CONFIGURATION

declare -a LDFNAMEDESC
declare -a LDFACTIVE # found fields in livedata from host

function newLivedataFieldNameDesc
{
  IFS=':'
  #echo Keys "${!LDFIELD[@]}"
  for k in "${!LDFIELD[@]}"; do
    read -r FNAME FDESC FREST <<< "${LDFIELD[$k]}"
     LDFNAMEDESC[$k]="$FNAME $FDESC"
  done
}

function listLivedataFieldsAndDescription
# $1 - if non-zero list only active fields found during parsing of livedata, else list all known fields
{
  local fn
  local fd
  local fk
  
  IFS=' '

  fk="${!LDFIELD[*]}"
  [ -n "$1" ] && fk="${LDFACTIVE[*]}"
  
  for k in $fk; do
    read -r fn fd <<< "${LDFNAMEDESC[$k]}"  
    printf "%-16s %s\n" "$fn" "$fd"
  done
}

function connect {
  # Info  from https://www.xmodulo.com/tcp-udp-socket-bash-shell.html
  local host="$1"

  if [ -v FD_TCP ] || [ -v FD_UDP ]; then # True if the shell variable varname is set (has been assigned a value). - man bash
    ((DEBUG)) && echo >&2 "$HOST_PREV closing connection"
    disconnect
  fi

  #https://www.gnu.org/software/bash/manual/bash.html - 3.6 Redirections
  if exec {FD_UDP}<>/dev/udp/"$host"/"${PORT[udp_discovery_client]}"; then
    ((DEBUG)) && echo >&2 "$host:${PORT[udp_discovery_client]} Connected (UDP FD $FD_UDP)"
  else
    return $ERROR_CONNECTION
  fi

  if exec {FD_TCP}<>/dev/tcp/"$host"/"${PORT[tcp_command_server]}"; then
    ((DEBUG)) && echo >&2 "$host:${PORT[tcp_command_server]} Connected (TCP FD $FD_TCP)"
  else
    return $ERROR_CONNECTION
  fi

  #Current shell PID $$

  if ((DEBUG)); then
    netstat -tunp | grep "$$"
  fi

  [ -v FD_TCP ] && [ -v FD_UDP ]

}

function disconnect {
  #https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
  #close sockets
  if [ -v FD_UDP ]; then

    if ! exec {FD_UDP}>&-; then echo >&2 Failed to close $FD_UDP; fi
    ((DEBUG)) && echo >&2 "Closing FD $FD_UDP (UDP)"

    unset FD_UDP
  fi

  if [ -v FD_TCP ]; then

    if ! exec {FD_TCP}>&-; then echo >&2 Failed to close $FD_TCP; fi
    ((DEBUG)) && echo >&2 "Closing FD $FD_TCP (TCP)"

    unset FD_TCP
  fi
}

function getCommandName {
#$1 - command hex to get name to
  #set -x # turn on debug
  for name in "${!CMD[@]}"; do # ${!array} iterate over keys
    if ((${CMD[$name]} == $1)); then
      echo $name
      #return 0
    fi
  done
  #set +x # turn off debug
  return 1
}

function parseResultPacket {
  local cmd="0x${PACKET_RX[2]}"

  STATUS=0x${PACKET_RX[4]}
  echo -n "$(getCommandName "$cmd")" "$STATUS" >&2
  if ((STATUS == 0)); then
    echo >&2 " OK"
  elif ((STATUS == 1)); then
    echo >&2 " FAIL"
  else
    echo >&2 -e '\n'
  fi
}

function printStack {
  echo "${FUNCNAME[@]}"
}

function printCustomized {

  echo "customized_id ${CONFIGURATION[customized_id]}"
  echo "customized_password ${CONFIGURATION[customized_password]}"
  echo "customized_server ${CONFIGURATION[customized_server]}"
  echo "customized_port ${CONFIGURATION[customized_port]}"
  echo "customized_interval ${CONFIGURATION[customized_interval]}"

  if ((CONFIGURATION[customized_type] == 1)); then
    echo "customized_type 1 wunderground"
  elif ((CONFIGURATION[customized_type] == 0)); then
    echo "customized_type 0 ecowitt "
  else
    echo "customized_type ${CONFIGURATION[customized_type]}" "UNKNOWN"
  fi

  if ((CONFIGURATION[customized_enabled] == 1)); then
    echo "customized_enabled 1 ON"
  elif ((CONFIGURATION[customized_enabled] == 0)); then
    echo "customized_enabled 0 OFF"
  else
    echo "customized_enabled ${CONFIGURATION[customized_enabled]} UNKNOWN"
  fi

  echo "customized_ecowitt_path ${CONFIGURATION[customized_ecowitt_path]}"
  echo "customized_wunderground path ${CONFIGURATION[customized_wunderground_path]}"
}

function printConfiguration {
  #echo "${!CONFIGURATION[@]}"
  #https://www.artificialworlds.net/blog/2012/10/17/bash-associative-array-examples/
  for K in "${!CONFIGURATION[@]}"; do printf "%-30s %s\n" "$K" "${CONFIGURATION[$K]}"; done
}

function readUInt8 {
  VALUE_HEX="0x${PACKET_RX_HEX:(($RX_POS * 2)):2}"
  printf -v VALUE_UINT8 "%u" "$VALUE_HEX"
  ((RX_POS = RX_POS + 1))
}

function readUInt16BE {
  printf -v VALUE_UINT16BE "%u" "0x${PACKET_RX_HEX:(($RX_POS * 2)):4}"
  ((RX_POS = RX_POS + 2))
}

function readUInt32BE {
  printf -v VALUE_UINT32BE "%u" "0x${PACKET_RX_HEX:(($RX_POS * 2)):8}"
  ((RX_POS = RX_POS + 4))
}

function readString {
  local len=0x${PACKET_RX[$RX_POS]}
  VALUE_STRING="${PACKET_RX_OD[1]:(($RX_POS + 1)):len}"
  ((RX_POS = RX_POS + "$len" + 1))
}

function printRain {
  local rr
  local rd
  local rw
  local rm
  local ry
  convertScale10ToFloat "${CONFIGURATION[rainrate]}"
  rr=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[rainday]}"
  rd=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[rainweek]}"
  rw=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[rainmonth]}"
  rm=$VALUE_SCALE10_FLOAT
  convertScale10ToFloat "${CONFIGURATION[rainyear]}"
  ry=$VALUE_SCALE10_FLOAT
  #echo rainrate "${CONFIGURATION[rainrate]} "
  #echo rainday "${CONFIGURATION[rainday]} "
  #echo rainweek "${CONFIGURATION[rainweek]} "
  #echo rainmonth "${CONFIGURATION[rainmonth]} "
  #echo  rainyear "${CONFIGURATION[rainyear]}"
  #echo "rainrate $rr rainday $rd rainweek $rw rainmonth $rm rainyear $ry"
  printf "rainrate %s\nrainday %s\nrainweek %s\nrainmonth %s\nrainyear %s\n" "$rr" "$rd" "$rw" "$rm" "$ry"
}

function convertToDirectionName
#$1 - direction in degrees
#http://snowfence.umn.edu/Components/winddirectionanddegrees.htm
{
  VALUE_DIRECTION_NAME=""
  if   (( $1 <= 11 ||  $1 > 349)); then
    VALUE_DIRECTION_NAME="N"
  elif (( $1 > 11 && $1 < 34)); then
    VALUE_DIRECTION_NAME="NNE"
  elif (( $1 >=34 && $1 <= 56 )); then
    VALUE_DIRECTION_NAME="NE";
  elif (( $1 > 56 && $1 <= 79 )); then
    VALUE_DIRECTION_NAME="ENE";
  elif (( $1 > 79 && $1 <= 101 )); then
    VALUE_DIRECTION_NAME="E"
  elif (( $1 > 101 && $1 <= 124 )); then
    VALUE_DIRECTION_NAME="ESE"
  elif (( $1 > 124 && $1 <= 146 )); then
    VALUE_DIRECTION_NAME="SE"
  elif (( $1 > 146 && $1 <= 169 )); then
    VALUE_DIRECTION_NAME="SSE"
  elif (( $1 > 169 && $1 <= 191 )); then
    VALUE_DIRECTION_NAME="S"
  elif (( $1 > 191 && $1 <= 214 )); then
    VALUE_DIRECTION_NAME="SSW"
  elif (( $1 > 214 && $1 <= 236 )); then
    VALUE_DIRECTION_NAME="SW"
  elif (( $1 > 236 && $1 <= 259 )); then
     VALUE_DIRECTION_NAME="WSW"
  elif (( $1 > 259 && $1 <= 281 )); then
     VALUE_DIRECTION_NAME="W"
  elif (( $1 > 281 && $1 <= 304 )); then
     VALUE_DIRECTION_NAME="WNW"
  elif (( $1 > 304 && $1 <= 326 )); then
     VALUE_DIRECTION_NAME="NW"
  elif (( $1 > 326 && $1 <= 349 )); then
     VALUE_DIRECTION_NAME="NNW"
  fi
}

function parseLivedata
# $1 -pattern to match
{
  local fieldTypeHex
  local fieldTypeHexSub
  local match

  RX_POS=5
  
  if [ "$1" == "*" ]; then
    LDPATTERN='.*'
  fi
  LDPATTERN=${LDPATTERN,,} # to lowercase

 ((DEBUG )) && >&2 echo parseLivedata "LDPATTERN" "$LDPATTERN"

  IFS=':'
  LDFACTIVE=()


  while (( "$RX_POS" < (${#PACKET_RX[@]} - 1) )); do

    (( DEBUG ))&& >&2 echo PACKET_RX_HEX "${PACKET_RX_HEX:(( $RX_POS * 2 ))}" RX_POS "$RX_POS" PACKET_RX_LENGTH "${#PACKET_RX[@]}"

    readUInt8
    fieldTypeHex=$VALUE_HEX

    fieldTypeHexSub=${fieldTypeHex:2}
    fieldTypeHexSub=0x${fieldTypeHexSub^^} #^^ all characters to uppercase -> 0x0a -> 0x0A
    LDFACTIVE+=( "$fieldTypeHexSub" ) # keep track of discovered fields

    read -r LDFNAME LDFDESC LDFUNIT LDFBYTES LDFSCALE <<< "${LDFIELD[$fieldTypeHexSub]}"
   
    case "$LDFBYTES" in 

       1) readUInt8
          LIVEDATA[$fieldTypeHexSub]=$VALUE_UINT8
          ;;

       2) readUInt16BE
          LIVEDATA[$fieldTypeHexSub]=$VALUE_UINT16BE
          ;;
           
       4) readUInt32BE
          LIVEDATA[$fieldTypeHexSub]=$VALUE_UINT32BE
          ;;
     
     esac

     if (( LDFSCALE )); then
        convertScale10ToFloat "${LIVEDATA[$fieldTypeHexSub]}"
        LIVEDATA[$fieldTypeHexSub]=$VALUE_SCALE10_FLOAT
     fi

#|  
      if [[ ${LDFNAME,,} =~ ^${LDPATTERN} ]] || [[ ${LDFDESC,,} =~ ${LDPATTERN} ]] ; then  # ^ line starts with, ,,=to lowercase
      match=1
        printf "%8s %s %s\n" "${LIVEDATA[$fieldTypeHexSub]}" "$LDFUNIT" "$LDFDESC"
      fi

  done

  (( DEBUG )) && >&2 echo active fields "${LDFACTIVE[@]}"

  if (( match == 0)); then
  >&2 echo "Error Failed to match '$LDPATTERN' in current livedata fields"
     listLivedataFieldsAndDescription 1
    
  fi
}

function parsePacket {
  local cmd
  RX_POS=4 # current read position for indexing PACKET_RX_OD[1] - ASCII string from od utility

  cmd=0x${PACKET_RX[2]}

  #Packet length
  case $cmd in

    "${CMD[broadcast]}" | "${CMD[livedata]}" )
    
      printf -v PACKET_RX_LENGTH "%u" "0x${PACKET_RX[3]}${PACKET_RX[4]}"
      ;;
    
    *)
       PACKET_RX_LENGTH=0x${PACKET_RX[3]}
      ;;
    
  esac

  ((DEBUG)) && echo >&2 "Parse packet ${PACKET_RX[*]} length $PACKET_RX_LENGTH"

  case $cmd in

  "${CMD[write_reset]}" | "${CMD[write_customized]}" | "${CMD[write_path]}" | "${CMD[reboot]}" | "${CMD[write_ssid]}" | "${CMD[write_raindata]}" | "${CMD[write_ecowitt_interval]}" | "${CMD[write_wunderground]}" | "${CMD[write_wow]}" | "${CMD[write_weathercloud]}")
    parseResultPacket
    ;;

  "${CMD[read_mac]}")

    CONFIGURATION[mac]=$(printf "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[4]}" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}")
    echo "${CONFIGURATION[mac]}"
    ;;

  "${CMD[read_version]}")

    readString
    CONFIGURATION[version]=$VALUE_STRING
    echo "${CONFIGURATION[version]}"
    ;;

  "${CMD[read_ecowitt_interval]}")

    readUInt8
    CONFIGURATION[ecowitt_interval]=$VALUE_UINT8
    echo "ecowitt_interval ${CONFIGURATION[ecowitt_interval]} minutes"
    ;;

  "${CMD[read_wunderground]}")

    readString
    CONFIGURATION[wunderground_id]=$VALUE_STRING
    readString
    CONFIGURATION[wunderground_password]=$VALUE_STRING

    echo "wunderground_id ${CONFIGURATION[wunderground_id]}"
    echo "wunderground_password ${CONFIGURATION[wunderground_password]}"
    ;;

  "${CMD[read_wow]}")

    readString
    CONFIGURATION[wow_id]=$VALUE_STRING
    readString
    CONFIGURATION[wow_password]=$VALUE_STRING

    echo "wow_id ${CONFIGURATION[wow_id]}"
    echo "wow_password ${CONFIGURATION[wow_password]}"
    ;;

  "${CMD[read_weathercloud]}")

    readString
    CONFIGURATION[weathercloud_id]=$VALUE_STRING
    readString
    CONFIGURATION[weathercloud_password]=$VALUE_STRING

    echo "weathercloud_id ${CONFIGURATION[weathercloud_id]}"
    echo "weathercloud_password ${CONFIGURATION[weathercloud_password]}"
    ;;

  "${CMD[read_customized]}")

    readString
    CONFIGURATION[customized_id]=$VALUE_STRING
    readString
    CONFIGURATION[customized_password]=$VALUE_STRING
    readString
    CONFIGURATION[customized_server]=$VALUE_STRING
    readUInt16BE
    CONFIGURATION[customized_port]=$VALUE_UINT16BE
    readUInt16BE
    CONFIGURATION[customized_interval]=$VALUE_UINT16BE
    readUInt8
    CONFIGURATION[customized_type]=$VALUE_UINT8
    readUInt8
    CONFIGURATION[customized_enabled]=$VALUE_UINT8

    printCustomized
    ;;

  "${CMD[read_path]}")

    readString
    CONFIGURATION[customized_ecowitt_path]=$VALUE_STRING
    readString
    CONFIGURATION[customized_wunderground_path]=$VALUE_STRING
    ;;

  "${CMD[broadcast]}")

    #this is the station MAC/ip on local network, when device is reset its annoncing hotspot accesspoint/AP with first byte of MAC changed
    # shellcheck disable=SC2102
    printf -v CONFIGURATION[broadcast_mac] "%02X:%02X:%02X:%02X:%02X:%02X" 0x"${PACKET_RX[5]}" 0x"${PACKET_RX[6]}" 0x"${PACKET_RX[7]}" 0x"${PACKET_RX[8]}" 0x"${PACKET_RX[9]}" 0x"${PACKET_RX[10]}"
    # shellcheck disable=SC2102
    printf -v CONFIGURATION[broadcast_ip] "%u.%u.%u.%u" 0x"${PACKET_RX[11]}" 0x"${PACKET_RX[12]}" 0x"${PACKET_RX[13]}" 0x"${PACKET_RX[14]}"
    RX_POS=17
    local ssid
    local version
    #        IFS=' '; read -r ssid version <<< "${PACKET_RX_OD[1]:(( $pos + 1)):0x${PACKET_RX[$pos]}}" # ssid appends space+version
    readString
    IFS=' '
    read -r ssid version <<<"$VALUE_STRING" # ssid appends space+version

    CONFIGURATION[broadcast_ssid]=$ssid
    CONFIGURATION[broadcast_version]=$version
    # shellcheck disable=SC2102
    printf -v CONFIGURATION[broadcast_port] "%u" 0x"${PACKET_RX[15]}""${PACKET_RX[16]}"
    echo "${CONFIGURATION[broadcast_mac]} ${CONFIGURATION[broadcast_ip]}:${CONFIGURATION[broadcast_port]} ${CONFIGURATION[broadcast_ssid]} ${CONFIGURATION[broadcast_version]}"

    ;;

  "${CMD[read_raindata]}")

    # echo "${PACKET_RX_HEX}" "$RX_POS_HEX"
    readUInt32BE
    CONFIGURATION[rainrate]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[rainday]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[rainweek]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[rainmonth]=$VALUE_UINT32BE
    readUInt32BE
    CONFIGURATION[rainyear]=$VALUE_UINT32BE

    printRain
    ;;

  "${CMD[livedata]}")

    parseLivedata "$LDPATTERN"

    ;;

  *)
    echo >&2 "Warning unable to parse command $cmd"
    ;;

  esac
}

function newPacketBody {
  PACKET_BODY=()
  PACKET_BODY+=("$1" "0x00")
  case "$1" in
  "${CMD[broadcast]}" | "${CMD[write_ssid]}") # WSVIEW sends 2 byte field for size
    PACKET_BODY+=("0x00")
    ((DEBUG)) && echo >&2 2-byte packet length
    ;;
  esac

  # [ -n "$1" ] &&  PACKET_BODY+=("0x00")  # Append for two byte packet length
}
function createPacketTX {
  local packetLengthLSB
  local packetLengthMSB
  local n

  #Update packet length, either 1 or 2 bytes
  case ${PACKET_BODY[0]} in
  "${CMD[write_ssid]}" | "${CMD[broadcast]}")
    packetLengthLSB=$(((${#PACKET_BODY[@]} + 1) & 0xff))
    packetLengthMSB=$((((${#PACKET_BODY[@]} + 1) & 0xff00) >> 8))
    decToHex $packetLengthMSB
    PACKET_BODY[1]=$VALUE_HEX
    decToHex $packetLengthLSB
    PACKET_BODY[2]=$VALUE_HEX
    ;;
  *)
    decToHex $((${#PACKET_BODY[@]} + 1))
    PACKET_BODY[1]=$VALUE_HEX # set packet length including checksum byte
    ;;
  esac

  checksum

  PACKET_TX=(0xff 0xff "${PACKET_BODY[@]}" "$CHECKSUM")

  ((DEBUG)) && echo >&2 PACKET_TX "${PACKET_TX[@]//0x/''}"

  PACKET_TX_ECHO=''
  for n in "${!PACKET_TX[@]}"; do
    PACKET_TX_ECHO+=${PACKET_TX[$n]}
  done
  PACKET_TX_ECHO=${PACKET_TX_ECHO//0x/'\x'}

  ((DEBUG)) && echo >&2 PACKET_TX_ECHO "$PACKET_TX_ECHO"

}

function readResponseCat {
  local timeoutCat=0.025 # Wireshark [Time delta from previous captured frame: 0.013166760 seconds]
  #   (( DEBUG )) && timeoutOptions='-v'
  # cat inside while (true) { continue read }
  #https://github.com/coreutils/coreutils/blob/bbb19b18687d5572dcbe7bbb1a48c8ee0f21786b/src/cat.c#L168
  # Actually response is read in the first call to read, then a second read is started on stdin/redirected FD, so cat has to be killed...
  # timeout "$timeoutOptions"--preserve-status $timeoutCat cat <&"$FD" >$FILENAME_RESPONSE
  cat <&"$FD" >"${FILENAME[rx]}" &
  sleep $timeoutCat
  kill %1
}

function readResponseDD {
  local dd_result
  ((DEBUG)) && unset "DEBUG_OPTIONS[dd]"
  # shellcheck disable=SC2086
  timeout 0.5 dd bs=1024 count=1 ${DEBUG_OPTIONS[dd]} <&"$FD" >${FILENAME[rx]} # timeout request, for example EasyWeather doesnt respond to rain command
  dd_result=$?
  if [ $dd_result -ne 0 ]; then
    echo >&2 Error DD failed to read response from FD "$FD", status "$dd_result"
  fi
  ((DEBUG)) && echo >&2 dd_result $dd_result
  return $dd_result

}

function readHexASCII {
  unset PACKET_RX -   # array of hex from hex string ff ff 12 -> (ff ff 12)
  unset PACKET_RX_OD  # two string array [0] = hex, [1] = ASCII
  unset PACKET_RX_HEX # compact hex string without spaces ffff
  IFS='>'
  read -r -a PACKET_RX_OD < <(od -A n -t x1z -v -w"$(stat -c %s "$1")" "$1")
  ((DEBUG)) && echo >&2 OD HEX "${PACKET_RX_OD[0]}"
  ((DEBUG)) && echo >&2 OD ASCII "${PACKET_RX_OD[1]}"
  readarray -d ' ' -t PACKET_RX < <(echo -n "${PACKET_RX_OD[0]:1:-2}") # :1 substring, removes space at the beginning, -2: removes two trailing spaces
  PACKET_RX_HEX=${PACKET_RX_OD[0]// /}                                 # strip off all spaces, just hex

}

function sendPacket
{
  sendPacketnc "$@"
  #sendPacketdd "$@"
}

function sendPacketnc
{
  local ncUDPOpt
  local port

  port=${PORT[tcp_command_server]}

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -ge 1 ]; then
    newPacketBody "$1"
    case "$1" in
      "${CMD[broadcast]}")
            ncUDPOpt='-u'
            port=${PORT[udp_discovery_client]}
    esac
 fi
   
  createPacketTX
  echo -ne "$PACKET_TX_ECHO" >"${FILENAME[tx]}"
 
  if nc ${DEBUG_OPTIONS[nc]} $ncUDPOpt -w 500ms -x "${FILENAME[nc-hex]}" -4 "$HOST" "$port" < <(cat "${FILENAME[tx]}"; sleep 0.1)  >"${FILENAME[rx]}"; then # wait 0.1s to disable READ KILL of nc on stdin

        IFS='>'

        if read -r -a PACKET_RX_OD < <(od -A n -t x1z -v -w"$(stat -c %s "${FILENAME[rx]}")"  "${FILENAME[rx]}" ); then
           (( DEBUG )) && {
            cat "${FILENAME[nc-hex]}"
            echo >&2 OD HEX "${PACKET_RX_OD[0]}" length "${#PACKET_RX_OD[0]}"
            echo >&2 OD ASCII "${PACKET_RX_OD[1]}" length "${#PACKET_RX_OD[1]}"
           }
            readarray -d ' ' -t PACKET_RX < <(echo -n "${PACKET_RX_OD[0]:1:-2}") # :1 substring, removes space at the beginning, -2: removes two trailing spaces
            PACKET_RX_HEX=${PACKET_RX_OD[0]// /}                                 # strip off all spaces, just hex
            if ((${#PACKET_RX[@]} == 0)); then
                echo >&2 "$HOST Warning no response received from host"
              else
                (( DEBUG  )) && echo >&2 PACKET_RX_HEX "$PACKET_RX_HEX" length "${#PACKET_RX_HEX}"
                parsePacket
              fi
        else
          echo >&2 Error failed to receive packet, error code $?
        fi
  else
     echo >&2 Error failed to send packet "$(getCommandName "$1")", error code $?
  fi
  
}

#including checksum byte
function sendPacketdd {
  #takes two arguments $1 - command, $2 is udp broadcast request
  local FD=$FD_TCP # default TCP command port

  [ -n "$2" ] && FD="$2" #may also use UDP for broadcast (ssid etc.)
  if [ ! -v FD ]; then
    echo >&2 Error connection to host not available, missing -h to host?
    exit $ERROR_CONNECTION
  fi

  ((DEBUG)) && echo >&2 "Using FD $FD for sending packet"

  #simple command https://stackoverflow.com/questions/6482377/check-existence-of-input-argument-in-a-bash-shell-script
  if [ $# -ge 1 ]; then
    newPacketBody "$1"
  fi

  # write command/read response

  createPacketTX
  echo -ne "$PACKET_TX_ECHO" >"${FILENAME[tx]}"
  #printf "%b" "$PACKET_TX_ECHO" >&"$FD" # echo -ne/printf "%b" splits packet at 0x0a if written directly to FD
  ((DEBUG)) && unset "DEBUG_OPTIONS[dd]"
  
  if dd if="${FILENAME[tx]}" ${DEBUG_OPTIONS[dd]} >&"$FD"; then 

      if readResponseDD; then #readResponseCat

        PACKET_TIMESTAMP=$(date)
        readHexASCII "${FILENAME[rx]}"

        if ((${#PACKET_RX[@]} == 0)); then
          echo >&2 "$HOST Warning no response received from host"
        else
          parsePacket
        fi
      fi
  else
     echo >&2 Error DD failed to send packet to FD "$FD", dd status $?
  fi

}

function discovery {
  local TIMEOUT_SCAN=2 #seconds
  local rxscan
  local rxscan_sorted
  local socat_discovery_server_pid
  local n
  local hex_escape

  ((!DEBUG)) && unset "DEBUG_OPTIONS[socat]"

  ((DEBUG)) && echo >&2 "UDP discovery on GW port "${PORT[udp_discovery_client]}
  ((DEBUG)) && echo >&2 "UDP discovery on local port "${PORT[udp_discovery_server]}
  # shellcheck disable=SC2086
  socat $SOCAT_DEBUG_OPTIONS -u UDP-RECV:"${PORT[udp_discovery_server]}" CREATE:${FILENAME[udp_server]} & # move in background
  socat_discovery_server_pid=$!
  ((DEBUG)) && echo >&2 Socat discovery server PID = $socat_discovery_server_pid

  newPacketBody ${CMD[broadcast]}
  createPacketTX
  #-R socat appends to file
  # shellcheck disable=SC2086
  {
    echo -ne "$PACKET_TX_ECHO"
    sleep $TIMEOUT_SCAN
  } | socat $SOCAT_DEBUG_OPTIONS -R "${FILENAME[udp_client]}" - udp-datagram:255.255.255.255:${PORT[udp_discovery_client]},broadcast >/dev/null #disable stdout echo of rx data, sleep timeout EOF on STDIN
  #(echo -ne "\xff\xff\x12\x00\x04\x16"; sleep 3) | socat -d -d -x -R rxsocat  - udp-datagram:255.255.255.255:46000,broadcast
  kill $socat_discovery_server_pid

  cat "${FILENAME[udp_client]}" "${FILENAME[udp_server]}" >"${FILENAME[discovery]}" # Merge results from udp/tcp discovery
  #ff ff 12 00 27 48 3f da 54 14 ec c0 a8 03 50 af c8 17 47 57 31 30 30 30 41 2d 57 49 46 49 31 34 45 43 20 56 31 2e 36 2e 38 91
  # .  .  .  .  '  H  ?  .  T  .  .  .  .  .  P  .  .  .  G  W  1  0  0  0  A  -  W  I  F  I  1  4  E  C     V  1  .  6  .  8

  rxscan=$(od -A n -t x1 -v -w"$(stat -c %s "${FILENAME[discovery]}")" "${FILENAME[discovery]}")
  ((DEBUG)) && echo Keeping files in "$PWD" "${FILENAME[discovery]}" "${FILENAME[udp_client]}" "${FILENAME[udp_server]}"
  ((!DEBUG)) && rm "${FILENAME[discovery]}" "${FILENAME[discovery_sorted]}" "${FILENAME[udp_client]}" "${FILENAME[udp_server]}"

  rxscan_sorted=$(echo -en "${rxscan//" ff ff 12"/"\nff ff 12"}" | sort -u | tail -n +3) # Skips first few lines which is a newline followed by broadcast (0x12) command

  echo -n "$rxscan_sorted" >"${FILENAME[discovery_sorted]}"

  while read -r line; do # loop through all received broadcasts and parse them
    if [[ "$line" =~ ^"ff ff 12" ]]; then
      hex_escape=""
      for ((n = 0; n < ${#line}; n = n + 3)); do
        hex_escape="$hex_escape\x${line:$n:2}" # create \x escape codes for echo
      done
      echo -ne "$hex_escape" >"${FILENAME[rx]}"
      readHexASCII "${FILENAME[rx]}"
      parsePacket
    fi
  done <<<"$rxscan_sorted"

}

function checksum {
  local n
  #caller 0

  CHECKSUM=0
  ((DEBUG)) && echo >&2 CHECKSUM PACKET_BODY "${PACKET_BODY[@]}"
  #http://mywiki.wooledge.org/BashGuide/Arrays
  #for ((n = 0; n < ${#PACKET_BODY[@]}; n++)); do
  for n in "${!PACKET_BODY[@]}"; do
    CHECKSUM=$(((CHECKSUM + ${PACKET_BODY[$n]}) & 0xff))
  done
  decToHex $CHECKSUM
  CHECKSUM=$VALUE_HEX
  ((DEBUG)) && echo >&2 CHECKSUM "$CHECKSUM"
}

function writeString {
  local n

  ((DEBUG)) && echo >&2 "${FUNCNAME[0]} $1 len ${#1}"
  decToHex ${#1}
  PACKET_BODY+=("$VALUE_HEX")
  for ((n = 0; n < ${#1}; n++)); do
    decToHex "'${1:$n:1}"
    PACKET_BODY+=("$VALUE_HEX")
  done
}

function writeUInt32BE {
  writeUInt 32 "$1"
}
function writeUInt16BE {
  writeUInt 16 "$1"
}

function writeUInt8 {
  writeUInt 8 "$1"
}

function writeUInt {
  local hex

  case $1 in
  8) printf -v hex "%02x" "$2" ;;
  16) printf -v hex "%04x" "$2" ;;
  32) printf -v hex "%08x" "$2" ;;
  esac

  for ((n = 0; n < ${#hex}; n = n + 2)); do
    PACKET_BODY+=(0x"${hex:$n:2}")
  done
}

function decToHex {
  ((DEBUG)) && echo >&2 $BASHPID "$1"
  printf -v VALUE_HEX "0x%02x" "$1"
}

function newCustomizedPacket {
  newPacketBody ${CMD[write_customized]}
  writeString "${CONFIGURATION[customized_id]}"
  writeString "${CONFIGURATION[customized_password]}"
  writeString "${CONFIGURATION[customized_server]}"
  writeUInt16BE "${CONFIGURATION[customized_port]}"
  writeUInt16BE "${CONFIGURATION[customized_interval]}"
  writeUInt8 "${CONFIGURATION[customized_type]}"
  writeUInt8 "${CONFIGURATION[customized_enabled]}"
}

function newPathPacket {
  newPacketBody ${CMD[write_path]}
  writeString "${CONFIGURATION[customized_wunderground_path]}"
  writeString "${CONFIGURATION[customized_ecowitt_path]}"
}

function sendRaindata {
  newPacketBody ${CMD[write_raindata]}
  writeUInt32BE "$1" #rainday
  writeUInt32BE "$2" #rainweek
  writeUInt32BE "$3" #rainmonth
  writeUInt32BE "$4" #rainyear
  ((DEBUG)) && echo >&2 "Sending raindata rd $1 rw $2 rm $3 ry $4"
  sendPacket
}

function sendEcowittInterval {
  newPacketBody ${CMD[write_ecowitt_interval]}
  writeUInt8 "$1" #interval
  ((DEBUG)) && echo >&2 Sending ecowitt interval "$1"
  sendPacket
}

function sendWeatherservice {
  newPacketBody "$1"
  writeString "$2"
  writeString "$3"
  case "$1" in
  "${CMD[write_wow]}")
    writeUInt8 0 # stationnum size - unused
    writeUInt8 1
    ;;
  "${CMD[write_weathercloud]}")
    writeUInt8 1
    ;;
  esac
  ((DEBUG)) && echo >&2 "Sending weather service $1 id $2 password $3"
  sendPacket
}

function sendCustomized {
  newCustomizedPacket
  sendPacket

  newPathPacket
  sendPacket

  if ((DEBUG)); then
    echo >&2 "Sending customized settings"
    printCustomized >&2
  fi
}

function updateCustomized {
  local needUpdate
  local key_value
  local value
  local key
  local n

  newPacketBody ${CMD[read_path]}
  sendPacket

  newPacketBody ${CMD[read_customized]} # read previous configuration
  sendPacket

  #format enabled=1,port=8000,server=test.no
  readarray -d ',' -t OPTION_CUSTOMIZED < <(echo -n "$1") # <<< HERE string appends 0x0a -> using process substitution

  ((DEBUG)) && echo >&2 "${FUNCNAME[0]} OPTION_CUSTOMIZED" "${OPTION_CUSTOMIZED[@]}" "${#OPTION_CUSTOMIZED[@]}"

  for n in "${!OPTION_CUSTOMIZED[@]}"; do

    ((DEBUG)) && echo >&2 "${FUNCNAME[0]} OPTION_CUSTOMIZED LOOP " "${OPTION_CUSTOMIZED[$n]} n=$n"

    readarray -d '=' -t key_value < <(echo -n "${OPTION_CUSTOMIZED[$n]}")

    key=${key_value[0]}
    value=${key_value[1]}

    ((DEBUG)) && echo >&2 "${FUNCNAME[0]} KEY $key len ${#key} VALUE $value len ${#value}"

    case "$key" in

    id)
      if [ "${CONFIGURATION[customized_id]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_id from "${CONFIGURATION[customized_id]} to $value"
        CONFIGURATION[customized_id]=$value
        needUpdate=1
      fi
      ;;
    password)
      if [ "${CONFIGURATION[customized_password]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_password from "${CONFIGURATION[customized_password]} to $value"
        CONFIGURATION[customized_password]=$value
        needUpdate=1
      fi
      ;;

    server)
      if [ "${CONFIGURATION[customized_server]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_server from "${CONFIGURATION[customized_server]} to $value"
        CONFIGURATION[customized_server]=$value
        needUpdate=1
      fi
      ;;

    port)

      if [ "${CONFIGURATION[customized_port]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_type from "${CONFIGURATION[customized_port]} to $value"
        CONFIGURATION[customized_port]=$value
        needUpdate=1
      fi
      ;;

    type)
      if [ "${CONFIGURATION[customized_type]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_type from "${CONFIGURATION[customized_type]} to $value"
        CONFIGURATION[customized_type]=$value
        needUpdate=1
      fi
      ;;

    enabled)
      if [ "${CONFIGURATION[customized_enabled]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_enabled from "${CONFIGURATION[customized_enabled]} to $value"
        CONFIGURATION[customized_enabled]=$value
        needUpdate=1
      fi
      ;;

    interval)
      if [ "${CONFIGURATION[customized_interval]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_interval from "${CONFIGURATION[customized_interval]} to $value"
        CONFIGURATION[customized_interval]=$value
        needUpdate=1
      fi
      ;;
    wunderground_path)
      if [ "${CONFIGURATION[customized_wunderground_path]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_wunderground_path from "${CONFIGURATION[customized_wunderground_path]} to $value"
        CONFIGURATION[customized_wunderground_path]=$value
        needUpdate=1
      fi
      ;;
    ecowitt_path)
      if [ "${CONFIGURATION[customized_ecowitt_path]}" != "$value" ]; then
        ((DEBUG)) && echo >&2 Update customized_ecowitt_path from "${CONFIGURATION[customized_ecowitt_path]} to $value"
        CONFIGURATION[customized_ecowitt_path]=$value
        needUpdate=1
      fi
      ;;

    *)
      echo updateCustomized: unknown key "$key" value: "$value"
      ;;
    esac

  done

  #https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash
  if ((needUpdate == 1)); then
    newCustomizedPacket
    sendPacket

    newPathPacket
    sendPacket

    printCustomized

  else
    echo >&2 Warning: no update needed for customized "$1"
  fi

}

function convertScale10ToFloat {
  local int
  local frac

  if (($1 < 10)); then
    printf -v VALUE_SCALE10_FLOAT "%s" "0.$1"
  else
    int=$(($1 / 10))
    frac=$(($1 - int * 10))
    printf -v VALUE_SCALE10_FLOAT "%u.%u" $int $frac
  fi
}

function initConfigDir {

  DIR=$HOME'/.config/gw'
  ((DEBUG)) && echo >&2 Configuration directory "$DIR"
  [ ! -d "$DIR" ] && mkdir -v "$DIR" 1>&2

  FILENAME[tx]=$DIR'/txpacket'
  FILENAME[rx]=$DIR'/rxpacket'
  FILENAME[discovery]=$DIR'/rxsocat'
  FILENAME[discovery_sorted]=$DIR/'rxsocat_sorted'
  FILENAME[udp_server]="${FILENAME[discovery]}"_UDP_"${PORT[udp_discovery_server]}"
  FILENAME[udp_client]="${FILENAME[discovery]}"_UDP_"${PORT[udp_discovery_client]}"
  FILENAME[nc-hex]=$DIR/'nc-hex.txt'

  ((DEBUG)) && echo >&2 Filename "${FILENAME[@]}"

}

function showRainInfoMessage {
  which notify-send >/dev/null && notify-send -t 3000 -i dialog-warning "gw script" "$1" &
  #https://www.shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash/
  echo -e "$(date)" "$1" # may add bell \a
  if [ -n "$2" ]; then
    which espeak >/dev/null && espeak -p10 "$2" &
  fi
}

function runRainNotification { 
  # $1 - number of seconds between each rain probe
  # $2 - show start/stop messages only (1 on, 0 off)
  local rr
  local rd
  local rainInterval # raining continously for "$1" seconds
  local rainDuration # minutes raining
  local simulation
  local showStartStopEventOnly=$2
  local rainTimeout=$1
  rainTimeout=$1
  showStartStopEventOnly=$2

  simulation=0 # 1 = on for testing
  (( DEBUG )) && >&2 echo Rain simulation $simulation
  ((simulation)) && {
    rainTimeout=5
    showStartStopEventOnly=1
    CONFIGURATION[rainrate]=0
    CONFIGURATION[rainday]=10
  } # { list ; } run in current shell

  ((DEBUG)) && echo >&2 "Rain event interval $rainTimeout s. Show start/stop events only $showStartStopEventOnly"

  rainInterval=0
  while true; do
    ((simulation == 0)) && sendPacket ${CMD[read_raindata]} >/dev/null
    ((simulation)) && ((CONFIGURATION[rainrate] = CONFIGURATION[rainrate] + 10)) && ((CONFIGURATION[rainrate] == 50)) && CONFIGURATION[rainrate]=0
    convertScale10ToFloat "${CONFIGURATION[rainrate]}"
    rr=$VALUE_SCALE10_FLOAT
    convertScale10ToFloat "${CONFIGURATION[rainday]}"
    rd=$VALUE_SCALE10_FLOAT
    if ((CONFIGURATION[rainrate] != 0)); then
      ((rainInterval++))
      if ((rainInterval == 1)); then
        showRainInfoMessage "☂ Raining $rr mm/h.Today $rd mm" "Its raining! $rr millimeter per hour. Today $rd millimeter"
      else
        if [ "$showStartStopEventOnly" != "1" ]; then
          showRainInfoMessage "☂ Raining $rr mm/h. Today $rd mm"
        fi
      fi
    fi
    if ((rainInterval && CONFIGURATION[rainrate] == 0)); then
      rainDuration=$((rainInterval * rainTimeout / 60)) # integer only in bash
      showRainInfoMessage "Raining stopped! Today $rd mm. Rained for $rainDuration minutes." "Raining stopped! Today $rd millimeter. It rained for $rainDuration minutes."
      rainInterval=0
    fi
    sleep "$rainTimeout"
  done
}

function connnectAP {
  local lan_mac
  local lan_mac_lc #lowercase
  local ap_mac
  local ap_all_scan
  local ap_scan
  local ap_scan_result
  local connect_result
  local connect_str
  local connect_attempt
  local connect_attempt_MAX
  local connected
  local timeout
  local bssid_pattern

  timeout=5
  connected=1
  connect_attempt=0
  connect_attempt_MAX=15

  #useful for debugging: sudo nmcli device monitor and  sudo iw event -r

  if ! which nmcli >/dev/null; then
    return "$ERROR_NO_NMCLI"
  fi
  sudo nmcli radio wifi on
  ((DEBUG)) && echo >&2 Waiting $timeout s for device to bootup after reset
  sleep $timeout # wait for reset/bootup

  # Station mode/LAN: MAC 48:3F:DA:54:14:EC, ssid/version GW1000A-WIFI14EC, AP-mode: MAC 4A:3F:DA:54:14:EC, GW1000-WIFI4EC
  # 48:3F:DA - EspressIf Inc. https://www.wireshark.org/tools/oui-lookup.html
  #  nmcli dev wifi list : 4A:3F:DA:54:14:EC  GW1000-WIFI14EC  Infra  1     54 Mbit/s   77      ▂▄▆_  --
  # observation/seldom : 4A:3F:DA:54:14:EC SSID  ESP_5414EC -> hotsport started before ssid rename in firmware v.1.6.8?
  lan_mac=${CONFIGURATION[broadcast_mac]//:/}
  lan_mac_lc=${CONFIGURATION[broadcast_mac],,}
  bssid_pattern=${lan_mac:9}

  while ((connected == 1 && connect_attempt < "$connect_attempt_MAX")); do
    ((connect_attempt++))

    ((DEBUG)) && echo >&2 Connect attempt "$connect_attempt"
    if [ "$connect_attempt" == "1" ]; then
      ap_all_scan=$(sudo nmcli -t -e no -f BSSID,SSID,IN-USE dev wifi list --rescan yes) #use terse mode for fixed format string
    else
      ap_all_scan=$(sudo nmcli -t -e no -f BSSID,SSID,IN-USE dev wifi list --rescan auto)
    fi
    ap_scan=$(grep -F "$bssid_pattern" <<<"$ap_all_scan")
    ap_scan_result=$?

    if ((ap_scan_result == 0)) && [ -n "$ap_scan" ]; then
      ((DEBUG)) && echo >&2 AP scan "$ap_scan"
      readarray -d':' nmcli_result < <(echo -n "$ap_scan")
      in_use=${nmcli_result[7]}
      ap_mac=${nmcli_result[0]}${nmcli_result[1]}${nmcli_result[2]}${nmcli_result[3]}${nmcli_result[4]}${nmcli_result[5]}
      ap_mac=${ap_mac:0:-1}

      if [ "$in_use" != "*" ]; then
        ((DEBUG)) && echo >&2 Connecting to bssid "$ap_mac"
        connect_str=$(sudo nmcli -w 5 dev wifi connect "$ap_mac") #nmcli has a default timeout of 45 seconds, try just waiting 5 s
        connect_result=$?
        echo >&2 "$connect_str"
      fi

      if ((connect_result == 0)) && [[ $connect_str != Error* ]] || [ "$in_use" == "*" ]; then
        ((DEBUG)) && arp -n | grep -F "${lan_mac_lc:9}" >&2
        connected=0
        #ip -4 -o address
      fi

    fi

    ((connected == 1)) && sleep 5
  done

}

function processCommand {
#$1 - field pattern for livedata

  case $COMMAND in

  reset)
    sendPacket ${CMD[broadcast]} $FD_UDP >/dev/null
    read -r -p "Reset ${CONFIGURATION[broadcast_mac]} ${CONFIGURATION[broadcast_ssid]} (Y/N)? "
    case $REPLY in
    Y)
      sendPacket ${CMD[write_reset]} # 3 blink in red LED
      connnectAP                     # assume user wants to reconnect for setting up new WIFI
      ;;
    esac
    ;;

  reboot)
    sendPacket "${CMD[reboot]}"
    ;;

  mac)
    sendPacket "${CMD[read_mac]}"
    ;;

  version)
    sendPacket ${CMD[read_version]}
    ;;

  ecowitt)
    sendPacket ${CMD[read_ecowitt_interval]}
    ;;

  wunderground)
    sendPacket ${CMD[read_wunderground]}
    ;;

  wow)
    sendPacket ${CMD[read_wow]}
    ;;

  weathercloud)
    sendPacket ${CMD[read_weathercloud]}
    ;;

  customized)
    sendPacket ${CMD[read_path]}
    sendPacket ${CMD[read_customized]}
    ;;

  broadcast)
    sendPacket ${CMD[broadcast]} $FD_UDP
    ;;

  rain)
    sendPacket ${CMD[read_raindata]}
    ;;

  livedata)
     LDPATTERN=$1
     sendPacket ${CMD[livedata]}
          ;;
  *)
    echo >&2 Error Unkown command "$COMMAND"
    return 1
    ;;
  esac

  return 0
}

read -r -u 0 -t 0.5 STDIN

if [ -n "$STDIN" ]; then
#  echo STDIN "$STDIN"
   :
  #maybe parse packet if gw used as filter echo hex dump | gw

fi

declare -A FILENAME # declare -A (if decl. inside function -> local only)

initConfigDir
newLivedataFieldNameDesc

#https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in

  -a | --rain)
    # validate rain input
    if [ -z "$2" ] || [ -z "$2" ] || [ -z "$4" ] || [ -z "$5" ]; then
      echo >&2 "Error: rain day/week/month/year not specified, use $1 {rainday} {week} {month} {year}"
      exit "$ERROR_RAINDATA_NOTSPECIFIED"
    fi
    echo >&2 rainday "$2" rainweek "$3" rainmonth "$4" rainyear "$5"
    sendRaindata "$2" "$3" "$4" "$5"
    shift 5
    ;;

  -b | --backup)
    sendPacket ${CMD[read_mac]} >/dev/null
    sendPacket ${CMD[read_version]} >/dev/null
    sendPacket ${CMD[broadcast]} $FD_UDP >/dev/null
    sendPacket ${CMD[read_ecowitt_interval]} >/dev/null
    sendPacket ${CMD[read_wunderground]} >/dev/null
    sendPacket ${CMD[read_wow]} >/dev/null
    sendPacket ${CMD[read_weathercloud]} >/dev/null
    sendPacket ${CMD[read_customized]} >/dev/null
    sendPacket ${CMD[read_path]} >/dev/null
    sendPacket ${CMD[read_raindata]} >/dev/null
    printConfiguration
    shift
    ;;
  -c | --command)
    COMMAND="${2,,}"
    
    if processCommand "${3,,}"; then # $3 pass field pattern to livedata
    
     if [[ $COMMAND == "livedata" ]]; then
        shift 3
      else
        shift 2
      fi
    else
      shift 1
    fi
    unset COMMAND
    ;;
  -d | --debug)
    DEBUG=1
    DEBUG_OPTIONS[socat]='-d -d -x'
    DEBUG_OPTIONS[nc]='-v -v -v'
    echo >&2 "${FILENAME[@]}"
    shift
    ;;

  -e | --ecowitt_interval)
    sendEcowittInterval "$2"
    shift 2
    ;;

  -f | --firmware)
    HTTP_UA_NAME="gw script BASH ${BASH_VERSION} $(uname -srv)"
    HTTP_FIRMWARE="http://download.ecowitt.net/down/filewave?v=FirwaveReadme.txt"
    ((DEBUG)) && printf >&2 "%s\n%s" "$HTTP_UA_NAME" "$HTTP_FIRMWARE"
    curl --silent --show-error --user-agent "$HTTP_UA_NAME" "$HTTP_FIRMWARE"
    shift 2
    ;;
  -g | --wunderground)
    sendWeatherservice "${CMD[write_wunderground]}" "$2" "$3"
    shift 3
    ;;
  -i | --wow)
    sendWeatherservice "${CMD[write_wow]}" "$2" "$3"
    shift 3
    ;;
  -j | --weathercloud)
    sendWeatherservice "${CMD[write_weathercloud]}" "$2" "$3"
    shift 3
    ;;
  -h | --host)
    HOST_PREV=$HOST
    HOST="$2" # this arg must come first to open socketsopen file descriptors to UDP/TCP port on HOST

    #if ! connect "$2"; then
    #  echo >&2 "$HOST" "Error Failed to connect host $2, exiting"
    #  disconnect
    #  exit $ERROR_CONNECTION
    #fi
    CONFIGURATION[host]=$HOST
    shift 2
    ;;
  -l | --listen)
    echo >&2 Listening for http request on port "$2"
    mapfile HTTP_REQUEST < <(nc -l "$2")
    for ((n = 0; n < ${#HTTP_REQUEST[@]}; n++)); do
      echo "${HTTP_REQUEST[$n]}"
    done
    shift 2
    ;;
    # Wunderground
    #GET /wundergroundID=testid&PASSWORD=testpassword&tempf=63.0&humidity=82&dewptf=57.4&windchillf=63.0&winddir=355&windspeedmph=3.36&windgustmph=4.47&rainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&solarradiation=206.87&UV=2&indoortempf=74.3&indoorhumidity=61&baromin=29.760&soilmoisture=16&lowbatt=0&dateutc=now&softwaretype=GW1000A_V1.6.8&action=updateraw&realtime=1&rtfreq=5 HTTP/1.0
    #Accept: */*
    #Host: 192.168.3.174
    #Connection: Close

    # Ecowitt
    #POST /ecowitt HTTP/1.1
    #HOST: 192.168.3.174
    #Connection: Close
    #Content-Type: application/x-www-form-urlencoded
    #Content-Length:591
    #
    #PASSKEY=976D09F15C41FD8DC6E9A9E8C4F39707&stationtype=GW1000A_V1.6.8&dateutc=2021-08-10+12:08:12&tempinf=74.1&humidityin=61&baromrelin=29.754&baromabsin=29.754&tempf=63.0&humidity=82&winddir=15&windspeedmph=3.80&windgustmph=4.47&maxdailygust=5.82&solarradiation=206.01&uv=2&rainratein=0.000&eventrainin=0.051&hourlyrainin=0.000&dailyrainin=0.020&weeklyrainin=0.051&monthlyrainin=0.311&yearlyrainin=4.811&totalrainin=4.811&temp1f=68.72&humidity1=67&temp2f=72.14&humidity2=63&temp3f=80.24&humidity3=48&soilmoisture1=16&wh65batt=0&batt1=0&batt2=0&batt3=0&soilbatt1=1.4&freq=868M&model=GW1000_Pro
    #
    #A = 868 Mhz GW1000A, B= , C= 433
  -r | --restore)
    unset CONFIGURATION
    declare -A CONFIGURATION
    while read -r K V; do
      CONFIGURATION["$K"]="$V"
    done <"$2"
    printConfiguration

    sendEcowittInterval "${CONFIGURATION[ecowitt_interval]}"
    sendWeatherservice "${CMD[write_wunderground]}" "${CONFIGURATION[wunderground_id]}" "${CONFIGURATION[wunderground_password]}"
    sendWeatherservice "${CMD[write_wow]}" "${CONFIGURATION[wow_id]}" "${CONFIGURATION[wow_password]}"
    sendWeatherservice "${CMD[write_weathercloud]}" "${CONFIGURATION[weathercloud_id]}" "${CONFIGURATION[weathercloud_password]}"
    sendCustomized
    sendRaindata "${CONFIGURATION[rainday]}" "${CONFIGURATION[rainweek]}" "${CONFIGURATION[rainmonth]}" "${CONFIGURATION[rainyear]}"
    shift 2
    ;;

  -n | --notifyrain)
    runRainNotification "$2" "$3" #tested on GNOME
    shift 3
    ;;

  -s | --scan)
    if which socat >/dev/null; then
      discovery
    else
      Echo >&2 Error socat not found, cannot scan for devices
      return "$ERROR_NO_SOCAT"
    fi
    shift
    ;;
  -z | --customized)

    updateCustomized "$2"
    shift 2
    ;;

  -w | --wifi)
    newPacketBody ${CMD[write_ssid]}
    #ssid packet has two byte length
    # TEST wsview android app, wireshark: ffff | 11 |001b| 08536b6f676c756e640d6c756775626572313934322d2e | a9
    #WSView_v1.1.51_apkpure.com_source_from_JADX/sources/com/ost/newnettool/Fragment/ConfigrouterFragment.java - SaveData
    writeString "$2" # ssid
    writeString "$3" # password
    sendPacket
    shift 3
    ;;

  *)                   # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac

done

((${#POSITIONAL[@]})) && echo >&2 Failed to recognize options "${POSITIONAL[@]}"

set -- "${POSITIONAL[@]}" # restore positional parameters

disconnect

##echo CMD_BROADCAST
#command '\x12\x00\x04\x15' $FD_UDP
#https://unix.stackexchange.com/questions/612193/socat-send-a-udp-broadcast-from-stdin-but-handling-responses-with-system
#echo -ne "\xff\xff\x12\x00\x04\x16" | socat -d -d -x -t 1 - udp-datagram:255.255.255.255:46000,broadcast
