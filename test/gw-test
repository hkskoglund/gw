#!/bin/bash
[ -n "$ZSH_VERSION" ] && emulate ksh

HOST=192.168.3.80

function test_ws_ecowitt
{
    typeset pec
    pec=$(./gw -h $HOST -c ecowitt)
    typeset testv
    testv=1
    typeset testec
    testec=$(./gw -h $HOST -c ec $testv -c ec )
    printTestHeader "Ecowitt interval"  
    if [ "$testec" -eq "$testv" ]; then
      echo "SUCCESS "
    else
      echo "FAIL - wrote $testv, read $testec"
    fi

    ./gw -h $HOST -c ec "$pec" 
}

function test_ws
#$1 - weather service
{
    typeset pwuid
    typeset pwupw
    read -r pwuid pwupw <<< "$(./gw -h $HOST -c "$1" )"
    typeset testid
    testid=wuid
    typeset testpw
    testpw=wupw 
    ./gw -h $HOST -c "$1" $testid $testpw 
    read -r wuid wupw <<< "$(./gw -h $HOST -c "$1")"

    printTestHeader "$1"
    if [ "$wuid" = "$testid" ] && [ "$wupw" = "$testpw" ]; then
      echo "SUCCESS"
    else
      echo "FAIL - wrote id $testid pw $testpw, read id $wuid pw $wupw"
    fi

    ./gw -h $HOST -c "$1" "$pwuid" "$pwupw" 
}

function updateCustomized 
{
 # set -x
 ./gw  -h $HOST -c c id="${CUSTOMIZED[0]}",password="${CUSTOMIZED[1]}",server="${CUSTOMIZED[2]}",port="${CUSTOMIZED[3]}",interval="${CUSTOMIZED[4]}",type="${CUSTOMIZED[5]}",enabled="${CUSTOMIZED[6]}",path_wu="${CUSTOMIZED[7]}",path_ec="${CUSTOMIZED[8]}" -c c
 # set +x
}

function copyRestoredToCustomized
{
  typeset n
  n=0;
  while [ "$n" -lt "${#RESTORE_CUSTOMIZED[@]}" ]; do
    CUSTOMIZED[n]=${RESTORE_CUSTOMIZED[n]}
    n=$(( n + 1 ))
  done
}

function restoreCustomized 
#read only reads one line
#can use readarray/mapfile in bash, but not available in zsh/mksh
{
  typeset n
  typeset oifs
  oifs=$IFS
  n=0
  #format: id {idvalue} - printCustomized function
  while read -r KEY VALUE; do 
    if [ "$n" -eq 4 ] || [ "$n" -eq 5 ] || [ "$n" -eq 6 ] || [ "$n" -eq 7 ]; then #read only first value
       read -r V DISCARD <<< "$VALUE"
       RESTORE_CUSTOMIZED[$n]=$V
    else
       RESTORE_CUSTOMIZED[$n]=$VALUE #keep space
    fi 
    # echo  RESTORE "${RESTORE_CUSTOMIZED[$n]}" n "$n"
     n=$(( n + 1 ))
  done  <<< "$1"
  IFS=$oifs
  
}

function printTestHeader
{
  printf "%16s Test r/w " "$1"
}

function test_customized
{
  typeset prev_customized
  prev_customized="$(./gw -h $HOST -c c)"
  CUSTOMIZED=(idtest "pwtest space" server.tst 8082 17 0 1 /pathwu /pathec )

  typeset customized
  # echo UPDATING CUSTOMIZED "${CUSTOMIZED[@]}"
  customized=$( updateCustomized )
  restoreCustomized "$customized"
 
  typeset fail

  n=0;
 fail=0;
  while [ "$n" -lt "${#RESTORE_CUSTOMIZED[@]}" ]; do
 # echo RESTORE "${RESTORE_CUSTOMIZED[n]}" CUSTOMIZED "${CUSTOMIZED[n]}" n "$n"
    if [ "${RESTORE_CUSTOMIZED[n]}" != "${CUSTOMIZED[n]}" ]; then
     fail=1
     break;
    fi
    n=$(( n + 1 )) 
  done

  printTestHeader "Customized"
  if [ $fail -eq 0 ]; then 
     echo SUCCESS
     
  else
    echo FAILED CUSTOMIZED "${CUSTOMIZED[@]}" RESTORED "${RESTORED[@]}"
  fi

  restoreCustomized "$prev_customized"
  copyRestoredToCustomized
  updateCustomized >/dev/null 


}

function test_ws_all
{
   test_ws_ecowitt
     typeset services
     services="wunderground weathercloud wow"
     for ws in $services; do
       test_ws "$ws"
     done
}

function test
{
  if [ "$1" = "1" ]; then
     test_ws_all
  elif [ "$1" = "2" ]; then
    test_customized
  elif [ "$1" = "a" ]; then
     test_ws_all
     test_customized
  else
     echo >&2 Error unknown test "$1"
  fi
}

function printUsage
{
    echo "Usage: gw-test {test}"
  echo    "   1 = weather service ecowitt/wunderground/wow/weathercloud"
  echo    "   2 = customized"
  echo    "   a = all"
    echo "Append 2>/dev/null to mute packet write result messages"
    echo "Example"
    echo " test 1 - n - gw-test {1..n}"
    echo " test 2     - gw-test 2"
    #https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html
}

if [ $# -eq 0 ]; then
   printUsage
fi

while [ $# -gt 0 ]; do 

    case $1 in

      -h|--help) 
          printUsage
          shift
          ;;

      -v|--version)
        echo "1.0"
        shift
        ;;

      *)
        test "$1"
        shift
          ;;
    esac

done

