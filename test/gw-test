#!/bin/bash
[ -n "$ZSH_VERSION" ] && emulate ksh

test_ws_ecowitt ()
{
    typeset pec 2>/dev/null || local pec
    pec=$(./gw -h "$HOST" -c ecowitt)

    typeset testv 2>/dev/null || local testv
    testv=1
    typeset testec 2>/dev/null || local testec

    testec=$(./gw -h "$HOST" -c ecowitt $testv -c ecowitt )
    
    ./gw -h "$HOST" -c ec "$pec" 

    printTestHeader "r/w" "ecowitt interval"  
    if [ "$testec" -eq "$testv" ]; then
      echo "SUCCESS "
    else
      echo "FAIL - wrote $testv, read $testec"
    fi

}

test_ws ()
#$1 - weather service
{
    typeset pwuid 2>/dev/null || local pwuid
    typeset pwupw 2>/dev/null || local pwupw
    typeset testid 2>/dev/null || local testid
    typeset testpw 2>/dev/null || local testpw

    read -r pwuid pwupw << EOF
$(./gw -h "$HOST" -c "$1" )
EOF
    testid=wuid
    testpw=wupw 

    ./gw -h "$HOST" -c "$1" $testid $testpw 

    read -r wuid wupw << EOF
$(./gw -h "$HOST" -c "$1")
EOF

    printTestHeader "r/w" "$1"
    if [ "$wuid" = "$testid" ] && [ "$wupw" = "$testpw" ]; then
      echo "SUCCESS"
    else
      echo "FAIL - wrote id $testid pw $testpw, read id $wuid pw $wupw"
    fi

    ./gw -h "$HOST" -c "$1" "$pwuid" "$pwupw" 
}

updateCustomized () 
{
 # set -x
 ./gw  -h "$HOST" -c customized id="$1",password="$2",server="$3",port="$4",interval="$5",type="$6",enabled="$7",path_wu="$8",path_ec="$9" -c customized
 # set +x
}

restoreCustomized () 
#$1 customized settings
#read only reads one line
#can use readarray/mapfile in bash, but not available in zsh/mksh
{
   typeset key 2>/dev/null | local key
  typeset value 2>/dev/null | local value

  RESTORED_SETTING=1
  while [ "$RESTORED_SETTING" -le 9 ] ; do
    #shellcheck disable=2034
    read -r key value
    
    #echo RESTORED_SETTING= "$RESTORED_SETTING" key= "$key" value= "$value"
    
    if [ "$RESTORED_SETTING" -eq 1 ]; then
      RESTORE_ID=$value
    elif [ "$RESTORED_SETTING" -eq 2 ]; then
      RESTORE_PASSWORD=$value
    elif [ "$RESTORED_SETTING" -eq 3 ]; then
      RESTORE_SERVER=$value;
    elif [ "$RESTORED_SETTING" -eq 4 ]; then
      RESTORE_PORT=$value;
    elif [ "$RESTORED_SETTING" -eq 5 ]; then
      RESTORE_INTERVAL=$value;
    elif [ "$RESTORED_SETTING" -eq 6 ]; then
      #just need value, not protocol description
      read -r value discard << EOF
$value
EOF
      RESTORE_TYPE=$value;
    elif [ "$RESTORED_SETTING" -eq 7 ]; then
        #shellcheck disable=2034
      read -r value discard << EOF
$value
EOF
      RESTORE_ENABLED=$value
    elif [ "$RESTORED_SETTING" -eq 8 ]; then
      RESTORE_PATH_EC=$value;
    elif [ "$RESTORED_SETTING" -eq 9 ]; then
      RESTORE_PATH_WU=$value
    fi

    RESTORED_SETTING=$(( RESTORED_SETTING + 1 ))
 
  done << EOF
$1
EOF

  RESTORED_SETTING=$(( RESTORED_SETTING - 1 ))
 
}

 printTestHeader ()
#$1 - r/w mode
#$2
{
  printf "Test %3s %16s " "$1" "$2"
}

test_customized ()
{
  typeset prev_customized 2>/dev/null || local prev_customized
  typeset customized 2>/dev/null || local customized
  typeset fail 2>/dev/null | local fail

  prev_customized="$(./gw -h "$HOST" -c customized)"

  CUSTOMIZED_ID=idtest
  CUSTOMIZED_PASSWORD="pwtest space"
  CUSTOMIZED_SERVER="server.tst"
  CUSTOMIZED_PORT=8082
  CUSTOMIZED_INTERVAL=17
  CUSTOMIZED_TYPE=0
  CUSTOMIZED_ENABLED=1
  CUSTOMIZED_PATH_EC=/pathec
  CUSTOMIZED_PATH_WU=/pathwu

  customized=$( updateCustomized "$CUSTOMIZED_ID" "$CUSTOMIZED_PASSWORD" "$CUSTOMIZED_SERVER" "$CUSTOMIZED_PORT" "$CUSTOMIZED_INTERVAL" "$CUSTOMIZED_TYPE" "$CUSTOMIZED_ENABLED" "$CUSTOMIZED_PATH_EC" "$CUSTOMIZED_PATH_WU" )  # we're getting customized settings from printCustomized
#              id testid
#        password testpw
#          server server.tst
#            port 8081
#        interval 16
#            type 0 ecowitt
#         enabled 1 on
#     pathecowitt /pwu
#pathwunderground /pec

 restoreCustomized "$customized"

  fail=0
  if [ $RESTORED_SETTING -ne 9 ]; then
    fail=1
  else
    if [ "$RESTORE_ID" != "$CUSTOMIZED_ID" ]; then
      fail=1
      echo >&2 "Customized id failed $RESTORE_ID != $CUSTOMIZED_ID" 
    elif  [ "$RESTORE_PASSWORD" != "$CUSTOMIZED_PASSWORD" ]; then
        fail=1
      echo >&2 "Customized password failed $RESTORE_PASSWORD != $CUSTOMIZED_PASSWORD" 
    elif [ "$RESTORE_SERVER" != "$CUSTOMIZED_SERVER" ]; then
      fail=1
      echo >&2 "Customized server failed $RESTORE_SERVER != $CUSTOMIZED_SERVER" 
    elif [ "$RESTORE_PORT" -ne "$CUSTOMIZED_PORT" ]; then
      fail=1
      echo >&2 "Customized port failed $RESTORE_PORT != $CUSTOMIZED_PORT" 
    elif [ "$RESTORE_INTERVAL" -ne "$CUSTOMIZED_INTERVAL" ]; then
        fail=1
      echo >&2 "Customized interval failed $RESTORE_INTERVAL != $CUSTOMIZED_INTERVAL" 
    elif  [ "$RESTORE_TYPE" -ne "$CUSTOMIZED_TYPE" ]; then
      fail=1
      echo >&2 "Customized type failed $RESTORE_TYPE != $CUSTOMIZED_TYPE" 
    elif  [ "$RESTORE_ENABLED" -ne "$CUSTOMIZED_ENABLED" ]; then
      fail=1
      echo >&2 "Customized enabled failed $RESTORE_ENABLED != $CUSTOMIZED_ENABLED"
    elif  [ "$RESTORE_PATH_EC" != "$CUSTOMIZED_PATH_EC" ]; then
      fail=1
      echo >&2 "Customized path ecowitt failed $RESTORE_ENABLED != $CUSTOMIZED_ENABLED"
    elif  [ "$RESTORE_PATH_WU" != "$CUSTOMIZED_PATH_WU" ]; then
      fail=1
      echo >&2 "Customized path ecowitt failed $RESTORE_ENABLED != $CUSTOMIZED_ENABLED"
    fi
  fi

  restoreCustomized "$prev_customized"
  updateCustomized "$RESTORE_ID" "$RESTORE_PASSWORD" "$RESTORE_SERVER" "$RESTORE_PORT" "$RESTORE_INTERVAL" "$RESTORE_TYPE" "$RESTORE_ENABLED" "$RESTORE_PATH_EC" "$RESTORE_PATH_WU" >/dev/null 

  printTestHeader "r/w" "customized"
  if [ $fail -eq 0 ]; then 
     echo SUCCESS
  else
    echo FAILED 
  fi
}

test_ws_all ()
{
    typeset services 2>/dev/null || local services

   test_ws_ecowitt
     services="wunderground weathercloud wow"
     for ws in $services; do
       test_ws "$ws"
     done
}

test_string ()
{
  typeset str 2>/dev/null || local str
  str=$(./gw -h "$HOST" -c "$1")
  printTestHeader "r" "$1"
  if [ -n "$str" ]; then
    echo "SUCCESS"
    return 0
  else
    echo "FAILED"
    return 1
  fi
    
}

test ()
{
  if [ "$1" = "1" ]; then
     test_ws_all
  elif [ "$1" = "2" ]; then
    test_customized
  elif [ "$1" = "3" ]; then
     test_string version
  elif [ "$1" = "4" ]; then
     test_string mac
  elif [ "$1" = "a" ]; then
     test_ws_all
     test_customized
     test_string version
     test_string mac
  else
     echo >&2 Error unknown test "$1"
  fi
}

 printUsage ()
{
  echo "Usage: gw-test -h {host} {test}"
  echo    "   1 = weather service ecowitt/wunderground/wow/weathercloud"
  echo    "   2 = customized"
  echo    "   3 = version"
  echo    "   4 = mac"
  echo    "   a = all"
  echo ""  
  echo "Append 2>/dev/null to mute packet write result messages"
  echo ""
  echo "Example"
  echo " test 1 - n - gw-test {1..n}"
  echo " test 2     - gw-test 2"
  #https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html
}

if [ $# -eq 0 ]; then
   printUsage
fi

while [ $# -gt 0 ]; do 

    case $1 in

      -h|--host)
        HOST=$2
        shift 2
        ;;

      -\?|--help) 
          printUsage
          shift
          ;;

      -v|--version)
        echo "1.0"
        shift
        ;;

      *)
        if [ -n "$HOST" ]; then
           test "$1"
        else
          echo >&2 Error host must be specificed with -h option
        fi
        shift
          ;;
    esac

done

